<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://yoursite.com</id>
    <title>日渐秃头白夫人</title>
    <subtitle>一只还是萌新的鸽子</subtitle>
    <icon>http://yoursite.com/images/favicon.ico</icon>
    <link href="http://yoursite.com" />
    <author>
      <name>斐雅琴</name>
    </author>
    <updated>2022-04-19T06:04:09.000Z</updated>
    <entry>
        <id>http://yoursite.com/2022/04/19/wechall-writeup-1/</id>
        <title>【CTF】wechall简单题解</title>
        <link rel="alternate" href="http://yoursite.com/2022/04/19/wechall-writeup-1/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&#34;ctf相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ctf相关&#34;&gt;#&lt;/a&gt; CTF 相关&lt;/h1&gt;&lt;p&gt;练习网站：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;推荐：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vQnViZ2l0L3AvOTcyMTI3Mi5odG1s&#34;&gt;https://www.cnblogs.com/Bubgit/p/9721272.html&lt;/span&gt;&lt;/li&gt;&lt;li&gt;选用：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy53ZWNoYWxsLm5ldC9jaGFsbHMvYnkvY2hhbGxfZGlmL0FTQy9wYWdlLTE=&#34;&gt;http://www.wechall.net/challs/by/chall_dif/ASC/page-1&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;工具：&lt;/p&gt;&lt;p&gt;密码格式总结：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvbmV3cy8xNzU5NDM=&#34;&gt;https://cloud.tencent.com/developer/news/175943&lt;/span&gt;&lt;/p&gt;&lt;p&gt;stegsolve/exiftool&lt;br&gt;隐写套路总结：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9mYXJlZWRmYXV6aS5naXRib29rLmlvL2N0Zi1jaGVja2xpc3QtZm9yLWJlZ2lubmVyL3N0ZWdhbm9ncmFwaHk=&#34;&gt;https://fareedfauzi.gitbook.io/ctf-checklist-for-beginner/steganography&lt;/span&gt;&lt;br&gt;条形码识别：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vbmxpbmUtYmFyY29kZS1yZWFkZXIuaW5saXRlcmVzZWFyY2guY29tLw==&#34;&gt;https://online-barcode-reader.inliteresearch.com/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;免费在线智能计算引擎 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sZnJhbWFscGhhLmNvbS8=&#34;&gt;https://www.wolframalpha.com/&lt;/span&gt;&lt;/p&gt;&lt;h2 id=&#34;write-up-第一批&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#write-up-第一批&#34;&gt;#&lt;/a&gt; write-up 【第一批】&lt;/h2&gt;&lt;h3 id=&#34;traning-get-sourced-047&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#traning-get-sourced-047&#34;&gt;#&lt;/a&gt; Traning : Get Sourced 0.47&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;The solution is hidden in this page
http://www.wechall.net/challenge/training/get_sourced/index.php
Use View Sourcecode to get it
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;&amp;lt;kdd&amp;gt;C^u&amp;lt;/kdd &amp;gt; 查看网页源代码，一般藏在注释中，&amp;lt;kdd&amp;gt;C^f&amp;lt;/kdd &amp;gt; 搜索 &lt;code&gt;&amp;lt;!&lt;/code&gt;&lt;br&gt;找到代码段&lt;/p&gt;&lt;p&gt;Result:&lt;/p&gt;&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- You are looking for this password: html_sourcecode --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr&gt;&lt;h3 id=&#34;training-ascii-055&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#training-ascii-055&#34;&gt;#&lt;/a&gt; Training : Ascii 0.55&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;In a computer, you can only work with numbers.
In this challenge you have to decode the following message, which is in ASCII.

84, 104, 101, 32, 115, 111, 108, 117, 116, 105, 111, 110, 32, 105, 115, 58, 32, 105, 99, 114, 112, 105, 97, 101, 100, 100, 99, 111, 112

--
http://www.wechall.net/challenge/training/encodings/ascii/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;/p&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; sys&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; tkinter &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; N&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;decodeAscii&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;number&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;number&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;__main__&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    tmp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;输入字符，以逗号隔开: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    numbers &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tmp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; number &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; numbers&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;decodeAscii&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;number&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; end&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Result:&lt;/p&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# The solution is: icrpiaeddcop&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr&gt;&lt;h3 id=&#34;2021-christmas-grampa-067&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2021-christmas-grampa-067&#34;&gt;#&lt;/a&gt; 2021 Christmas Grampa 0.67&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Santa speaks many languages and is receiving a lot of letters this year.
But he gets old!

The problem is that he will need glasses.
Do you need glasses as well?

spaceone told us you can help!

--
http://www.wechall.net/challenge/christmas2021/grampa/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;点进连接，solution.php 中有代码&lt;/p&gt;&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sha1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;あなたはそれを見つけることができません“ . “الحل خارج نطاقك&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;将 &lt;code&gt;あなたはそれを見つけることができません“ . “الحل خارج نطاقك&lt;/code&gt; 的加密结果填入，即通过&lt;br&gt;（但不知道是不是正确做法，因为没有找到从 challenge 页面获取 solution.php 的方法）&lt;/p&gt;&lt;p&gt;Result:&lt;br&gt;b33815d66363f7bf3aaa9223e22aa0bc66a5c05c&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;training-stegano-i-108&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#training-stegano-i-108&#34;&gt;#&lt;/a&gt; Training: Stegano I 1.08&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;This is the most basic image stegano I can think of.

--
https://www.wechall.net/challenge/training/stegano1/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;放到 WSL/Linux 系统中，用 cat 或者 vim 打开即可看见 flag&lt;br&gt;因为说了是最简单的，所以没做其他的隐写处理&lt;/p&gt;&lt;p&gt;Result:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Look what the hex-edit revealed: passwd:steganoI
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Reference：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9mYXJlZWRmYXV6aS5naXRib29rLmlvL2N0Zi1jaGVja2xpc3QtZm9yLWJlZ2lubmVyL3N0ZWdhbm9ncmFwaHk=&#34;&gt;https://fareedfauzi.gitbook.io/ctf-checklist-for-beginner/steganography&lt;/span&gt;&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;encodings-url-training-encoding-081&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#encodings-url-training-encoding-081&#34;&gt;#&lt;/a&gt; Encodings: URL (Training, Encoding) 0.81&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Your task is to decode the following:

%59%69%70%70%65%68%21%20%59%6F%75%72%20%55%52%4C%20%69%73%20%63%68%61%6C%6C%65%6E%67%65%2F%74%72%61%69%6E%69%6E%67%2F%65%6E%63%6F%64%69%6E%67%73%2F%75%72%6C%2F%73%61%77%5F%6C%6F%74%69%6F%6E%2E%70%68%70%3F%70%3D%65%64%73%6C%67%61%70%66%6D%63%70%62%26%63%69%64%3D%35%32%23%70%61%73%73%77%6F%72%64%3D%66%69%62%72%65%5F%6F%70%74%69%63%73%20%56%65%72%79%20%77%65%6C%6C%20%64%6F%6E%65%21

--
https://www.wechall.net/challenge/training/encodings/url/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;URL 编码转码，网上随便找个小工具，&lt;/p&gt;&lt;p&gt;Result：&lt;br&gt;解码结果： &lt;code&gt;Yippeh! Your URL is challenge/training/encodings/url/saw_lotion.php?p=edslgapfmcpb&amp;amp;cid=52#password=fibre_optics Very well done!&lt;/code&gt;&lt;br&gt;把结果给的网址和 wecall 的网址拼合一下并访问： &lt;code&gt;https://www.wechall.net/challenge/training/encodings/url/saw_lotion.php?p=edslgapfmcpb&amp;amp;cid=52#password=fibre_optics&lt;/code&gt; ，过了&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;training-crypto-caesar-i-crypto-training-12&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#training-crypto-caesar-i-crypto-training-12&#34;&gt;#&lt;/a&gt; Training: Crypto - Caesar I (Crypto, Training) 1.2&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;As on most challenge sites, there are some beginner cryptos, and often you get started with the good old caesar cipher.
I welcome you to the WeChall style of these training challenges :)

Enjoy!

SGD PTHBJ AQNVM ENW ITLOR NUDQ SGD KZYX CNF NE BZDRZQ ZMC XNTQ TMHPTD RNKTSHNM HR ONLRMZRDECGC

--
https://www.wechall.net/challenge/training/crypto/caesar/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;凯撒密码，暴力一点的试错就行了，偏移 6 位解密时，结果为：MAX JNBVD UKHPG YHQ CNFIL HOXK MAX ETSR WHZ HY VTXLTK TGW RHNK NGBJNX LHENMBHG BL IHFLGTLXYWAW&lt;br&gt;但是只有 MAX 对的上，其他的单词还是对不上，出于巧合，点中了偏移 7 位加密，此时结果为：THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG OF CAESAR AND YOUR UNIQUE SOLUTION IS POMSNASEFDHD&lt;br&gt;得到 flag（每次随机出来的密文不一样，但递归解密肯定能做）&lt;/p&gt;&lt;p&gt;尝试写了 python 脚本：&lt;/p&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; sys&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;caeser_decode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    base &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;A&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; n &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; num&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            result &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; n&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            result &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;p &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;base&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;base&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; result&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;__main__&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;输入密文：&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;爆破中，，&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;caeser_decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;但是该脚本只针对了大写的凯撒，需要加以修改，同时在&lt;img data-src=&#34;https://www.starky.ltd/2020/08/05/python-cryptography-caesar-cipher/&#34; alt=&#34;网上&#34;&gt;找到了用字母表的方法实现凯撒爆破的，值得学习，只不过没有跳过空格，有点可惜&lt;/p&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;symbols &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890 !?.&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ciphertext &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Please input ciphertext:\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; key &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;symbols&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ciphers &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; symbols&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; symbols&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 字母表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    transtab &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;maketrans&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ciphers&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; symbols&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    plaintext &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ciphertext&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;translate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;transtab&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#39;Key #&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;plaintext&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Result：&lt;br&gt;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG OF CAESAR AND YOUR UNIQUE SOLUTION IS POMSNASEFDHD&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;training-www-robots-http-training-122&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#training-www-robots-http-training-122&#34;&gt;#&lt;/a&gt; Training: WWW-Robots (HTTP, Training) 1.22&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;In this little training challenge, you are going to learn about the Robots_exclusion_standard.
The robots.txt file is used by web crawlers to check if they are allowed to crawl and index your website or only parts of it.
Sometimes these files reveal the directory structure instead protecting the content from being crawled.

Enjoy!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;robots.txt: 是一种存放于网站根目录下的 ASCII 编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。因为一些系统中的 URL 是大小写敏感的，所以 robots.txt 的文件名应统一为小写。robots.txt 应放置于网站的根目录下。如果想单独定义搜索引擎的漫游器访问子目录时的行为，那么可以将自定的设置合并到根目录下的 robots.txt，或者使用 robots 元数据（Metadata，又称元数据）。&lt;/p&gt;&lt;p&gt;比如，正好前阵日子被老师问到我知网论文数据怎么爬的，知网允不允许爬虫&lt;br&gt;我爬取的网站 https://search.cnki.com.cn/，他的 robots.txt 为：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;user-agent:*
allow:/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即允许所有的机器人爬取任意信息，&lt;/p&gt;&lt;p&gt;而正常我们访问的知网页面 https://www.cnki.net/，没有 robots.txt，搜索时会跳转到网址 https://kns.cnki.net/，他的 robots.txt 为：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;User-agent: *
Disallow: /
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即不允许任何机器人爬取信息，故知网可能真的不允许爬虫，但 search 的那个页面依旧开放。&lt;/p&gt;&lt;p&gt;回到本题，思路如下：&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud2VjaGFsbC5uZXQvcm9ib3RzLnR4dA==&#34;&gt;https://www.wechall.net/robots.txt&lt;/span&gt;&lt;br&gt;看见 disallow 档案&lt;/p&gt;&lt;p&gt;Result:&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud2VjaGFsbC5uZXQvY2hhbGxlbmdlL3RyYWluaW5nL3d3dy9yb2JvdHMvVDBQUzNDUjNULw==&#34;&gt;https://www.wechall.net/challenge/training/www/robots/T0PS3CR3T/&lt;/span&gt;&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;php-0817-161&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#php-0817-161&#34;&gt;#&lt;/a&gt; PHP-0817 1.61&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;I have written another include system for my dynamic webpages, but it seems to be vulnerable to LFI.
Here is the code:
GeSHi`ed PHP code
&amp;lt;?php
if (isset($_GET[&#39;which&#39;]))
{
        $which = $_GET[&#39;which&#39;];
        switch ($which)
        {
        case 0:
        case 1:
        case 2:
                require_once $which.&#39;.php&#39;;
                break;
        default:
                echo GWF_HTML::error(&#39;PHP-0817&#39;, &#39;Hacker NoNoNo!&#39;, false);
                break;
        }
}
?&amp;gt;
Your mission is to include solution.php.
Here is the script in action: News, Forum, Guestbook.

Good Luck!
--
https://www.wechall.net/challenge/php0817/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;LFI: Local File inclusion&lt;br&gt;PHP 代码为判断 which 的 case 语句，其中，which&lt;mark&gt;0/1/2 / 时会执行 $which.&#39;.php&#39;，其他值时，会报错误信息&lt;br&gt;初步理解，将 which=solution，是不是就能通过 index.php 执行 solution.php 了&lt;br&gt;结果确实是成功了，可为什么 which=solution 时通过了 which&lt;/mark&gt;0/1/2 的判断呢？？？&lt;/p&gt;&lt;ul&gt;&lt;li&gt;当一个非数字开头的字符串与数字 0 进行 == 比较时，结果总是 true！&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Result:&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud2VjaGFsbC5uZXQvY2hhbGxlbmdlL3BocDA4MTcvaW5kZXgucGhwP3doaWNoPXNvbHV0aW9u&#34;&gt;https://www.wechall.net/challenge/php0817/index.php?which=solution&lt;/span&gt;&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;training-php-lfi-exploit-php-training-29&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#training-php-lfi-exploit-php-training-29&#34;&gt;#&lt;/a&gt; Training: PHP LFI (Exploit, PHP, Training) 2.9&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Your mission is to exploit this code, which has obviously an LFI vulnerability:

GeSHi`ed PHP code
$filename = &#39;pages/&#39;.(isset($_GET[&amp;quot;file&amp;quot;])?$_GET[&amp;quot;file&amp;quot;]:&amp;quot;welcome&amp;quot;).&#39;.html&#39;;
include $filename;


There is a lot of important stuff in ../solution.php, so please include and execute this file for us.
...
--
https://www.wechall.net/challenge/training/php/lfi/up/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;趁热打铁，看见 file，明白是用路径进行 LFI 攻击，但是一直访问不进去&lt;br&gt;后来看攻略发现报错里显示的是&lt;/p&gt;&lt;pre&gt;&lt;code&gt;PHP Warning(2): include(pages/../../solution.php.html): failed to open stream: No such file or directory in /home/wechall/www/wc5/www/challenge/training/php/lfi/up/index.php(54) : eval()&#39;d code line 1

PHP Warning(2): include(): Failed opening &#39;pages/../../solution.php.html&#39; for inclusion
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;发现多了个.html，用 %00 截断，通过&lt;/p&gt;&lt;p&gt;Result:&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud2VjaGFsbC5uZXQvY2hhbGxlbmdlL3RyYWluaW5nL3BocC9sZmkvdXAvaW5kZXgucGhwP2ZpbGU9Li4vLi4vc29sdXRpb24ucGhwJTAw&#34;&gt;https://www.wechall.net/challenge/training/php/lfi/up/index.php?file=../../solution.php &lt;/span&gt;&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;prime-factory-training-math-198&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#prime-factory-training-math-198&#34;&gt;#&lt;/a&gt; Prime Factory (Training, Math) 1.98&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Your task is simple:
Find the first two primes above 1 million, whose separate digit sums are also prime.
As example take 23, which is a prime whose digit sum, 5, is also prime.
The solution is the concatination of the two numbers,
Example: If the first number is 1,234,567
and the second is 8,765,432,
your solution is 12345678765432
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;/p&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; sys&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;is_prime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; num &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; num &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;__main__&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;start programming...&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    times &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;vars&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1000000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; times &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; is_prime&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;vars&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            tmp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;vars&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; is_prime&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tmp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;vars&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                times &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token builtin&#34;&gt;vars&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;vars&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9999999&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Result:&lt;br&gt;10000331000037&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;training-mysql-i-mysql-exploit-training-216&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#training-mysql-i-mysql-exploit-training-216&#34;&gt;#&lt;/a&gt; Training: MySQL I (MySQL, Exploit, Training) 2.16&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;This one is the classic mysql injection challenge.
Your mission is easy: Login yourself as admin.
Again you are given the sourcecode, also as highlighted version.

Enjoy!
--
https://www.wechall.net/challenge/training/mysql/auth_bypass1/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;SQL 注入，对应源码：&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;function auth1_onLogin(WC_Challenge $chall, $username, $password)
{
	$db = auth1_db();
	
	$password = md5($password);
	
	$query = &amp;quot;SELECT * FROM users WHERE username=&#39;$username&#39; AND password=&#39;$password&#39;&amp;quot;;    # Attention！！
	
	if (false === ($result = $db-&amp;gt;queryFirst($query))) {      # Attention！！
		echo GWF_HTML::error(&#39;Auth1&#39;, $chall-&amp;gt;lang(&#39;err_unknown&#39;), false); # Unknown user
		return false;
	}

	# Welcome back!
	echo GWF_HTML::message(&#39;Auth1&#39;, $chall-&amp;gt;lang(&#39;msg_welcome_back&#39;, htmlspecialchars($result[&#39;username&#39;])), false);
	
	# Challenge solved?
	if (strtolower($result[&#39;username&#39;]) === &#39;admin&#39;) {      # Attention！！
		$chall-&amp;gt;onChallengeSolved(GWF_Session::getUserID());
	}
	
	return true;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即需要满足的条件：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;query 能返回结果&lt;/li&gt;&lt;li&gt;用户名为 admin&lt;/li&gt;&lt;li&gt;突破口在 $query 的 $username 上&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Result:&lt;br&gt;username: admin&#39; or &#39;1&#39;=&#39;1&lt;br&gt;passowrd: *&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;training-encodings-i-training-encoding-335&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#training-encodings-i-training-encoding-335&#34;&gt;#&lt;/a&gt; Training: Encodings I (Training, Encoding) 3.35&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;We intercepted this message from one challenger to another, maybe you can find out what they were talking about.
To help you on your progress I coded a small java application, called JPK.
Note: The message is most likely in english.

10101001101000110100111100110100
00011101001100101111100011101000
10000011010011110011010000001101
11010110111000101101001111010001
00000110010111011101100011110111
11100100110010111001000100000110
00011110011110001111010011101001
01011100100000101100111011111110
10111100100100000111000011000011
11001111100111110111110111111100
10110010001000001101001111001101
00000110010111000011110011111100
11110011111010011000011110010111
0100110010111100100101110

--
https://www.wechall.net/challenge/training/encodings1/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;下载 JDK，运行&lt;br&gt;由于是 0/1，判断为是 Binary 二进制，将其转换为 ascii&lt;br&gt;ASCII 码使用指定的 7 位或 8 位二进制数组合来表示 128 或 256 种可能的字符。&lt;br&gt;默认 bitsperblock 是 8，Binary Format 之后多一位，改成 7&lt;br&gt;再 Binary to Ascii 得到结果&lt;/p&gt;&lt;p&gt;Result：&lt;br&gt;This text is 7-bit encoded ascii. Your password is easystarter&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;training-programming-1-training-coding&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#training-programming-1-training-coding&#34;&gt;#&lt;/a&gt; Training: Programming 1 (Training, Coding)&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;When you visit this link you receive a message.
Submit the same message back to https://www.wechall.net/challenge/training/programming1/index.php?answer=the_message
Your timelimit is 1.337 seconds

--
https://www.wechall.net/challenge/training/programming1/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;爬虫，fq 需要把小火箭停掉！保证 IP 地址一致，否则会报错 Please login by sending your cookies in the HTTP Header（我一开始还以为是我的问题，找了两小时的错 = = ）&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import requests

url1 = &#39;http://www.wechall.net/challenge/training/programming1/index.php?action=request&#39;
url2 = &#39;http://www.wechall.net/challenge/training/programming1/index.php?answer=&#39;

header = {&#39;User-Agent&#39; : &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36&#39;}

cookie = dict(WC=&#39;16560453-62765-MFd1Gts6fM63vVbV&#39;)

re = requests.get(url1,headers=header,cookies=cookie)
print(re.status_code)
key = re.text
print(key)

url2 = url2 + key

re = requests.get(url2,headers=header,cookies=cookie)
print(re.text)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Result:&lt;br&gt;运行程序即可&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;zebra-training-encoding-stegano-225&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zebra-training-encoding-stegano-225&#34;&gt;#&lt;/a&gt; Zebra (Training, Encoding, Stegano) 2.25&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Help! A zebra escaped from its enclosure. But where is it now?

--
https://www.wechall.net/challenge/Hirsch/Zebra/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;斑马上的条纹是条形码，用读取条形码的网站识别一下就行&lt;br&gt;条形码识别：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vbmxpbmUtYmFyY29kZS1yZWFkZXIuaW5saXRlcmVzZWFyY2guY29tLw==&#34;&gt;https://online-barcode-reader.inliteresearch.com/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Result:&lt;br&gt;The answer is saFFari&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;training-crypto-transposition-i-crypto-training-242&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#training-crypto-transposition-i-crypto-training-242&#34;&gt;#&lt;/a&gt; Training: Crypto - Transposition I (Crypto, Training) 2.42&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;It seems that the simple substitution ciphers are too easy for you.
From my own experience I can tell that transposition ciphers are more difficult to attack.
However, in this training challenge you should have not much problems to reveal the plaintext.

oWdnreuf.lY uoc nar ae dht eemssga eaw yebttrew eh nht eelttre sra enic roertco drre . Ihtni koy uowlu dilekt  oes eoyrup sawsro don:wp soceiahbcp.h
--
https://www.wechall.net/challenge/training/crypto/transposition1/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;第一个单词 wonderful，所以是两个字符反转，写程序就行&lt;/p&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; sys&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reverse_code&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;code&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; code&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;decode_Fun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;en&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    tmp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; tmp &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;en&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        reverse &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; en&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tmp&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;tmp&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        result &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; reverse_code&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;reverse&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        tmp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tmp &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; num&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    reverse &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; en&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tmp&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    result &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; reverse_code&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;reverse&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; result&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;__main__&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# encrypt_code = input()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    encrypt_code &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;oWdnreuf.lY uoc nar ae dht eemssga eaw yebttrew eh nht eelttre sra enic roertco drre . Ihtni koy uowlu dilekt  oes eoyrup sawsro don:wp soceiahbcp.h&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    decode_Fun&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;encrypt_code&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Result:&lt;br&gt;Wonderful. You can read the message way better when the letters are in correct order. I think you would like to see your password now: posecaibhpch.&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;training-regex-training-regex-418&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#training-regex-training-regex-418&#34;&gt;#&lt;/a&gt; Training: Regex (Training, Regex) 4.18&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;submit the regular expression the matches an empty string, and only an empty string.

submit a regular expression that matches only the string &#39;wechall&#39; without quotes.

submit an expression that matches valid filenames for certain images.Your pattern shall match all images with the name wechall.ext or wechall4.ext and a valid image extension.Valid image extensions are .jpg, .gif, .tiff, .bmp and .png.

capture the filename, without extension, too
--
https://www.wechall.net/challenge/training/regex/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;正则表达式去菜鸟看一下就行&lt;/p&gt;&lt;p&gt;这里看一下非捕获性匹配是啥：例如，要在一篇英文资料中查找 &amp;quot;program&amp;quot; 和 &amp;quot;project&amp;quot; 两个单词，正则表达式可表示为 /program|project/, 也可表示为 /pro (gram|ject)/，但是缓存子匹配 (gramject) 没有意义，就可以用 /pro (?:gram|ject)/ 进行非捕获性匹配这样既可以简洁匹配又可不缓存无实际意义的字匹配。&lt;/p&gt;&lt;p&gt;Result:&lt;br&gt;/^&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;msup&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;/msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;/ /^wechall&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-.25em&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:.664392em&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:.05em&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:.02691em&#34;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:.01968em&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:.01968em&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;/&lt;br&gt;/^wechall4?.(?:tiff|jpg|gif|bmp|png)/ /^(wechall4?)\.(?:tiff|jpg|gif|bmp|png)/&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;hi-math-239&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hi-math-239&#34;&gt;#&lt;/a&gt; hi (Math) 2.39&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Hi, imagine this situation.
There is an IRC channel #wechall on irc.wechall.net.

The server sends the messages to all people in the channel, also back to the sender himself.
When every minute one person joins and says hi,
how many &amp;quot;hi&amp;quot; messages were totally sent for this channel after 0xfffbadc0ded minutes ?
No one ever leaves the channel, so there are 0xfffbadc0ded people at the end ;)

Further explanation for 3 minutes:
the channel is empty and there have been sent 0 messages 1st person joins, sends hi, the server sends hi back to 1 persons.
2nd person joins, sends hi, the server sends hi back to 2 persons.
3rd person joins, sends hi, the server sends hi back to 3 persons.

Minute 1: 2 messages sent
Minute 2: 3 messages sent
Minute 3: 4 messages sent
Adding these up means for 3 minutes are 9 messages sent.

Conversion Notes: 0xfffbadc0ded is hexadecimal which converts to 17.591.026.060.781 (Thats around 20 trillion minutes).Please submit your solution in the decimal system.

--
https://www.wechall.net/challenge/hi/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;大数等差数列，懒得编程，用免费在线智能计算引擎 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sZnJhbWFscGhhLmNvbS8=&#34;&gt;https://www.wolframalpha.com/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Result:&lt;br&gt;154722098935564539692256152&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&#34;stegano-attachment-stegano-image-training-255&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stegano-attachment-stegano-image-training-255&#34;&gt;#&lt;/a&gt; Stegano Attachment (Stegano, Image, Training) 2.55&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Hello challenger,

You got mail and a nice attachment.
Your unique solution which is bound to your session is in there too.

Enjoy!
--
https://www.wechall.net/challenge/training/stegano/attachment/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;br&gt;放 stegsolve 里 Format 一下，ascii 出现了 solution.txt 字样，后面跟的字符串就是个人的 flag&lt;/p&gt;&lt;p&gt;Result:&lt;br&gt;每个人不一样&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="ctf" scheme="http://yoursite.com/tags/ctf/" />
        <updated>2022-04-19T06:04:09.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2022/02/12/java-string-related/</id>
        <title>Java字符串相关操作总结</title>
        <link rel="alternate" href="http://yoursite.com/2022/02/12/java-string-related/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;对字符串的基础总结&lt;/p&gt;&lt;h2 id=&#34;字符串操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串操作&#34;&gt;#&lt;/a&gt; 字符串操作&lt;/h2&gt;&lt;h3 id=&#34;初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化&#34;&gt;#&lt;/a&gt; 初始化&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;abc&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;               &lt;span class=&#34;token comment&#34;&gt;// 最简单的方式，直接定义&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;abc&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 利用类的构造方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * String () : 初始化后是个空序列&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * String (char [] value) : 将字符数组转为字符串&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * String (char [] value,int offset,int count) : 将子数组转化为字符串，count 为长度&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;切割&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#切割&#34;&gt;#&lt;/a&gt; 切割&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 依据位置进行提取（结果为 String）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;abcdefghi&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 依据指定字符切割（结果为 String []）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; className &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;edu.ustb.examples.SimpleAuction&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; classList &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    classList &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; className&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;\\.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;替换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#替换&#34;&gt;#&lt;/a&gt; 替换&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; className &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;edu.ustb.examples.SimpleAuction&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; dir &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; className&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;\\.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;识别特殊字符 &amp;quot;\&amp;quot;&lt;/p&gt;&lt;h3 id=&#34;合并&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#合并&#34;&gt;#&lt;/a&gt; 合并&lt;/h3&gt;&lt;h3 id=&#34;查找位置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查找位置&#34;&gt;#&lt;/a&gt; 查找位置&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; className &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;edu.ustb.examples.SimpleAuction&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; dir &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; className&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判断&#34;&gt;#&lt;/a&gt; 判断&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; className &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;edu.ustb.examples.SimpleAuction&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;字符串的转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串的转换&#34;&gt;#&lt;/a&gt; 字符串的转换&lt;/h2&gt;&lt;h3 id=&#34;string-integer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string-integer&#34;&gt;#&lt;/a&gt; String &amp;amp; Integer&lt;/h3&gt;&lt;h3 id=&#34;string-boolean&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string-boolean&#34;&gt;#&lt;/a&gt; String &amp;amp; Boolean&lt;/h3&gt;&lt;h3 id=&#34;string-char&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string-char&#34;&gt;#&lt;/a&gt; String &amp;amp; Char&lt;/h3&gt;&lt;h2 id=&#34;字符串string的存储方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串string的存储方式&#34;&gt;#&lt;/a&gt; 字符串 String 的存储方式&lt;/h2&gt;&lt;h3 id=&#34;string-stringbuffer-stringbuilder的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string-stringbuffer-stringbuilder的关系&#34;&gt;#&lt;/a&gt; String, StringBuffer, StringBuilder 的关系&lt;/h3&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Java" scheme="http://yoursite.com/tags/Java/" />
        <updated>2022-02-12T07:42:35.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2021/11/18/jar-error/</id>
        <title>Xtext部署问题</title>
        <link rel="alternate" href="http://yoursite.com/2021/11/18/jar-error/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;&lt;p&gt;Xtext 工程引入了 Ecore 模型，现在准备将 xtext 的代码生成（generator）部分部署在 Web 端，所以需要将 generator 的 Main 函数导出 jar 包并在交给系统进行调用。&lt;/p&gt;&lt;p&gt;调用时出现了如下问题：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Caused by: org.eclipse.xtext.parser.ParseException: java.lang.IllegalStateException: Unresolved proxy xxxxxxxx. Make sure the EPackage has been registered.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;即 Xtext 项目引用的 Ecore 模型并没有被注册，故实例无法被解析。&lt;/p&gt;&lt;h2 id=&#34;报错截图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报错截图&#34;&gt;#&lt;/a&gt; 报错截图&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;1.jpg&#34; alt=&#34;截图&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;解决方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方法&#34;&gt;#&lt;/a&gt; 解决方法&lt;/h2&gt;&lt;p&gt;主要参考了 Lorenzo 大佬&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5sb3JlbnpvYmV0dGluaS5pdC90YWcveHRleHQv&#34;&gt;博客&lt;/span&gt;的&lt;strong&gt; Fixing Junit test problems&lt;/strong&gt; 章节，面对同样的问题，L 佬给出的解决办法是修改在 src 文件夹中的&lt;strong&gt; xxxStandaloneSetup 文件&lt;/strong&gt;（不能修改 src-gen 文件中的，因为 src-gen 会在运行 mwe2 时被覆盖）&lt;/p&gt;&lt;p&gt;大佬的代码（Java）&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public class HelloXcoreStandaloneSetup extends HelloXcoreStandaloneSetupGenerated{
 
	public static void doSetup() {
		new HelloXcoreStandaloneSetup().createInjectorAndDoEMFRegistration();
	}
 
	@Override
	public void register(Injector injector) {
		// added after the switching to Xcore
		if (!EPackage.Registry.INSTANCE.containsKey(&amp;quot;http://www.xtext.org/example/helloxcore/HelloXcore&amp;quot;)) {
			EPackage.Registry.INSTANCE.put(&amp;quot;http://www.xtext.org/example/helloxcore/HelloXcore&amp;quot;, org.xtext.example.helloxcore.helloxcore.HelloxcorePackage.eINSTANCE);
		}
 
		super.register(injector);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;补充（Xtend）&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;class SmartContractSpecificationStandaloneSetup extends SmartContractSpecificationStandaloneSetupGenerated {

	def static void doSetup() {
		new SmartContractSpecificationStandaloneSetup().createInjectorAndDoEMFRegistration()
	}
	
	override void register(Injector injector) {
		if (!(EPackage.Registry.INSTANCE.containsKey(&amp;quot;http://www.ustb.edu.cn/sei/mde/SmartContractSpecification&amp;quot;))) {
			EPackage.Registry.INSTANCE.put(&amp;quot;http://www.ustb.edu.cn/sei/mde/SmartContractSpecification&amp;quot;, SmartContractSpecificationPackage.eINSTANCE);
		}
		super.register(injector);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;基本概念：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;eINSTANCE：The singleton instance of the package&lt;/li&gt;&lt;li&gt;xxxPackage：The Package for the model. It contains accessors for the meta objects to represent.&lt;/li&gt;&lt;li @link epackage&gt;EPackage.Registry: A map from {@link EPackage#getNsURI() namespace URI} to&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;代码的基本思想：&lt;/p&gt;&lt;p&gt;重写 register 函数，如果检测 EPackage.Registry 中没有引用 Ecore 的注册信息，则手动添加，然后继续执行原始的 register 函数。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;2.png&#34; alt=&#34;Registry源码&#34;&gt;&lt;/p&gt;&lt;p&gt;方法总结：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;eclipse 的全局搜索为 Ctrl+H&lt;/li&gt;&lt;li&gt;jvmType 很多都有注释，可以看看源码，不费什么时间&lt;/li&gt;&lt;/ul&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Java" scheme="http://yoursite.com/tags/Java/" />
        <updated>2021-11-18T11:36:26.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2021/09/15/notes/%E9%AB%98%E7%AD%89%E8%AE%A1%E7%AE%97%E6%9C%BA%20tmp/</id>
        <title>高等计算机 tmp</title>
        <link rel="alternate" href="http://yoursite.com/2021/09/15/notes/%E9%AB%98%E7%AD%89%E8%AE%A1%E7%AE%97%E6%9C%BA%20tmp/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&#34;高等计算机-tmp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高等计算机-tmp&#34;&gt;#&lt;/a&gt; 高等计算机 tmp&lt;/h1&gt;&lt;h2 id=&#34;互联与通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#互联与通信&#34;&gt;#&lt;/a&gt; 互联与通信&lt;/h2&gt;&lt;p&gt;互连网络：多个处理机和多个部件的连接&lt;/p&gt;&lt;p&gt;静态网络：点点直接相连，连接方式执行时不改变&lt;/p&gt;&lt;p&gt;等分宽度：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;相等为近似相等&lt;/li&gt;&lt;li&gt;对称性 important&lt;ul&gt;&lt;li&gt;从任何节点看，拓扑结构一样&lt;/li&gt;&lt;li&gt;拓扑结构？&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总线是分池共享&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <updated>2021-09-15T08:44:41.365Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2021/08/27/GameDesigner-2/</id>
        <title>【笔记】游戏策划——完美世界训练营2</title>
        <link rel="alternate" href="http://yoursite.com/2021/08/27/GameDesigner-2/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;h2 id=&#34;创意-头脑风暴-概念文档的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创意-头脑风暴-概念文档的关系&#34;&gt;#&lt;/a&gt; 创意、头脑风暴、概念文档的关系&lt;/h2&gt;&lt;p&gt;创意是凌乱的、头脑风暴是工具，将文档进行整理加工，生成高度概念文档&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;1.png&#34; alt=&#34;三者的关系&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;创意&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创意&#34;&gt;#&lt;/a&gt; 创意&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;如何获得一个创意？&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;需要大量积累，并日常进行观察和总结&lt;/li&gt;&lt;li&gt;一个好的创意和给你带来财富之间还有很大的距离（好的创意只占 5%-10%）&lt;/li&gt;&lt;li&gt;创意一定是越多越好，不要吊死在一棵树上&lt;/li&gt;&lt;li&gt;记录、扩展、深化，并探索更多的创意&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;好的创意来源于何处？&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;其他媒体作品：书籍、电影、电视&lt;/li&gt;&lt;li&gt;传统八大艺术背后的人性、美、反思&lt;ul&gt;&lt;li&gt;游戏被称作第九大艺术&lt;/li&gt;&lt;li&gt;模拟人生的灵感就来自建筑模式语言，这并不是一本游戏书（是一本房屋设计怎么影响人们生活方式的书）&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;其他游戏的灵感&lt;/li&gt;&lt;li&gt;《电子游戏记录着成长指南》&lt;ul&gt;&lt;li&gt;现实的生活 &amp;amp; 想象中的幻想&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;头脑风暴&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#头脑风暴&#34;&gt;#&lt;/a&gt; 头脑风暴&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;定义域作用：&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一种工具&lt;/li&gt;&lt;li&gt;全面探索一个设计问题所有可能的答案，&lt;strong&gt;尽可能多的&lt;/strong&gt;构思出理念&lt;/li&gt;&lt;li&gt;小组成员思考并互相&lt;strong&gt;合作&lt;/strong&gt;，重视所有人的理念&lt;/li&gt;&lt;li&gt;使小组能在什么是重要的事情上&lt;strong&gt;达成一致&lt;/strong&gt;的好方法&lt;/li&gt;&lt;li&gt;项目&lt;strong&gt;初期&lt;/strong&gt;使用&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;基本法则：&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;数量胜过质量：“黄金法则”，竭尽全力构思出尽可能多的理念&lt;/li&gt;&lt;li&gt;不要急于评论：自己的、别人的、团队的&lt;/li&gt;&lt;li&gt;没有但是：要接着每个人的理念往下说&lt;/li&gt;&lt;li&gt;发散思维：不要在乎是不是合理&lt;/li&gt;&lt;li&gt;&lt;strong&gt;可视化&lt;/strong&gt;你的理念：帮助获得更多理念的方法&lt;/li&gt;&lt;li&gt;&lt;strong&gt;组合&lt;/strong&gt;你的理念：帮助获得更多理念的方法&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;头脑风暴的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#头脑风暴的方法&#34;&gt;#&lt;/a&gt; 头脑风暴的方法：&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;理念闪约&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;概念：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;集体构思&lt;/li&gt;&lt;li&gt;在设计的最开始使用&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;流程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;事前准备：每个人都构思出一个游戏理念，分享给整个集体&lt;/li&gt;&lt;li&gt;每个人在纸上用一两句话写下自己的游戏理念&lt;/li&gt;&lt;li&gt;集体相互介绍理念，构思一个由各自理念混合而成的游戏理念&lt;/li&gt;&lt;li&gt;每一对伙伴把新的理念写出来&lt;/li&gt;&lt;li&gt;每人审阅每个新理念并进行投票&lt;/li&gt;&lt;li&gt;&lt;strong&gt;更重要的是产生更好的理念，不是竞技&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;问题驱动&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;概念：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;以疑问句作为头脑风暴的起源（例如 “我们该怎样……”）&lt;/li&gt;&lt;li&gt;或者假设句&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;流程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;10min 内，每人构思尽量多的理念&lt;/li&gt;&lt;li&gt;写小纸条&lt;/li&gt;&lt;li&gt;牢记&lt;strong&gt;数量胜过质量&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;每人向全体介绍理念&lt;/li&gt;&lt;li&gt;表述的过程中可以通过结合或根据旧理念产生新的理念&lt;/li&gt;&lt;li&gt;投票&lt;/li&gt;&lt;li&gt;&lt;strong&gt;更重要的是产生更好的理念，不是竞技&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;高度概念文档&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高度概念文档&#34;&gt;#&lt;/a&gt; 高度概念文档&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;基本组成：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;2.png&#34; alt=&#34;高度概念文档基本组成&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;根据角色：&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;学生：&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;重要的不是赚钱，而是自我表达，和玩家进行交流&lt;/li&gt;&lt;li&gt;定义玩家在游戏中角色是关键&lt;/li&gt;&lt;li&gt;如果玩家角色很难描述，那么玩家很可能也会难以把握这个角色，这就意味着游戏概念出现了问题&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;大型发行商工作：&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;选择合适的游戏类型&lt;/li&gt;&lt;li&gt;不应让标准类型限制你的创造力，也不要无缘无故混合不同类型的特征&lt;/li&gt;&lt;li&gt;定义目标人群&lt;/li&gt;&lt;li&gt;发行商 “谁会买这个游戏”&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;帮你完成高度概念文档的 12 个问题：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;3.png&#34; alt=&#34;12个问题&#34;&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <updated>2021-08-27T07:53:04.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2021/08/17/GameDesigner-1/</id>
        <title>【笔记】游戏策划——完美世界训练营1</title>
        <link rel="alternate" href="http://yoursite.com/2021/08/17/GameDesigner-1/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;h2 id=&#34;分工&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分工&#34;&gt;#&lt;/a&gt; 分工&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;制作人&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;招聘人员&lt;/li&gt;&lt;li&gt;建立团队&lt;/li&gt;&lt;li&gt;协助游戏设计（看制作人的履历）&lt;/li&gt;&lt;li&gt;管理团队日程&lt;/li&gt;&lt;li&gt;解决团队争议&lt;ul&gt;&lt;li&gt;做决定的魄力&lt;/li&gt;&lt;li&gt;承担后果的勇气和能力&lt;/li&gt;&lt;li&gt;让开发不要停&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;策划&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;创意设计（5%）&lt;ul&gt;&lt;li&gt;更重要的是能否让项目落地&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;制作文档&lt;/li&gt;&lt;li&gt;沟通交流&lt;/li&gt;&lt;li&gt;分析用户&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;程序&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;引擎构建&lt;ul&gt;&lt;li&gt;高成本，至少要有引擎组&lt;/li&gt;&lt;li&gt;育碧、卡普空等，一般有自己的引擎&lt;/li&gt;&lt;li&gt;小工作室，时间成本不支持自由引擎，可以选择商用引擎（unity，虚幻），但更新代换取决于商家&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;游戏逻辑&lt;/li&gt;&lt;li&gt;界面逻辑&lt;/li&gt;&lt;li&gt;数据库逻辑&lt;/li&gt;&lt;li&gt;编辑器开发维护&lt;ul&gt;&lt;li&gt;与引擎的交互工具&lt;/li&gt;&lt;li&gt;能否把引擎的效果发挥出来&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;美术&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;概念创作、原画创作&lt;/li&gt;&lt;li&gt;模型制作&lt;ul&gt;&lt;li&gt;场景角色模型等&lt;/li&gt;&lt;li&gt;与贴图密不可分&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;贴图制作&lt;/li&gt;&lt;li&gt;动画制作&lt;/li&gt;&lt;li&gt;特效制作&lt;/li&gt;&lt;li&gt;UI 制作&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;声音 / 音乐：&lt;/strong&gt; 对游戏体验的提升&lt;/p&gt;&lt;ul&gt;&lt;li&gt;音乐制作&lt;/li&gt;&lt;li&gt;音效制作&lt;/li&gt;&lt;li&gt;配音制作&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;测试（QA，质量保证）&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;质量保证&lt;/li&gt;&lt;li&gt;可玩性检验&lt;ul&gt;&lt;li&gt;开发者疲了，需要其他人来发现问题&lt;/li&gt;&lt;li&gt;测试一般在中后期加入&lt;/li&gt;&lt;li&gt;在国内环境不好，但在国外很看重&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;市场运营客服&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;游戏发行&lt;/li&gt;&lt;li&gt;前期宣传&lt;/li&gt;&lt;li&gt;活动运营&lt;/li&gt;&lt;li&gt;客诉需求&lt;br&gt;现在已经进入了服务化游戏的环境，所以市场方面的工种也十分重要&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;游戏制作流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#游戏制作流程&#34;&gt;#&lt;/a&gt; 游戏制作流程&lt;/h2&gt;&lt;p&gt;以 MMORPG 为例：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1 立项阶段&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;始于市场分析&lt;ul&gt;&lt;li&gt;基于游戏体验报告对市场进行分析&lt;/li&gt;&lt;li&gt;综合自己擅长的游戏项目进行开发&lt;/li&gt;&lt;li&gt;要么就是跟风立项&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;始于设计者&lt;ul&gt;&lt;li&gt;设计者提 idea，做 ppt 展示，领导拍板&lt;/li&gt;&lt;li&gt;平时的创意记小本本&lt;/li&gt;&lt;li&gt;只要有想法都可以提，只要公司看到并选用&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;始于资本&lt;ul&gt;&lt;li&gt;有钱找人 / 投资&lt;/li&gt;&lt;li&gt;热钱越来越少，所以这种现象越来越少见&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;2 原型阶段&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在没有美术的情况下，如果别人也觉得好玩，那么这个游戏就算成功的&lt;/li&gt;&lt;li&gt;大公司该阶段一般都拿之前的美术继续用&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;3 Alpha 阶段（大规模开发阶段）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.1 世界观设定&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;真实可信的宏观游戏设定&lt;ul&gt;&lt;li&gt;比如世界的最高法则？&lt;/li&gt;&lt;li&gt;如何看待人类等&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;帮助开发者有整体认识&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;3.2 故事与概念设定&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;故事：更具体，重要人物地点事件&lt;/li&gt;&lt;li&gt;概念设定：在故事基础上进行，不强调细节，整体统一认知&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;3.3 任务流程与场景设计&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;基于主线，如何引导&lt;/li&gt;&lt;li&gt;基于流程，场景设计需求等&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;3.4 角色设计&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;详细的设定，细节上&lt;/li&gt;&lt;li&gt;三视图、衣服设计、武器材质 etc&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;3.5 模型、动画特效&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;3.6 关卡设计与制作&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;3.7 系统设计与制作&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;装备、宠物、游戏升级等&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;3.8 音乐、音效、配音制作&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4 Beta 阶段&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;4.1 测试（QA）&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;从一月一个版本的频率逐渐变成一天一个，，&lt;br&gt;&lt;strong&gt;4.2 调优&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;封测内测、删档测试、不删档测试&lt;/li&gt;&lt;li&gt;测试的同时&lt;/li&gt;&lt;li&gt;根据数据进行进一步修改&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;5 上线运营&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&#34;游戏策划的日常工作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#游戏策划的日常工作&#34;&gt;#&lt;/a&gt; 游戏策划的日常工作&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;画思维导图 —— 帮助思考，记录框架和内容间关系&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;思维导图大框架&lt;br&gt;例：MMO 任务系统&lt;ul&gt;&lt;li&gt;阵营任务&lt;/li&gt;&lt;li&gt;资源任务&lt;/li&gt;&lt;li&gt;活动任务&lt;/li&gt;&lt;li&gt;新手引导&lt;/li&gt;&lt;li&gt;主线任务&lt;/li&gt;&lt;li&gt;支线任务&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;根据框架完善分支&lt;br&gt;！保证文档大纲不出问题&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;做概念图&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;帮助别人清晰的知道你想做的是什么&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;3&#34;&gt;&lt;li&gt;单页说明书&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;给一起工作的小伙伴进行说明游戏核心玩法&lt;/li&gt;&lt;li&gt;核心玩法、角色&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;4&#34;&gt;&lt;li&gt;用户画像&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;面对什么样的用户、有什么特点&lt;/li&gt;&lt;li&gt;点子适合什么用户&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;5&#34;&gt;&lt;li&gt;做桌面演示&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;任何游戏都可做桌面演示&lt;/li&gt;&lt;li&gt;好处：&lt;/li&gt;&lt;li&gt;可以在没有技术美术参与的情况下验证游戏玩法&lt;/li&gt;&lt;li&gt;发现问题及时修改&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;6&#34;&gt;&lt;li&gt;做十页说明书&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;向投资者 or 上级&lt;/li&gt;&lt;li&gt;要把游戏进展，未来发展等都写的比较清楚&lt;/li&gt;&lt;li&gt;用于说服投资 and 立项&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;7&#34;&gt;&lt;li&gt;写策划文档&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;格式、内容&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;8&#34;&gt;&lt;li&gt;剧情脚本（多图）&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;例如：世界观、设定、脚本&lt;/li&gt;&lt;li&gt;剧情脚本很 AVG&lt;br&gt;&lt;img data-src=&#34;1.png&#34; alt=&#34;剧情脚本示例1——世界观&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;2.png&#34; alt=&#34;剧情脚本示例2——设定&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;3.png&#34; alt=&#34;剧情脚本示例3——脚本&#34;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;9&#34;&gt;&lt;li&gt;数据表&lt;/li&gt;&lt;li&gt;交互原型&lt;/li&gt;&lt;li&gt;逻辑流程&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;点按钮，转哪张图&lt;/li&gt;&lt;li&gt;如何转到下一页面&lt;/li&gt;&lt;li&gt;帮助程序了解逻辑&lt;/li&gt;&lt;li&gt;帮助美术了解需要什么页面&lt;br&gt;&lt;img data-src=&#34;4.png&#34; alt=&#34;剧情脚本示例4&#34;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;12&#34;&gt;&lt;li&gt;行为预测&lt;br&gt;巴特尔玩家分类法：只是最适合 MMORPG（但是经常被用烂）&lt;br&gt;除此之外，其他分类如人口统计学上的玩家分类&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;预测偏好程度&lt;/li&gt;&lt;li&gt;预测情感出发&lt;/li&gt;&lt;li&gt;预测影响程度&lt;/li&gt;&lt;li&gt;预测使用情景&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;13&#34;&gt;&lt;li&gt;进度管理&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;主策 -》小策划 -》小组的程序美术&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;14&#34;&gt;&lt;li&gt;整理需求单&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;有什么、什么时候做完&lt;/li&gt;&lt;li&gt;什么做了什么没做&lt;/li&gt;&lt;li&gt;大表，整理进度&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;15&#34;&gt;&lt;li&gt;沟通协调&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;演讲、沟通&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;16&#34;&gt;&lt;li&gt;测试&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;配合 QA 修改 bug&lt;/li&gt;&lt;li&gt;跑版本、修改影响玩家体验的地方&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;细分与能力需求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#细分与能力需求&#34;&gt;#&lt;/a&gt; 细分与能力需求&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;系统策划&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;解决玩什么、为什么、怎么玩&lt;/li&gt;&lt;li&gt;识别用户&lt;/li&gt;&lt;li&gt;整理需求&lt;/li&gt;&lt;li&gt;寻找方案&lt;/li&gt;&lt;li&gt;能力：&lt;/li&gt;&lt;li&gt;分析 沟通 is important&lt;/li&gt;&lt;li&gt;感知&lt;/li&gt;&lt;li&gt;创意 交互&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;数值策划&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;让奖励令人期待&lt;/li&gt;&lt;li&gt;创造属性&lt;/li&gt;&lt;li&gt;设计公式&lt;/li&gt;&lt;li&gt;调节常量&lt;/li&gt;&lt;li&gt;能力：&lt;/li&gt;&lt;li&gt;数学水平&lt;/li&gt;&lt;li&gt;耐性、仔细、专注&lt;/li&gt;&lt;li&gt;Excel、VBA&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;文案策划&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;建立代入的起始点&lt;/li&gt;&lt;li&gt;玩家进入游戏后看到的是什么&lt;/li&gt;&lt;li&gt;玩家以身份行动、遇见什么事情&lt;/li&gt;&lt;li&gt;虚拟世界包含什么以满足玩家需求&lt;/li&gt;&lt;li&gt;能力&lt;br&gt;- 人物塑造、文笔&lt;/li&gt;&lt;li&gt;编故事&lt;/li&gt;&lt;li&gt;场景描写、物件描写&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;关卡策划&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;构筑游戏世界&lt;/li&gt;&lt;li&gt;帮助美术整理素材：不管是场景还是角色&lt;/li&gt;&lt;li&gt;制作场景：使用编辑器生成地形、放置地表元素、放置触发器、调用任务或对话。以及种植怪物出生点、设置怪物巡逻路线、路点等 etc&lt;/li&gt;&lt;li&gt;调节平衡：（单机更）针对系统策划的需求，让场景中的对抗元素趋于平衡&lt;/li&gt;&lt;li&gt;能力&lt;/li&gt;&lt;li&gt;地图编辑器&lt;/li&gt;&lt;li&gt;耐心、细心、专注&lt;/li&gt;&lt;li&gt;协调沟通&lt;/li&gt;&lt;li&gt;平衡处理&lt;/li&gt;&lt;li&gt;美观处理&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;执行策划&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一开始，从执行策划做起&lt;/li&gt;&lt;li&gt;熟悉流程&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;成为游戏策划&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#成为游戏策划&#34;&gt;#&lt;/a&gt; 成为游戏策划&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;想要改善某个游戏&lt;/li&gt;&lt;li&gt;把想法细化为方案&lt;/li&gt;&lt;li&gt;设计&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;如何行动？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;需要海量的知识，要保持好奇心&lt;/p&gt;&lt;ul&gt;&lt;li&gt;多练习：写策划案，就像将来能做出来一样认真写&lt;/li&gt;&lt;li&gt;收集素材：美术素材 / 案例分析 / 多翻商店 / 自己截图&lt;/li&gt;&lt;li&gt;收集灵感：游戏 / 电影 / 小说 / 生活&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;尝试入行&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;简历&lt;/li&gt;&lt;li&gt;介绍册 / 作品集：策划竟然也要作品集！&lt;/li&gt;&lt;li&gt;卫生么想做游戏&lt;/li&gt;&lt;li&gt;最喜欢的游戏&lt;/li&gt;&lt;li&gt;熟悉厂商的游戏&lt;/li&gt;&lt;li&gt;最喜欢的制作人，为什么&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;推荐：《关于游戏的信仰：Jonathan Blow 的创作哲学》&lt;br&gt;&lt;img data-src=&#34;5.png&#34; alt=&#34;送大家一句话.jpg&#34;&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <updated>2021-08-17T02:19:02.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2021/08/04/HiddenForces/</id>
        <title>【生活】怪诞行为学阅读随记</title>
        <link rel="alternate" href="http://yoursite.com/2021/08/04/HiddenForces/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;blockquote&gt;&lt;p&gt;读了本很喜欢的书，怪诞行为学，之前在世界读书日被安利的，一年了总算想起来读了，很有意思，有种相见恨晚的感觉。回想了下十三章的内容，算是做个阅读笔记吧！&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&#34;关于相对论的思考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于相对论的思考&#34;&gt;#&lt;/a&gt; 关于相对论的思考&lt;/h3&gt;&lt;p&gt;a a- b 倾向于选 a，因为它给了更简单的解决办法&lt;/p&gt;&lt;p&gt;有 a-，就能更衬托 a，在人际交往，经济等层面均可试用&lt;/p&gt;&lt;p&gt;攀比 人心不足蛇吞象&lt;/p&gt;&lt;p&gt;激起购买欲，让一件东西难获得就好了&lt;/p&gt;&lt;p&gt;脱离诱饵：调整圈子 意识并控制自己的攀比行为&lt;/p&gt;&lt;h3 id=&#34;第一印象很重要&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一印象很重要&#34;&gt;#&lt;/a&gt; 第一印象很重要&lt;/h3&gt;&lt;p&gt;幼鹅效应 第一次的印象很重要 而且长时间潜移默化影响我们的选择（锚）&lt;/p&gt;&lt;p&gt;羊群效应 比如餐厅排队的人多，那么他应该很好吃，然后也会想排队去吃；同时书中指出了自己会排在自己后面的情况，其实就是不断的重复自己上次做出的选择，这也是为什么一旦设定了锚，之后就很难被修改，因为我们会和第一次做出的选择做比较。&lt;/p&gt;&lt;p&gt;修改锚是有过程的，而且很难被修改，所以我们的选择未必是真正想要的，很可能是受了锚的影响，这需要我们 “不断审视自己过去的选择是否是心中所要”，“如果抛去过去重新进行选择”，是否还是相同的选择。（更多时候锚的作用体现在变化上，因为会对变化进行比较，从而影响了我们的判断）&lt;/p&gt;&lt;p&gt;同时，锚的存在也验证了我们的选择未必正确，其实是会受多方因素影响，宣传海报，营销 etc，所以在经济层面，政府需要有比理论更大力度的管控才行。&lt;/p&gt;&lt;h3 id=&#34;免费的效应&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#免费的效应&#34;&gt;#&lt;/a&gt; 免费的效应&lt;/h3&gt;&lt;p&gt;免费给人的影响很大，比如并不喜欢的免费巧克力 vs 费列罗，更多人往往会选择免费巧克力，其本质是因为免费不需要成本，这种手段常用在营销宣传上，所以需要时刻注意自己是不是真的想要，而不是被一些附赠的免费冲昏头脑，导致选择了错误的选项&lt;/p&gt;&lt;h3 id=&#34;社会规范和市场规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#社会规范和市场规范&#34;&gt;#&lt;/a&gt; 社会规范和市场规范&lt;/h3&gt;&lt;p&gt;生活中存在两种行为规范，社会规范主要为人与人之间通过社会关系进行维系（节日送礼，帮忙），市场规范即经济相关&lt;/p&gt;&lt;p&gt;几种现象：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;礼物只有在不知道价钱的时候，才是社会规范，知道了价钱，就是市场规范了；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;社会规范有种 “自愿” 的情感在里面，所以往往比市场规范的生产力更高，因为更自觉&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;市场规范一旦出现，则很难再形成社会规范&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;公司未提高生产力，往往会想用社会规范，和员工建立一种朋友的关系，比如自助饮食更好的办公环境自主安排上班时间等，但若中间出错（比如克扣工资）立马会变回市场规范，而且员工还会觉得自己遭到了背叛（感觉最近运营的情况很像）&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;性兴奋&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#性兴奋&#34;&gt;#&lt;/a&gt; 性兴奋&lt;/h3&gt;&lt;p&gt;主要论点是，我们冷静时的判断与其他状态（焦虑，兴奋，忧虑 etc）时的判断并不相同，就像是绿巨人一样，有两个我。&lt;/p&gt;&lt;p&gt;同时，我们往往无法准确的预测自己在其他状态会做出什么决定，这也是为啥有拖延症&lt;/p&gt;&lt;h3 id=&#34;治疗拖延&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#治疗拖延&#34;&gt;#&lt;/a&gt; 治疗拖延&lt;/h3&gt;&lt;p&gt;实验证明，如果自己不够自律，只能通过一些外界要素，如由他人强行规定 ddl，拽着同学一起做 etc。&lt;/p&gt;&lt;h3 id=&#34;所有权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#所有权&#34;&gt;#&lt;/a&gt; 所有权&lt;/h3&gt;&lt;p&gt;为什么我们依恋拥有的东西？人的三种特征：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;会依恋已经拥有的东西&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;视角更会放在会失去什么上（也是为啥卖家估价永远比买家高）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;永远觉得对方会和自己站在同一个角度&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;同时，虚拟依赖症，人对一个事物付出的越多，越容易觉得这是属于自己的（所有物），所以要佛系看，尽量不要有所有权的错觉，一减少错误决策的可能&lt;/p&gt;&lt;h3 id=&#34;多种选择&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多种选择&#34;&gt;#&lt;/a&gt; 多种选择&lt;/h3&gt;&lt;p&gt;人在面对多种选择时，往往那个都不想拉下（我全都要），参照上面 “人们往往会更在乎失去什么上” 会更好理解为什么，即使在知道如此选择后收益会低，所以有时当断则断，并且考虑进犹豫不决带来的后果！&lt;/p&gt;&lt;p&gt;同时，也要注意有很多在我们不知道间逐渐消失的门（最简单的，和家人在一起的时间）&lt;/p&gt;&lt;h3 id=&#34;预期对认知的影响&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预期对认知的影响&#34;&gt;#&lt;/a&gt; 预期对认知的影响&lt;/h3&gt;&lt;p&gt;简单粗暴的总结：影响很大，预知对一个人的感官有一定影响，这也是为什么面对一件事，往往有不同的观点（如不同方球迷对球赛出界的判断），这种时候往往听听第三方的意见会更好（旁观者清），往往能带来不同的效果。&lt;/p&gt;&lt;h3 id=&#34;预期对事物解析的影响&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预期对事物解析的影响&#34;&gt;#&lt;/a&gt; 预期对事物解析的影响&lt;/h3&gt;&lt;p&gt;典型例子：安慰剂，早年一些外科手术其实是没有外科测试的（这种测试也容易产生伦理上的问题），所以无法测试，但后来被证明其手术本身并没有作用，但由于人的预期是会好，所以传达给大脑的信号觉得手术后舒服多了。&lt;/p&gt;&lt;p&gt;实验表明，同种药物，价格高带来的感受比价钱便宜的要高，觉得效果更好（其实没有区别）。&lt;/p&gt;&lt;p&gt;这也能解释 “暗示” 的作用，比如书中的实验通过给一些特殊的词条，成功影响了当事人的大脑处理速度。（或许每天多接触接触积极向上的东西，有具体心情愉快？）&lt;/p&gt;&lt;h3 id=&#34;诚实&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#诚实&#34;&gt;#&lt;/a&gt; 诚实&lt;/h3&gt;&lt;p&gt;只要有机会，人是会作弊的，不管这个机会是大是小，只是像面对 “偷窃” 的行为，会触发我们的道德红线，但是像 “顺走公司的一根笔”，“修改上报报销单” 等事情，显然没有触发红线。&lt;/p&gt;&lt;p&gt;回忆道德相关知识有助于我们激发我们的道德准线（如默背圣戒），但这只在短时间内有效（所以或许什么早上集合朗诵公司条规其实也异曲同工？）&lt;/p&gt;&lt;h3 id=&#34;离现金一步之遥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#离现金一步之遥&#34;&gt;#&lt;/a&gt; 离现金一步之遥&lt;/h3&gt;&lt;p&gt;总结：面对离现金一步之遥的事情，人们更容易作弊，如：“顺走公司的一支笔” 和 “顺走公司 3r（笔的价格）”，显然后者会激发我们的道德红线，但前者没有。书里是：毛公众冰箱里的可乐 vs 毛冰箱里的零用钱&lt;/p&gt;&lt;p&gt;现在数字化货币如此流行，很危险，因为该论点说明数字资产无法激发红线，将来会有更多的流氓行为发生（举个例子，游戏代币）&lt;/p&gt;&lt;h3 id=&#34;行为经济学vs传统经济学&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行为经济学vs传统经济学&#34;&gt;#&lt;/a&gt; 行为经济学 vs 传统经济学&lt;/h3&gt;&lt;p&gt;行为经济学证明了人并不是像传统经济学所说的完全理性，我们的理性并不完美，而是受大脑思维影响的，这样看来传统经济学的某些策略似乎并不足够贴合实际（许多经济学理论是以人的决策是理性的为基础）&lt;/p&gt;&lt;p&gt;行为经济学的作用体现在两点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;对传统经济学进行补充修改&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用决策，工具避免错误决策&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;总体评价&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总体评价&#34;&gt;#&lt;/a&gt; 总体评价&lt;/h3&gt;&lt;p&gt;之前有想看《影响力》那本书，但不知道为啥之后就没看下去了，《怪诞行为学》自我感觉比《影响力》更适合理科生一些，主要体现在它每章的结构上，脉络清晰有理有据：事件，提出观点，实验，结果分析，套用其他场景，解决措施。如此下来，相对会更好理解一些！看每章的小实验也很有意思，他们真的很有想法。&lt;/p&gt;&lt;p&gt;看这本书的好处，就像最后一章所写的，我们知道了大脑在受何种条件作用会做出非理性的行为，那我们要做的就是去了解它（what &amp;amp; why），随后思考能否建立工具、决策来辅助我们避免错误的行为产生（或许会有新的思路）&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <updated>2021-08-04T11:08:23.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2021/05/04/mood-20210504/</id>
        <title>【生活】法定节假日的电话</title>
        <link rel="alternate" href="http://yoursite.com/2021/05/04/mood-20210504/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;TODO ： 反思一下，记录下心情&lt;/p&gt;&lt;p&gt;大四下，正值五一假期，老师中午一句 “假期过的怎么样呀” 终结了我的美好国家法定节假日，虽然汇报了工作，也说明了现在不在工作环境，但显然老师没有要放过我的意思。&lt;br&gt;语音里：虽然我也正值毕业，刚结束完中期答辩不久，而且并没有拿到一个满意的结果，但老师确实没有精力关心这个，寒暄几句罢了，毕竟这只是压榨前走的形式而已。&lt;/p&gt;&lt;p&gt;果然，老师开始问我的工作，当然这个工作并不是毕业的工作，而是实验室的需求，老师要试点刚和一家企业谈完合作，发现后面应用没跟上，就让我去搞，并找补一句 “虽然我曾经许诺过让你们专心毕业不安排其他任务，但现在是现在，你多担待。” 不过，“不要看说了什么，而且看做了什么” 好像也是他说的，记不太清了。一接触我发现是个烂摊子，为啥是烂摊子？不是师兄师姐不行，是真的是个硬骨头，难啃。然而老师现在话说出去了不得不做，于是叫我一个大四的来收拾残局。&lt;/p&gt;&lt;p&gt;我其实做过类似的项目，但是是比较简单的，相比这个任务就是小巫见大巫，而且走那条路线没人指导我，我一个大四的，一条路走到黑，而且这个项目使用的工具基本上没人知道没人用，完全没法写进简历里，工程还大还麻烦。但也没啥好推的，肯定推不掉，老师也不会给我拒绝的权利。在实验室，就算是知道难啃，也要先啃了再和老师说，毕竟老师觉得行，博导向来理论研究搞得多，实践和理论间还是有差距的，更何况理论也只是一个模糊的架子，简单说就是说的容易做的难。但老师觉得行，我们底下的说破天了都没用，只能做，反驳还会被安上不积极不干活的骂名，以后每次犯错都会拿来说，从思想批判你。然且，做了都未必满意，更何况没做。这件事发生在放假前两周。&lt;/p&gt;&lt;p&gt;幸好，原来我以为要从零开始造车，但我和师兄师姐交流之后，上两届师兄们有在做类似的工作，虽然技术路线不一样，但达到的结果是差不多的，用的是 java，主流的编程语言，而且已经有一部分成果了，只是老师一直 “没精力” 关心开发，所以不了解。于是我在组会上和老师谈，虽然老师一开始依然坚持让我走之前的路线，但我觉得这里不能让步，毕竟既对我没有帮助，也会分散人力降低效率。当时老师本来想说服老师废了好大力气吖，我这期间也去看之前的旧项目的代码，确认是不是真的不可用，去考虑旧代码和现平台的兼容性，讲清楚老师和师兄的技术路线有什么区别，看懂师兄的项目理解是否可行，准备工作做了很多。虽然我的表达能力一直不尽人意，老师也只是似懂非懂，但有研二帮我一起解释项目，也给了老师一点时间，最后总算松口让我加入进去了。松口发生在放假的前一周周日，然后就是我的中期答辩，然后就是放假了 —— 劳动节，国家法定节假日。&lt;/p&gt;&lt;p&gt;只是之后的事情我是没想到的。&lt;/p&gt;&lt;p&gt;我觉得他问我近况，估计就是要问些事情，所以我提前去咨询了研一师兄目前的进度，毕竟是我加入他的项目辅助他工作，师兄对项目肯定比我更清楚，而且在我告诉他有我能做的可以让我来做的时候，他说他也在思考，所以我也一直是待机的状态。咨询完师兄目前的进展之后，我和老师开始通话，老师也果然问了转化的近况，我也如实的进行了汇报，但毕竟我不能抢了师兄的功劳，所以我说，这是绝大部分是师兄的工作，我只是把原来项目里能用的东西整理出来发给他。&lt;/p&gt;&lt;p&gt;“你们这不行啊” 老师的经典台词之一，然后他就开始发脾气了，但发脾气的原因竟然是 “你不要管 xxx（我师兄），你自己做！” 然后就开始说 “我给了你三周了一直没出东西”“你在推卸责任”“你是不是也要学研一那一套”&lt;/p&gt;&lt;p&gt;抨击我研一师兄们已经是常有的事情，老师一直觉得考研的不如保研的，但反正这话只有我听着，我也不会和师兄说，但我差异的是：他把我的时长算成三周，明明我加入项目能开始 coding 也就是 4～5 天前的事情，中间还有中期答辩；而且，我明明是加入到别人的项目里，且对方为长我为幼，他却对我的态度表示不满。&lt;/p&gt;&lt;p&gt;我想解释，我说这是我加入研二给研一的项目里，我没他们理解… 随后，老师便叫来在实验室写论文的研二师兄，不为啥，因为我说了，所以叫师兄进来。于是我选择沉默，等老师发完脾气，发完火，再和他说具体干啥。因为我知道，我解释什么，他都会觉得我在 “找理由”，而且我若和他争论，有论文压力的师兄，也要在老师旁边听着，啥也做不了，这很浪费他的时间。&lt;/p&gt;&lt;p&gt;“你的大论文怎么样了” 这问到了我的痛点，我大论文一直不知如何下笔，只把一些概念性的句子记录了下来。不过这也在我的意料之中，老师正在气头上，是肯定会挑我的错的，而论文又是他最拿手的东西，我们多么精心思考的文字在他眼里都不够格。所以，我干脆说 “没写完呢”，果然 “这不行啊”“我对你很失望” 之后又是一番，我也没仔细听，当时已经在车里，就随便看看风景。&lt;/p&gt;&lt;p&gt;最后，按老师的标准，我的大论文不能落下，小论文也要跟上他的步伐，晚上就整理出来图表（这个之后要说），这两周辅助他出小论文，开发他不暂时着急，但也要按时完成。我知道这完成不了，毕竟他嘴上说着小论文优先，最后还是会天天催我开发进度的，但我还是应下了，不然呢，又要拿 “态度”“责任” 等词汇来压我，而且肯定不会松口。既然肯定完成不了，那就乖乖 “嗯” 吧，一是消他的火气，吵不起来，他自然就没趣了，二是既然将来肯定会被骂，我又为何现在就来找一次骂呢。&lt;/p&gt;&lt;p&gt;事情讲述完了，中间也交杂了一些小情绪，现在我要回头来反思这件事。&lt;/p&gt;&lt;p&gt;首先，大结论先定一下：&lt;/p&gt;&lt;p&gt;我不觉得自己的表现差，事实上，我做的很好，基本上是最优了。&lt;/p&gt;&lt;p&gt;老师为了压榨，加快我们的开发进度，肯定是要骂的，既然我事后能理性的阐述这件事，说明我防住了。&lt;/p&gt;&lt;p&gt;熬夜？加班？只要提高了进度他就会觉得骂骂有效果，还能继续压，才不管我怎么赶出来的。再说了，我现在大四，有毕业压力，他不负责顺我的大论文，我还抽出来帮他做实验室的东西，为什么还要进一步透支自己。全做他的我毕业咋办。&lt;/p&gt;&lt;p&gt;不怕被骂吗？怕，但每个人都有一个极限在那里，现在他摸不清我们几斤几两，只能这么骂，看能榨到什么程度罢了。不是说我不想干活，事实上我是一个喜欢充实的人，只是时机未到，而且自己确实不够成熟，接不下这个大担子。&lt;/p&gt;&lt;p&gt;随后，我在意的是老师说我在 “推责任” 一事。&lt;/p&gt;&lt;p&gt;我觉得我确实做到了师门的本分，摆清了自己的位置，不妄自菲薄，也对师兄做了最大的辅助工作，但显然老师对我的期望更高，我也不知道是该荣幸还是烦恼。话说，和老师谈的时候，老师说的也是 “加入” 师兄的项目，最后又变成我主导，不要管师兄，实在是莫名其妙。&lt;/p&gt;&lt;p&gt;可能也是想推进度，角度没错，只是说我 “推责任”，未免寒心了些。&lt;/p&gt;&lt;p&gt;当然，我也没错。只是老师既然说开了，我也只能去多商量了。&lt;/p&gt;&lt;p&gt;最后，就是晚上出图表那里。&lt;/p&gt;&lt;p&gt;老师的前言是，以后让我做事情会给 ddl 不让我拖，且晚上就干活的时候，竟然有一丝送气。&lt;br&gt;感觉我是喜欢工作的，但我觉得不好。&lt;/p&gt;&lt;p&gt;因为我觉得我喜欢工作的原因是因为懒得想生活中经历的太多东西。事实上我正烦躁大论文怎么继续动笔，家里打官司等等。而老师布置任务，只要专注于完成老师的任务就好。&lt;/p&gt;&lt;p&gt;这本质上也是一种麻痹，因为我在回避我需要正视的问题，认识到这点的时候我感觉挺恐怖的。&lt;/p&gt;&lt;p&gt;最近看见研二师兄的做事方法，我觉得挺值得借鉴的。&lt;/p&gt;&lt;p&gt;师兄自己是一个代码很厉害的人，但他也不忘了扩充自己，哪怕老师安排给他任务，他也会将任务往能扩展自己的方向争取；&lt;/p&gt;&lt;p&gt;定期就会花点时间找找主流的工具，框架等去学习，既把握了行业大动向，部分可以借鉴的也会大胆的加入到项目或者管理上去辅助工作；&lt;/p&gt;&lt;p&gt;代码上不会一知半解，会一字一句探究他们的意义，“为什么会这么写”“这有什么好处”，&lt;br&gt;最后在讲给我们，做一个正向输出。&lt;/p&gt;&lt;p&gt;把工作和扩展自己结合在一起，应该是我正欠缺的吧，不过现在大多时候都由不得我，我要先学会 “不一知半解” 才行，这样才能争取到老师的信任，我也有机会搞自己想搞得。&lt;/p&gt;&lt;p&gt;不过，就算争取不到工作和扩展结合，也一定要留出丰富自己的时间，不要觉得完成工作就只有输出，要学会在工作中 “输入，再输出”。&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="生活记录" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/" />
        <updated>2021-05-04T13:36:34.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2021/01/25/crack-password/</id>
        <title>破解密码——高盛虚拟实习复盘</title>
        <link rel="alternate" href="http://yoursite.com/2021/01/25/crack-password/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;学习了四年的信息安全，但学校对实践还是稍微薄弱了写，前阵日子看见了高盛的虚拟实习，任务刚好是要求我们破解一写简单的加密密码，趁着两天比较闲，试着学习了一下工具，收获还是很多的，最后整理成了报告并拿到了实习证明。不过报告篇幅被限制成一页，需要回答的事情也被固定了，有的事情没有来得及整理，尤其因为第一次搞破解密码的实战，所以还是有点没有条理，但破解本身真的很有意思，总结破解思路也算是给自己做一个复盘叭！&lt;/p&gt;&lt;p&gt;不过答案不会剧透，实习证明会贬值的（&lt;/p&gt;&lt;h2 id=&#34;工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工具&#34;&gt;#&lt;/a&gt; 工具&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Hashcat：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oYXNoY2F0Lm5ldC9oYXNoY2F0Lw==&#34;&gt;https://hashcat.net/hashcat/&lt;/span&gt;&lt;/li&gt;&lt;li&gt;字典参考： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RhbmllbG1pZXNzbGVyL1NlY0xpc3RzL2Jsb2IvbWFzdGVyL1Bhc3N3b3Jkcy9Db21tb24tQ3JlZGVudGlhbHMvMTAtbWlsbGlvbi1wYXNzd29yZC1saXN0LXRvcC0xMDAwMDAudHh0&#34;&gt;https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10-million-password-list-top-100000.txt&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;操作系统：Windows10&lt;/p&gt;&lt;p&gt;Hashcat 使用 GPU 加速，并提供了多种破解方法。下载 binaries 即可，解压到文件夹就能用，需要提前确认&lt;strong&gt; GPU Driver requirements&lt;/strong&gt; 是否符合要求，如截止本博客（20210125），Hashcat 对 NVIDIA GPUs 的要求至少为 440.64 版本，打开 NVIDIA 控制面板进行查看：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;1.png&#34; alt=&#34;GPU要求&#34;&gt;&lt;/p&gt;&lt;p&gt;接着说怎么用 Hashcat 这个工具，打开 Hashcat 的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oYXNoY2F0Lm5ldC93aWtpLw==&#34;&gt; Wiki&lt;/span&gt;，对应&lt;strong&gt; Core attack modes&lt;/strong&gt; 有四种破解方法，简单来说：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;字典模式：单一字典进行破解，具体字典选择可以看上面推荐的工程，里面有很多字典&lt;/li&gt;&lt;li&gt;组合模式：可以使用两个字典进行排列组合，会根据字典 A + 字典 B 拼凑出的密码进行遍历&lt;/li&gt;&lt;li&gt;暴力破解和掩码破解：暴力破解不用多说，掩码破解是通过指定密码特征进行破解，有对应的字符集（charsets）&lt;/li&gt;&lt;li&gt;混合破解：使用字典 + 掩码的方式进行攻击&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;然后两个其他方式，在此次实习中没有使用过，之后有机会再补充完善：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;2.png&#34; alt=&#34;Hashcat常用模式&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;破解历程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#破解历程&#34;&gt;#&lt;/a&gt; 破解历程&lt;/h2&gt;&lt;p&gt;需要注意的是，文件为用户名：密码的形式，所以在使用 Hashcat 是需要加入指令 &lt;code&gt;--username&lt;/code&gt; 提醒工具存在用户名，否则 Hashcat 会对密码长度进行报错！&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;字典模式就可以解决很多简单密码的破解，找个合适的常用字典就行&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hashcat.exe -m 0 -a 0 hash.txt example.dict --username  &amp;#x2F;&amp;#x2F; 该命令使用的 Hashcat 自带的字典&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-src=&#34;3.png&#34; alt=&#34;截图1&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;4.png&#34; alt=&#34;截图2&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;5.png&#34; alt=&#34;截图3&#34;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;用 combination：hashcat.exe -m 0 -a 1 hash.txt 10-million-password-list-top-1000000.txt 10-million-password-list-top-1000000.txt --username 没跑出来，学习暴力破解&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-src=&#34;6.png&#34; alt=&#34;截图4&#34;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;受上个破解结果启发，根据人物信息写了字典，跑出来了一个&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-src=&#34;7.png&#34; alt=&#34;截图5&#34;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;该密码结构为姓名 + 数字，受其启发，会不会是姓名 + 数字，但是数字字典没有，故 hybrid 模式，字典 + 掩码，跑出来一个&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hashcat.exe -m 0 -a 6 hash.txt tempUsername.txt ?d?d --username&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-src=&#34;8.png&#34; alt=&#34;截图6&#34;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;中途修改了一下字典，加入了开头大写 or l 变 1，o 变 0 的情况&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-src=&#34;9.png&#34; alt=&#34;截图7&#34;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;剩下 oranoilo 和 nabox，5 位？a 没跑出来，8 位时间太长，直接死机了，放弃（推测是可能与特殊符号相关）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;对结果显示方式的设定可见官方提供的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oYXNoY2F0Lm5ldC93aWtpL2Rva3UucGhwP2lkPWZyZXF1ZW50bHlfYXNrZWRfcXVlc3Rpb25zI2hvd19jYW5faV9zaG93X3ByZXZpb3VzbHlfY3JhY2tlZF9wYXNzd29yZHNfYW5kX291dHB1dF90aGVtX2luX2Ffc3BlY2lmaWNfZm9ybWF0X2VnX2VtYWlscGFzc3dvcmQ=&#34;&gt;常见问题&lt;/span&gt;，不得不说他们的官方真的很贴心，只要耐心阅读你可以知道一切，论坛也很完善很容易找到类似的问题😘&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;10.png&#34; alt=&#34;截图8&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;思路总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思路总结&#34;&gt;#&lt;/a&gt; 思路总结&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;一个好的字典可以帮助解决很多事情，先尝试利用字典模式（-a 0）将简单密码进行破解&lt;/li&gt;&lt;li&gt;在字典爆破不出新密码后，要考虑密码中是否有个人信息，这种情况字典中肯定是没有的，需要自行将信息剥离出自制字典，需涉及到的情况：&lt;ul&gt;&lt;li&gt;正常个人信息&lt;/li&gt;&lt;li&gt;首字母大写 or 全部大写&lt;/li&gt;&lt;li&gt;0 &amp;lt;-&amp;gt; o ，1 &amp;lt;-&amp;gt; l 等&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;自制字典先用 - a 0 跑一次，然后在考虑加入其他字典或掩码&lt;/li&gt;&lt;li&gt;暴力破解可以，但对电脑负荷很大建议使用掩码进行（?A 是个好东西）&lt;/li&gt;&lt;/ol&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="security" scheme="http://yoursite.com/tags/security/" />
        <updated>2021-01-25T11:36:26.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2020/09/05/ca/</id>
        <title>基于OPENSSL的自建CA证书并配置网站的SSH证书认证</title>
        <link rel="alternate" href="http://yoursite.com/2020/09/05/ca/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;记录一下网安的初级实验流程，自己摸配置文件好痛苦… 而且网上的教程都不是很连贯，或者用的脚本什么的&lt;s&gt;不太好写报告&lt;/s&gt;，火狐浏览器也更新换代了配置上也需要进行调整... 总之不记录一下实在是太亏了 hhhhhh 实验的流程很完整，根 CA—— 中间 CA—— 服务器 / 客户证书 ——nginx 配置双向认证，按照右下角章节可进行查看。&lt;/p&gt;&lt;h2 id=&#34;1-基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-基本概念&#34;&gt;#&lt;/a&gt; 1. 基本概念&lt;/h2&gt;&lt;p&gt;数字认证是指为保证网上数字信息的传输安全而建立的一种信任及信任验证机制。它利用证书技术实现各类实体在网上信息交流及政务、商务活动中的身份证明。通常将提供数字认证服务的机构或实体称为数字认证中心。&lt;/p&gt;&lt;p&gt;OpenSSL 颁发数字证书的流程和方法，其大体分为四个步骤。&lt;/p&gt;&lt;p&gt;一、 建立一个数字证书认证中心，并且构建自己的根 CA&lt;/p&gt;&lt;p&gt;二、 申请者自主生成一个私有密钥&lt;/p&gt;&lt;p&gt;三、 申请者将包含了公共密钥的证书请求文件发给 CA&lt;/p&gt;&lt;p&gt;四、 CA 对发送来的请求文件进行签名，并颁发签名过后的证书。&lt;/p&gt;&lt;p&gt;这次我们将通过 openssl 命令行创建一个证书认证中心。并进行多级证书请求和签发操作。最后利用生成的证书分别配制 nginx Web 服务器和 Firefox 浏览器，实现证书单向认证和证书双向认证。&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;2-实验准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-实验准备&#34;&gt;#&lt;/a&gt; 2. 实验准备&lt;/h2&gt;&lt;p&gt;&lt;code&gt;cat /etc/ssl/openssl.cnf&lt;/code&gt; 可以查看配置文件，&lt;/p&gt;&lt;p&gt;使用 vi 编辑器修改 dir 的存放路径，这里假设将路径修改为 /root/demoCA：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;1.png&#34; alt=&#34;截图1&#34;&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd &amp;#x2F;root&amp;#x2F;demoCA&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  mkdir newcerts certs crl private requests&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  touch index.txt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  echo &amp;#39;01&amp;#39; &amp;gt; serial&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;3-创建根ca&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-创建根ca&#34;&gt;#&lt;/a&gt; 3. 创建根 CA&lt;/h2&gt;&lt;p&gt;此时当前目录为 /root/demoCA&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. 创建根 CA 密钥&lt;/strong&gt;&lt;br&gt;&lt;code&gt;openssl genrsa -aes256 -out private/cakey.key.pem 4096&lt;/code&gt;&lt;/p&gt;&lt;p&gt;密钥名需要和配置中的 private_key 一致；密码可以随便写，但是要记住！！&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;2.png&#34; alt=&#34;截图2&#34;&gt;&lt;/p&gt;&lt;p&gt;为了确保安全，把秘钥的访问权限设置为 400： &lt;code&gt;chmod 400 private/cakey.pem&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. 生成证书请求&lt;/strong&gt;&lt;br&gt;&lt;code&gt;openssl req -new -key /root/demoCA/private/cakey.pem -out rootCA.csr -days 3650&lt;/code&gt; 执行这个命令时，会被要求提供口令保护私钥，可输入自选的口令，并记住这个口令&lt;/p&gt;&lt;p&gt;根证书将保存为 “cacert.pem” 文件名，有效期为 10 年。&lt;/p&gt;&lt;p&gt;两个文件名需要对应 cnf 文件中的 private_key 和 certificate&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;3.png&#34; alt=&#34;截图3&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 自签名&lt;/strong&gt;&lt;br&gt;&lt;code&gt;openssl ca -selfsign -in rootCA.csr&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;4.png&#34; alt=&#34;截图4&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4. 查询结果&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cp &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;newcerts&amp;#x2F;01.pem&amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;cacert.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cat &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;index.txt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#x2F;&amp;#x2F; 输出结果：V	210826021837Z		01	unknown	&amp;#x2F;C&amp;#x3D;CN&amp;#x2F;ST&amp;#x3D;Beijing&amp;#x2F;O&amp;#x3D;USTB edu&amp;#x2F;OU&amp;#x3D;USTB edu CA&amp;#x2F;CN&amp;#x3D;www.test.com&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;命令 &lt;code&gt;openssl x509 -text -noout -in /root/demoCA/cacert.pem&lt;/code&gt; 可以查看该证书的详细信息：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;6.png&#34; alt=&#34;截图6&#34;&gt;&lt;/p&gt;&lt;p&gt;其中，Signature Algorithm 为签名算法；Issurer 是签发方，即签署证书的实体；Validity 指明证书的有效期；然后是公钥信息；Subject 指明证书自身的信息，这里 Issurer 和 Subject 的信息是一样的；&lt;/p&gt;&lt;p&gt;参考链接：&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc3BhcmtkZXYvcC8xMDM2OTMxMy5odG1s&#34;&gt;https://www.cnblogs.com/sparkdev/p/10369313.html&lt;/span&gt; 这位大佬的步骤给的挺全，还写了脚本文件，但是他的文件夹分类我有点不习惯&lt;/p&gt;&lt;h2 id=&#34;4-创建次级ca&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-创建次级ca&#34;&gt;#&lt;/a&gt; 4. 创建次级 CA&lt;/h2&gt;&lt;p&gt;中间 CA 是 root CA 的代理，其证书由 root CA 签发，同时中间 CA 能够代表根 CA 签发用户证书，由此建立起信任链。创建中间 CA 的好处是即使中间 CA 的私钥泄露，造成的影响也是可控的，我们只需要使用 root CA 撤销对应中间 CA 的证书即可。&lt;/p&gt;&lt;p&gt;为了体现信任链的传递逻辑，在 /root/demoCA/ 下创建对应目录即可，这里假设中间 CA 的证书目录是 /root/demoCA/intermediate/&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. 初始化次级 CA 相关目录&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mkdir &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;intermediate&amp;#x2F;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;intermediate&amp;#x2F;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mkdir certs crl newcerts private&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;touch index.txt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;echo 1000 &amp;gt; serial&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;2. 创建中间 CA 的私钥&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openssl genrsa -aes256 -out intermediate&amp;#x2F;private&amp;#x2F;intermediate.key.pem 4096&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;chmod 400 intermediate&amp;#x2F;private&amp;#x2F;intermediate.key.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;7.png&#34; alt=&#34;截图7&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 创建并编辑 intermediate_CA.cnf&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cp &amp;#x2F;root&amp;#x2F;intermediate_CA.cnf &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;intermediate&amp;#x2F;intermediate_CA.cnf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;intermediate&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vi intermediate_CA.cnf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;下面是需要更改的具体配置信息：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;[CA_default ]&lt;br&gt;dir = /root/demoCA/intermediate&lt;br&gt;certs = $dir/certs&lt;br&gt;private = $dir/private&lt;br&gt;certificate = $dir/certs/intermediate.cert.pem&lt;br&gt;private_key = $dir/private/intermediate.key.pem&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-src=&#34;8.png&#34; alt=&#34;截图8&#34;&gt;&lt;/p&gt;&lt;p&gt;同时还需要更改其他配置，为之后给服务器证书签名做准备：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;[server_cert]&lt;br&gt;#Extensions for server certificates ( &lt;code&gt;man x509v3_config&lt;/code&gt; ).&lt;br&gt;basicConstraints = CA:TRUE&lt;br&gt;nsCertType = server&lt;br&gt;nsComment = &amp;quot;OpenSSL Generated Server Certificate&amp;quot;&lt;br&gt;subjectKeyIdentifier = hash&lt;br&gt;authorityKeyIdentifier = keyid,issuer:always&lt;br&gt;keyUsage = critical, CRL Sign, digitalSignature, keyEncipherment&lt;br&gt;extendedKeyUsage = serverAuth&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdXBwb3J0Lm1vemlsbGEub3JnL3poLUNOL3F1ZXN0aW9ucy8xMDI0OTc3&#34;&gt;https://support.mozilla.org/zh-CN/questions/1024977&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4. 生成 CSR 文件&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;intermediate&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openssl req -config intermediate_CA.cnf -sha256 -new -key private&amp;#x2F;intermediate.key.pem -out certs&amp;#x2F;intermediate.csr.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;9.png&#34; alt=&#34;截图9&#34;&gt;&lt;/p&gt;&lt;p&gt;注意”Organization Name” 一项一定要与根 CA 时设置的相同&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5. 用根 CA 同意中间 CA 的请求&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;系统会要求我们输入根 CA 的私钥密码&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd &amp;#x2F;root&amp;#x2F;demoCA&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openssl ca -extensions v3_ca -notext -md sha256 -in intermediate&amp;#x2F;certs&amp;#x2F;intermediate.csr.pem -out intermediate&amp;#x2F;certs&amp;#x2F;intermediate.cert.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;chmod 400 intermediate&amp;#x2F;certs&amp;#x2F;intermediate.cert.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;10.png&#34; alt=&#34;截图10&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6. 验证该证书的真实性&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openssl verify -CAfile &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;cacert.pem &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;intermediate&amp;#x2F;certs&amp;#x2F;intermediate.cert.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;系统显示 &amp;quot;OK&amp;quot;，说明我们颁发给中间 CA 的证书是有效的：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;11.png&#34; alt=&#34;截图11&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;7. 构造 CA 证书链&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd &amp;#x2F;root&amp;#x2F;demoCA&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cat intermediate&amp;#x2F;certs&amp;#x2F;intermediate.cert.pem cacert.pem &amp;gt; intermediate&amp;#x2F;certs&amp;#x2F;ca-chain.cert.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;chmod 400 intermediate&amp;#x2F;certs&amp;#x2F;ca-chain.cert.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;8.(附加) p12 证书链&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;pem 格式的证书、证书链文件适用的场景比较多，但是在 windows 系统中一般使用 p12 格式，所以我们还需要创建一个 p12 格式的证书链&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openssl pkcs12 -export -name &amp;quot; intermediate-ca chain&amp;quot; \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    -inkey intermediate&amp;#x2F;private&amp;#x2F;intermediate.key.pem \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    -in intermediate&amp;#x2F;certs&amp;#x2F;intermediate.cert.pem \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    -certfile intermediate&amp;#x2F;certs&amp;#x2F;ca-chain.cert.pem \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    -out intermediate&amp;#x2F;certs&amp;#x2F;ca-chain.cert.p12&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;至此，我们已经成功创建了中间 CA，之后的客户证书就可由中间 CA 进行签发。&lt;/p&gt;&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vU2VjdXJpdHktRGFycmVuL3AvNDA3OTYwNS5odG1s&#34;&gt;https://www.cnblogs.com/Security-Darren/p/4079605.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;5签发服务器证书&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5签发服务器证书&#34;&gt;#&lt;/a&gt; 5. 签发服务器证书&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1. 服务器证书配置&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd &amp;#x2F;root&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cp &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;intermediate&amp;#x2F;intermediate_CA.cnf simple.cnf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vi simple.cnf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;下面是需要更改的具体配置信息&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;[ req_distinguished_name ]&lt;br&gt;commonName=&lt;br&gt;[ v3_req ]&lt;br&gt;#Extensions to add to a certificate request&lt;br&gt;subjectAltName = DNS:www.simple.ustb.com&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;2. 初始化目录并创建客户证书私钥&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;intermediate&amp;#x2F;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mkdir server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mkdir private csr certs&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openssl genrsa -out private&amp;#x2F;server.key.pem 2048&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;12.png&#34; alt=&#34;截图12&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 生成 CSR 文件&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;chmod 400 private&amp;#x2F;server.key.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd ..&amp;#x2F;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cp &amp;#x2F;root&amp;#x2F;simple.cnf server&amp;#x2F;server.cnf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openssl req -config server.cnf -key private&amp;#x2F;server.key.pem -new -sha256 -out csr&amp;#x2F;server.csr.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注意 CN 要写在.cnf 文件中书写过的域名&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;13.png&#34; alt=&#34;截图13&#34;&gt;&lt;/p&gt;&lt;p&gt;检查一下 CSR 文件信息：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;14.png&#34; alt=&#34;截图14&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4. 用中间 CA 同意服务器请求&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd ..&amp;#x2F;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openssl ca -config intermediate_CA.cnf -extensions server_cert -days 3650 -notext -md sha256 -in server&amp;#x2F;csr&amp;#x2F;server.csr.pem -out server&amp;#x2F;certs&amp;#x2F;server.cert.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;chmod 400 server&amp;#x2F;certs&amp;#x2F;server.cert.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;查看证书具体信息：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;15.png&#34; alt=&#34;截图15&#34;&gt;&lt;/p&gt;&lt;p&gt;图中显示证书颁发机构为中间 CA，，证书的 Common Name 为 simple。还有一些 X509 协议相关的信息：SSL Server 表示该证书可以用来支持 HTTPS 协议；最后确认 Subject Alternative Name 为：DNS:simple 与 CN 一样&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;16.png&#34; alt=&#34;截图16&#34;&gt;&lt;/p&gt;&lt;p&gt;验证证书的合法性：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;17.png&#34; alt=&#34;截图17&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;6签发客户端证书&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6签发客户端证书&#34;&gt;#&lt;/a&gt; 6. 签发客户端证书&lt;/h2&gt;&lt;p&gt;与签发服务器证书大致相同，所以不过多描述！&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. 创建中间根 CA 配置文件&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd &amp;#x2F;root&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cp &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;intermediate&amp;#x2F;intermediate_CA.cnf &amp;#x2F;root&amp;#x2F;intermediate_CA_client.cnf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vi intermediate_CA.cnf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;主要配置：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;[ usr_cert ]&lt;br&gt;basicConstraints=CA:TRUE&lt;br&gt;nsCertType = client&lt;br&gt;nsComment = &amp;quot;OpenSSL Generated Client Certificate&amp;quot;&lt;br&gt;authorityKeyIdentifier=keyid,issuer:always&lt;br&gt;keyUsage = critical, CRL Sign, digitalSignature, keyEncipherment&lt;br&gt;subjectKeyIdentifier=hash&lt;br&gt;extendedKeyUsage = clientAuth&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZXJ2ZXJmYXVsdC5jb20vcXVlc3Rpb25zLzg3NTIyOS90d28td2F5LXNzbC1lcnJvci00MDAtdGhlLXNzbC1jZXJ0aWZpY2F0ZS1lcnJvci1qdXN0LWZvci1jbGllbnQtY2VydGlmaWNhdGU=&#34;&gt;https://serverfault.com/questions/875229/two-way-ssl-error-400-the-ssl-certificate-error-just-for-client-certificate&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. 初始化目录并创建客户证书私钥&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;intermediate&amp;#x2F;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mkdir client&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd client&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mkdir private csr certs&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openssl genrsa -out private&amp;#x2F;client.key.pem 2048&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;chmod 400 private&amp;#x2F;client.key.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;18.png&#34; alt=&#34;截图18&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 生成 CSR 文件&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd ..&amp;#x2F;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cp &amp;#x2F;root&amp;#x2F;simple.cnf client&amp;#x2F;client.cnf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd client&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openssl req -config client.cnf -key private&amp;#x2F;client.key.pem -new -sha256 -out csr&amp;#x2F;client.csr.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;19.png&#34; alt=&#34;截图19&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4. 用中间 CA 同意客户请求&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cd ..&amp;#x2F;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cp &amp;#x2F;root&amp;#x2F;intermediate_CA_client.cnf &amp;#x2F;root&amp;#x2F;intermediate&amp;#x2F;intermediate_CA_client.cnf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openssl ca -config intermediate_CA_client.cnf -extensions usr_cert -days 3650 -notext -md sha256 -in client&amp;#x2F;csr&amp;#x2F;client.csr.pem -out client&amp;#x2F;certs&amp;#x2F;client.cert.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;chmod 400 client&amp;#x2F;certs&amp;#x2F;client.cert.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;21.png&#34; alt=&#34;截图21&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5. 验证证书的合法性：&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openssl verify -CAfile certs&amp;#x2F;ca-chain.cert.pem client&amp;#x2F;certs&amp;#x2F;client.cert.pem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openssl x509 -in client&amp;#x2F;certs&amp;#x2F;client.cert.pem -noout -purpose | grep &amp;#39;SSL client :&amp;#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;后者命令验证是否是 client 证书：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;23.png&#34; alt=&#34;截图23&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;24.png&#34; alt=&#34;截图24&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6. 生成 pcsk12 文件&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;pcsk12 文件可以在 windows 环境下安装并信任，生成时需要创建密码：&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openssl pkcs12 -export -clcerts -in &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;intermediate&amp;#x2F;test3&amp;#x2F;certs&amp;#x2F;test3.cert.pem -inkey &amp;#x2F;root&amp;#x2F;demoCA&amp;#x2F;intermediate&amp;#x2F;test3&amp;#x2F;private&amp;#x2F;test3.key.pem -out &amp;#x2F;etc&amp;#x2F;nginx&amp;#x2F;ssl&amp;#x2F;test3.p12&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;7创建域名解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7创建域名解析&#34;&gt;#&lt;/a&gt; 7. 创建域名解析&lt;/h2&gt;&lt;p&gt;因为基于 Web 的安全认证与 url 密切相关，所以 web 访问是通过 url 进行的，所以要先配置域名解析。&lt;/p&gt;&lt;p&gt;来到本机 Windows 路径 C:/Windows/System32/driver/etc/hosts&lt;/p&gt;&lt;p&gt;并在这个文件中加入一行&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;25.png&#34; alt=&#34;截图25&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;8配置nginx服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8配置nginx服务器&#34;&gt;#&lt;/a&gt; 8. 配置 nginx 服务器&lt;/h2&gt;&lt;p&gt;配置 nginx 服务器，使之支持证书双向认证&lt;/p&gt;&lt;p&gt;目录：/www/wwwroot/39.106.13.9/nginx.cnf&lt;/p&gt;&lt;p&gt;在 server 的配置项中加入如下几行：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;listen 8081 ssl;&lt;br&gt;…&lt;br&gt;ssl_certificate /etc/nginx/ssl/server.cert.pem;&lt;br&gt;ssl_certificate_key /etc/nginx/ssl/server.key.pem;&lt;br&gt;#ssl_client_certificate /etc/nginx/ssl/ca-chain.cert.pem;&lt;br&gt;#ssl_verify_depth 2;&lt;br&gt;#ssl_verify_client on;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;启动 nginx 服务：&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nginx -t&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nginx -s reload&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;9以双向认证的方式访问https服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9以双向认证的方式访问https服务&#34;&gt;#&lt;/a&gt; 9. 以双向认证的方式访问 HTTPS 服务&lt;/h2&gt;&lt;p&gt;导入数字证书，点击桌面浏览器 firefox，并点击 firefox 右上角的菜单项（三个横）&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;26.png&#34; alt=&#34;截图26&#34;&gt;&lt;/p&gt;&lt;p&gt;点击 View Certificates，选择 Authorities，点击下方 Import 导入证书 (导入作为 ssl_certificate 的证书)&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;27.png&#34; alt=&#34;截图27&#34;&gt;&lt;/p&gt;&lt;p&gt;选择 Your Certificates，导入先前在创建客户端证书时生成的.p12 文件 （需要输入前面设置的口令）&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;29.png&#34; alt=&#34;截图29&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;30.png&#34; alt=&#34;截图30&#34;&gt;&lt;/p&gt;&lt;p&gt;在地址栏输入 https://www.simple.ustb.com:8081（填写格式：https://[DNS]:[端口]） 并回车，选择导入的客户端证书&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;31.png&#34; alt=&#34;截图31&#34;&gt;&lt;/p&gt;&lt;p&gt;点击 OK 继续访问，出现欢迎界面&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;32.png&#34; alt=&#34;截图32&#34;&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="security" scheme="http://yoursite.com/tags/security/" />
        <updated>2020-09-05T08:12:45.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2020/08/01/js-dynamic-form/</id>
        <title>Javascript/JQuery动态创建表单</title>
        <link rel="alternate" href="http://yoursite.com/2020/08/01/js-dynamic-form/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;hr&gt;&lt;p&gt;最近学长布置的任务，要求在页面中可以主动的、动态的进行一张表单的创建，因为还涉及到 form 表单内各种 id 不能冲突的问题，所以还是废了点时间的，而且国内 baidu 搜关键词也没怎么检索到很符合需求的答案，所以准备仔细的梳理一下。当然不只是表单，准备的说是在页面上动态创建节点，所以可借鉴性还是挺大的，&lt;s&gt;等我忘了这个方法就回来翻博客也挺好&lt;/s&gt;。&lt;/p&gt;&lt;p&gt;同时，虽然只占很小的一部分但是最好还是不公开学长的源码，所以这里用的是我测试 “动态创建节点” 和 “变换 id 以避免 id 冲突” 时用的代码，加上补充时使用部分使用到项目中的非完全的 js 代码&lt;/p&gt;&lt;p&gt;此次虽然只有 &amp;quot;动态创建节点&amp;quot; 和 &amp;quot;避免 id 冲突&amp;quot; 两个大题，其实也把 &amp;quot;如何进行节点定位&amp;quot; 嵌进两个内容里面了，毕竟结合实例更好理解，我日后复习能复习的清楚点 orz&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;1-动态创建节点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-动态创建节点&#34;&gt;#&lt;/a&gt; 1. 动态创建节点&lt;/h2&gt;&lt;p&gt;前端源码参照了&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8xMjExMDUuaHRt&#34;&gt; 51CTO&lt;/span&gt;，如果不涉及有关 &amp;quot;子节点的相关操作&amp;quot; 的话，其实看这个也够了，但是如果需要对子节点操作，比如 id 冲突、特定子节点样式 / 值更改，则还需要继续学习。&lt;/p&gt;&lt;p&gt;先简述一下上面那个链接用到的 js 方法：&lt;/p&gt;&lt;p&gt;首先，用&lt;strong&gt; getElementById&lt;/strong&gt; 来获取被添加了点击事件 add_jietu () 的节点&lt;/p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; add_jietu &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;add_jietu&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//add_jietu 对应的是元素的 id&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;随后，使用主角&lt;strong&gt; cloneNode&lt;/strong&gt; 进行节点的复刻（如果不是复制当前节点，还要涉及其他步骤，这里先一点点整理）：&lt;/p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; node_clone &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; add_jietu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;cloneNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果复制节点不需要 id，则应把 id 删掉，以防止与前面节点的 id 冲突问题（id 需唯一）：&lt;/p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node_clone&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;removeAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;最后提取想要复制的节点的父节点，以便将新的复刻节点添加到父节点下，即复刻节点与原来的节点拥有同一个父节点：&lt;/p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; nodeFather &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; add_jietu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parentNode&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nodeFather&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;node_clone&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;于是我们就可以手动添加节点啦，点击 span 标签，效果是下面这个样子的：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;2.gif&#34; alt=&#34;截图2&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;之后是刚才提到的，不是复制当前节点的话如何进行被克隆节点的定位，就像我遇到的需求：我点击的是我的 button 按钮，但需要复制的是表单，这时就需要使用&lt;strong&gt; parent ()，children ()，siblings ()&lt;/strong&gt;，利用事件监听节点和被复制节点的&lt;strong&gt; div 容器关系&lt;/strong&gt;进行定位，这部分应该是 Jquery 的语法，我一直对两者的区分不是很透彻（用的时候都混在一起用）。下面是我对学长项目进行功能添加时编写的一部分代码，无法 po 出包括前端在内的完整代码，所以只能文字讲解：&lt;/p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//yaqin&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token comment&#34;&gt;// 测试动态表单 onclick 是否有效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;submit_contract&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; btnx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token comment&#34;&gt;//var requestGroup = btnx.parent();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; formGroup &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; btnx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;siblings&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;div[id^=&#39;form-group&#39;]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token comment&#34;&gt;//var lia = formGroup.children (&#34;li.a1&#34;); // 扩展，li 标签 namme 为 a1 的子节点&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token comment&#34;&gt;//alert(lia.first().text() + lia.eq(1).text());&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; lib &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; formGroup&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;li.b1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;首先，函数参数 obj 即为 button 按钮点击事件时传回来的参数，在前端 button 标签中需添加 &lt;code&gt;onclick=&amp;quot;submit_contract(this)&amp;quot;&lt;/code&gt; ， &lt;code&gt;this&lt;/code&gt; 即为 button 本身，利用 &lt;code&gt;$(obj)&lt;/code&gt; 可以将 dom 节点转换为 jquery 对象，随后我们可以使用 parent () 函数提取父节点：&lt;/p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; btnx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;但单就我的例子来说：我的表单是 &amp;quot;button 的父节点的同宗节点&amp;quot;，故需要用到 &lt;code&gt;siblings()&lt;/code&gt; 函数，但同时与 button 的父节点互为同宗节点的有很多，我还需要通过表达式进行筛选：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;这里 siblings 函数内参数中的 &lt;code&gt;div&lt;/code&gt; 表示要求同宗节点标签是 div&lt;/li&gt;&lt;li&gt;&lt;code&gt;[id^=&#39;form-group&#39;]&lt;/code&gt; 表示限制其 id 以 form-group 开头；id 换成 name 就是对 name 属性进行筛选，^= 也可以换成别的，和正则表达式差不多，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aGlkYW8uYmFpZHUuY29tL3F1ZXN0aW9uLzQxOTcwODk2NS5odG1s&#34;&gt;参考链接&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;表达式&lt;/th&gt;&lt;th&gt;含义&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;attribute^=value&lt;/td&gt;&lt;td&gt;attr 属性的值以 value 作为开头&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;attribute$=value&lt;/td&gt;&lt;td&gt;attr 属性的值以 value 作为结尾&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;attribute*=value&lt;/td&gt;&lt;td&gt;attr 属性的值中包含 value&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;attribute!=value&lt;/td&gt;&lt;td&gt;attr 属性中不含有 value 值&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;通过上述的筛选，我变精准的找到了我要复制的表单 form-group [数字]，有数字因为涉及到 id 冲突，也是为什么我需要用表达式进行筛选而不是直接 &amp;quot;=&amp;quot;&lt;/p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; formGroup &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; btnx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;siblings&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;div[id^=&#39;form-group&#39;]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;2-更换节点id避免id冲突&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-更换节点id避免id冲突&#34;&gt;#&lt;/a&gt; 2. 更换节点 id—— 避免 id 冲突&lt;/h2&gt;&lt;p&gt;还记得上面的节点 &lt;code&gt;node_clone&lt;/code&gt; 吗，其实改变 id 很简单，因为可以直接获取到 id 属性修改，这里我们定义&lt;strong&gt;全局变量&lt;/strong&gt; i，每执行一次点击事件就让 &lt;code&gt;++i&lt;/code&gt; ，并将 i 值嵌入我们的 id 属性值中，就避免了 id 冲突啦！&lt;s&gt;这个思路十分的程序猿&lt;/s&gt;&lt;/p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 重点在这里&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add_jietu&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; add_jietu &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;add_jietu&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; nodeFather &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; add_jietu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parentNode&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; node_clone &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; add_jietu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;cloneNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   node_clone&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;add_jietu&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 重点在这里&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   ……&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;那么问题又来了！我不仅要改复制节点的 id，复制节点还有子节点呀，他们的 id 怎么办？这个时候就可以用 &lt;code&gt;getElementsByTagName&lt;/code&gt; 进行筛选啦！&lt;/p&gt;&lt;p&gt;&lt;code&gt;getElementsByTagName(value)&lt;/code&gt; 会返回标签为 value 的子节点的 List，之后按数组的形式一个个修改 id 就可以啦！注意下标是根据筛选结果走的，不同标签的筛选结果需要从新计数：&lt;/p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;newFormNode&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;request-group&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;newFormNode&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;consumersubject&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;newFormNode&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;consumerobject&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;newFormNode&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;consumerstarttime&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;newFormNode&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;button&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;submit_provider&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;需要注意的是 &lt;code&gt;getElementsByTagName&lt;/code&gt; 方法是 dom 节点，即 javascript 的语法，如果用 &lt;code&gt;$(obj)&lt;/code&gt; 将 dom 转换成 jq 对象了的话，使用 &lt;code&gt;parent()&lt;/code&gt; ， &lt;code&gt;children()&lt;/code&gt; 函数就可以了，但是还差个小尾巴 ↓&lt;/p&gt;&lt;p&gt;随后学长的项目又给我出了点难题，论子节点的子节点要修改 id 怎么办？而且子节点很多，用的标签都是一样的，偏偏需要改 id 的只有那么几个，我们还是用 children () 获取的子节点：&lt;/p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; lib &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; formGroup&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;li.b1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其中 &lt;code&gt;li.b1&lt;/code&gt; 表示 li 标签 name 为 b1 的子节点，那 children 返回的是数组，如何获取指定节点呢？这里我也是使用的坐标定位，但不是单纯的把下标加在后面，jquery 有自己的获取指定第几个节点的函数：&lt;/p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; lib &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; formGroup&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;li.b1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; consumersubject &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; lib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; consumerobject &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; lib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;eq&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; consumerstarttime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; lib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;eq&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;first()&lt;/code&gt; 、 &lt;code&gt;last()&lt;/code&gt; 分别表示 List &amp;lt;节点&amp;gt; 中的第一个节点和最后一个节点， &lt;code&gt;eq(value)&lt;/code&gt; 表示的是第 value 个节点，之后再在此基础上进行子节点的筛选，就能找到子节点的子节点并对他进行操作啦！&lt;/p&gt;&lt;p&gt;比如下面我需要获取 &amp;quot;子节点的子节点&amp;quot; 的 value 值：&lt;/p&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; lib &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; formGroup&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;li.b1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; consumersubject &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; lib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;input[id^=&#39;consumersubject&#39;]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; consumerobject &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; lib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;eq&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;input[id^=&#39;consumerobject&#39;]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; consumerstarttime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; lib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;eq&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;input[id^=&#39;consumerstarttime&#39;]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDYwNzgzMjgvY2hhbmdlLWlkcy1vZi1jaGlsZC1lbGVtZW50cy1pbi1qYXZhc2NyaXB0LXdoZW4tY2xvbmluZy1hbi1lbGVtZW50&#34;&gt;https://stackoverflow.com/questions/46078328/change-ids-of-child-elements-in-javascript-when-cloning-an-element&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;结语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结语&#34;&gt;#&lt;/a&gt; 结语&lt;/h2&gt;&lt;p&gt;做这个动态添加表单的功能时，感觉就是疯狂的脑筋急转弯，因为真的有点绕，写着写着就记不住自己定位到哪里了，就像这次学长的那个表单其实是 &amp;quot;button 的父节点的同宗节点的子节点的子节点&amp;quot;，更何况我还是边学习边写，真的很绕 hhhhh&lt;/p&gt;&lt;p&gt;之后我总结下来的经验是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一定要先对 div 容器有个大致的了解，比如 div 和 div 之间的关系啥的，最好是先把缩进调正确了，后期会省很多时间（偷偷来一句不在乎缩进的同僚是真的屑）&lt;/li&gt;&lt;li&gt;不要都写在一行，对于我们初学者，可以先不用在乎变量创建的多少，参照我那个任务，老老实实按当前节点 —— 父节点 —— 同宗节点 —— 子节点 —— 子节点来创建，这样调试也容易知道自己试哪里出的问题。&lt;/li&gt;&lt;li&gt;虽然根本不是什么复杂问题但还是可以用&lt;strong&gt;高内聚低耦合&lt;/strong&gt;的思想看，说白了就是复杂问题拆成简单问题&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;整理了半天总算是捋顺了，最后夹杂一下私货，祝自己生日快乐🎉&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Frontend" scheme="http://yoursite.com/tags/Frontend/" />
        <updated>2020-08-01T13:05:35.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2020/08/01/idea-git/</id>
        <title>利用idea进行git项目更新</title>
        <link rel="alternate" href="http://yoursite.com/2020/08/01/idea-git/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;hr&gt;&lt;p&gt;之前总结了 git 的操作流程，虽然用命令行执行 add 操作的时候需要一个个进行添加，总觉得十分的麻烦，不过之前接触的都是自己开发的小项目，也不会涉及到太多的程序文件，所以一直都用 git bash 依次添加。不过最近接触学长的项目实在是太大了 orz 于是趁前辈在请教了一下用 IDEA 进行 push 项目操作的方法，&lt;s&gt;不知道是不是只有我太菜了不知道这波操作&lt;/s&gt;，总之也记录一下。&lt;br&gt;&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;h3 id=&#34;1-commit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-commit&#34;&gt;#&lt;/a&gt; 1. Commit&lt;/h3&gt;&lt;p&gt;Project 右键 -&amp;gt;Git-&amp;gt;Commit Directory，窗口上面会显示本地与上次 pull 的代码不同的地方，就是具体修改了哪个文件，下面是 commit 内容，就是简述一下此次代码做了哪些修改，填写完毕后点击 &amp;quot;Commit&amp;quot; 把代码发到缓存区。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;1.png&#34; alt=&#34;截图1&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 id=&#34;2-git-pull&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-git-pull&#34;&gt;#&lt;/a&gt; 2. Git Pull&lt;/h3&gt;&lt;p&gt;很容易忽略的一点，也是我觉得前辈们操作特别&lt;strong&gt;严谨&lt;/strong&gt;的地方，Project 右键 -&amp;gt;Git-&amp;gt;Repository-&amp;gt;Pull，如果操作执行后右下角弹窗显示 &amp;quot;up-to-date&amp;quot;（忘截图了），则说明当前本地里的项目代码是最新版本的，即我准备 push 的期间没有其他人进行了 push 代码操作。这样确认一下可以防止成员修改被吞，或者自己是基于旧版本进行开发导致某种意义上错误的代码回溯，确认之后就可以进行 push 啦&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 id=&#34;3-git-push&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-git-push&#34;&gt;#&lt;/a&gt; 3. Git Push&lt;/h3&gt;&lt;p&gt;Project 右键 -&amp;gt;Git-&amp;gt;Repository-&amp;gt;Push，需要确认窗口右侧：上传分支是当前本地项目所用的分支（忘截图了）。确认后点击 Push，如果是第一次对该项目进行 push 操作，需要输入用 github/gitee 用户名密码，并且确认自己的账号已被添加进项目工程中，否则会出现无权上传的错误&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;2.png&#34; alt=&#34;截图2&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果出现下面的弹窗，说明上传成功，origin 后面跟着的是分支名，其他人同步代码的时候 &lt;code&gt;git pull origin 分支名&lt;/code&gt; 就可以啦！&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;3.png&#34; alt=&#34;截图3&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Git" scheme="http://yoursite.com/tags/Git/" />
        <updated>2020-08-01T12:07:25.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2020/07/29/first-dapp/</id>
        <title>针对truffle官方教程pet-shop的Q&amp;A</title>
        <link rel="alternate" href="http://yoursite.com/2020/07/29/first-dapp/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;hr&gt;&lt;p&gt;请允许我先抱怨一下，我本来想找出现问题的解决方法，才去搜的 baidu，之后全是一群把教程翻译了搬到国内的，关键是有的人从文章中也没透露出这个是搬运，总之有点难受。哎，事实证明国外学术气氛确实比国内好，希望以后能少点搬运工多点发现问题解决问题的文章吧 orz 这里把我遇到的问题和解决办法写一下，如果有人也在看这篇教程且出现了问题，也希望能帮助到他们&lt;/p&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudHJ1ZmZsZXN1aXRlLmNvbS90dXRvcmlhbHMvcGV0LXNob3A=&#34;&gt;官方教程点这里&lt;/span&gt;，想学 DApp 的应该需要了解该教程。如果不想看官方英文教程的 baidu 关键词 &amp;quot;pet-shop tutorial adopt button&amp;quot; 看搬运的翻译版&lt;/p&gt;&lt;p&gt;环境：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Truffle v5.1.14 (core: 5.1.14)&lt;br&gt;Solidity v0.5.16 (solc-js)&lt;br&gt;Node v12.18.2&lt;br&gt;Web3.js v1.2.1&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;1-truffle-unbox-pet-shop警告unsupported-platform-for-fsevents124&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-truffle-unbox-pet-shop警告unsupported-platform-for-fsevents124&#34;&gt;#&lt;/a&gt; 1. &amp;quot;truffle unbox pet-shop&amp;quot; 警告：&amp;quot;Unsupported platform for fsevents@1.2.4&amp;quot;&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;1.png&#34; alt=&#34;截图1&#34;&gt;&lt;/p&gt;&lt;p&gt;具体警告如下：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;npm WARN pet-shop@1.0.0 No description&lt;br&gt;npm WARN pet-shop@1.0.0 No repository field.&lt;br&gt;npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):&lt;br&gt;npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&amp;quot;os&amp;quot;:&amp;quot;darwin&amp;quot;,&amp;quot;arch&amp;quot;:&amp;quot;any&amp;quot;} (current: {&amp;quot;os&amp;quot;:&amp;quot;win32&amp;quot;,&amp;quot;arch&amp;quot;:&amp;quot;x64&amp;quot;})&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;上述警告应当只有 Windows 操作系统才会出现，fsevents 是苹果系统的可选依赖，warning 错误，是因为 mac 下需要 fsevents，这里是在 windows 环境，所以可以忽略这个警告。事实上，npm 大部分的 WARN 都是可以忽略的，这里我也只是确认的一下&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;2-truffle-test报错cannot-destructure-property-body-of-undefined-as-it-is-undefined&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-truffle-test报错cannot-destructure-property-body-of-undefined-as-it-is-undefined&#34;&gt;#&lt;/a&gt; 2. &amp;quot;truffle test&amp;quot; 报错：&amp;quot;Cannot destructure property &#39;body&#39; of &#39;undefined&#39; as it is undefined&amp;quot;&lt;/h2&gt;&lt;p&gt;版本问题，solc 版本在 5.1.10 一下不会报错。不过由于我不准备重安 truffle，所以后续没进行 test 测试而是直接跳过（或者改用 js 进行 test 测试也可）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;3-运行lite后点击adopt按钮没有效果也不会弹出metamask&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-运行lite后点击adopt按钮没有效果也不会弹出metamask&#34;&gt;#&lt;/a&gt; 3. 运行 lite 后点击 adopt 按钮没有效果，也不会弹出 Metamask&lt;/h2&gt;&lt;p&gt;毕竟是几年前的老教程了，在 IDEA 中打开 App.js 也会发现执行点击事件的 bindEvents 并没有被调用，需要手动改一下代码，把 bingdEvents 添加进去就可以了&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;2.png&#34; alt=&#34;截图2&#34;&gt;&lt;/p&gt;&lt;p&gt;另：其实 js 文件的大致的书写方式也发生了变化，但是这里我实践这个教程只是为了了解大致框架，所以并没有过多的纠结代码问题，能实现目标的应用效果即可。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;最终效果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最终效果&#34;&gt;#&lt;/a&gt; 最终效果&lt;/h2&gt;&lt;p&gt;Metamask 与 Ganache 链接，localhost:3000 成功显示&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;3.png&#34; alt=&#34;截图3&#34;&gt;&lt;/p&gt;&lt;p&gt;点击 Adopt 按钮后会申请执行合约，Ganache 交易列表中出现 Ganache2 账户的合约调用交易&lt;br&gt;&lt;img data-src=&#34;4.png&#34; alt=&#34;截图4&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接：&lt;/h2&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzEzNTk2L2FydGljbGUvZGV0YWlscy84MTE1ODY2MA==&#34;&gt;https://blog.csdn.net/qq_39313596/article/details/81158660&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3RydWZmbGVzdWl0ZS90cnVmZmxlL2lzc3Vlcy8yODM0&#34;&gt;https://github.com/trufflesuite/truffle/issues/2834&lt;/span&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Solidity" scheme="http://yoursite.com/tags/Solidity/" />
        <category term="Blockchain" scheme="http://yoursite.com/tags/Blockchain/" />
        <updated>2020-07-29T06:34:14.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2020/07/27/git-func/</id>
        <title>【笔记】git操作的流程</title>
        <link rel="alternate" href="http://yoursite.com/2020/07/27/git-func/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;因为老忘记用法，加上新知道了怎么用 git 更新现有项目（&lt;s&gt;我太菜了感谢学长学姐不嫌弃&lt;/s&gt;），所以准备大致写一下具体操作流程，也好加深一下印象。因为很简单，加上事情终于告一段落想要休息一下，所以写的会很短。&lt;/p&gt;&lt;p&gt;下面是 git 使用操作的汇总：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;操作&lt;/th&gt;&lt;th&gt;含义&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;git clone {xxx.git} (存储的相对路径)&lt;/td&gt;&lt;td&gt;克隆项目&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td branch_name&gt;git checkout&lt;/td&gt;&lt;td&gt;转到相应分支&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td branch_name&gt;git branch&lt;/td&gt;&lt;td&gt;&lt;img data-src=&#34;3.png&#34; alt=&#34;截图3&#34;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td file_name&gt;git add&lt;/td&gt;&lt;td&gt;上传文件至缓冲区&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td comment&gt;git commit -m&lt;/td&gt;&lt;td&gt;提交步骤的注释&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;git status&lt;/td&gt;&lt;td&gt;查看状态&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td branch_name&gt;git push -u origin&lt;/td&gt;&lt;td&gt;推送到特定分支&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td branch_name&gt;git pull origin&lt;/td&gt;&lt;td&gt;更新当前项目&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;git stash&lt;/td&gt;&lt;td&gt;将本地项目送至缓冲区&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;git stash pop&lt;/td&gt;&lt;td&gt;用缓冲区中的项目覆盖本地项目&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;git reset --hard&lt;/td&gt;&lt;td&gt;将本地项目强制格式化为上一次 commit&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;br&gt;&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;&lt;br&gt;其中，最后四个命令是最近刚知道的，之前没有接触过大项目，所以只会克隆项目并不会更新 qwq。还有如果使用 pull 命令出现了如下错误，说明有修改过原来的项目，导致 git 不允许 pull 命令进行项目覆盖：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;1.png&#34; alt=&#34;截图1&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个时候就可以使用 &lt;code&gt;git stash&lt;/code&gt; 或者 &lt;code&gt;git reset --hard&lt;/code&gt; ，前者是先暂时保存，后者是强制重置，随后再执行 pull 指令则不会报错&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;2.png&#34; alt=&#34;截图2&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Git" scheme="http://yoursite.com/tags/Git/" />
        <updated>2020-07-27T06:25:41.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2020/07/25/ssh-with-name/</id>
        <title>识别服务器IP对应服务器名使其可用于ssh连接</title>
        <link rel="alternate" href="http://yoursite.com/2020/07/25/ssh-with-name/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;来交作业啦～前几天我有写：学长可以通过服务器名进行进行免密连接，但现在我自己只能做到 IP 地址连接。今天正好学长教会了我，而且很简单！！我也赶紧趁着这个热乎劲赶紧记录一下！&lt;/p&gt;&lt;p&gt;没配置之前应该是有这个报错：Could not resolve hostname xxx: Name or service not known&lt;br&gt;&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;3.png&#34; alt=&#34;截图3&#34;&gt;&lt;/p&gt;&lt;p&gt;本操作只适用于 Linux 或者 Windows 的子系统 wsl 中操作，首先需要进入 root 账户，初始的 wsl 仅仅设置了用户账户密码，但是没有设置 root 账户， &lt;code&gt;sudo passwd root&lt;/code&gt; 设置 root 账户，随后 &lt;code&gt;su root&lt;/code&gt; 进入 root 账户&lt;/p&gt;&lt;p&gt;随后输入下面的指令&lt;/p&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;echo &amp;quot;服务器 IP 地址   服务器名字&amp;quot; &amp;gt;&amp;gt; &amp;#x2F;etc&amp;#x2F;hosts&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以通过 &lt;code&gt;cat /etc/hosts&lt;/code&gt; 查看，刚才的键值对有被写在文件中&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;1.png&#34; alt=&#34;截图1&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随后，就可以通过 &lt;code&gt;ssh root@服务器名字&lt;/code&gt; ，访问远程服务器啦～配置免密服务器&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZWxsb3lhcWluLmdpdGh1Yi5pby8yMDIwLzA3LzI0L3NzaC13c2wv&#34;&gt;之前&lt;/span&gt;记过啦，这里不写了&lt;br&gt;&lt;img data-src=&#34;2.png&#34; alt=&#34;截图2&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Windows" scheme="http://yoursite.com/tags/Windows/" />
        <category term="Linux" scheme="http://yoursite.com/tags/Linux/" />
        <updated>2020-07-25T12:00:25.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2020/07/25/system-command/</id>
        <title>Java判断系统类型&amp;执行命令</title>
        <link rel="alternate" href="http://yoursite.com/2020/07/25/system-command/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;hr&gt;&lt;p&gt;最近在学习前辈们的项目，&lt;s&gt;发现自己真的菜&lt;/s&gt;，在项目中关于 &amp;quot;如何判定操作系统并对此执行不同的命令&amp;quot; 的部分感觉十分的实用！准备记一下笔记，同时因为用 ProcessBuilder 方法执行命令也不是很熟练（Runtime 方法好像要被淘汰了），所以也跟着一起总结 + 复刻一下&lt;/p&gt;&lt;h2 id=&#34;1-判断系统类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-判断系统类型&#34;&gt;#&lt;/a&gt; 1. 判断系统类型&lt;/h2&gt;&lt;p&gt;直接上代码，一条语句即可判断系统类型：&lt;/p&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;span&gt;a&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; isWindows &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;os.name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toLowerCase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;startsWith&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;windows&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其中最主要的就是&lt;strong&gt; System.getProperty () 函数&lt;/strong&gt;，其中 &amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL29zLm5hbWU=&#34;&gt;os.name&lt;/span&gt;&#34;就是操作系统名称。当然System.getProperty()还可以使用其他参数获取对应系统信息，这里po些应该比较常用的：&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th style=&#34;text-align:left&#34;&gt;含义&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;java.version&lt;/td&gt;&lt;td style=&#34;text-align:left&#34;&gt;Java 版本号&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;java.home&lt;/td&gt;&lt;td style=&#34;text-align:left&#34;&gt;Jre 目录&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2phdmEuc3BlY2lmaWNhdGlvbi5uYW1l&#34;&gt;java.specification.name&lt;/span&gt;&lt;/td&gt;&lt;td style=&#34;text-align:left&#34;&gt;Java 规范名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;java.class.version&lt;/td&gt;&lt;td style=&#34;text-align:left&#34;&gt;Java 类版本号&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;java.class.path&lt;/td&gt;&lt;td style=&#34;text-align:left&#34;&gt;Java 类路径&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;img data-src=&#34;4.png&#34; alt=&#34;截图4&#34;&gt;&lt;/td&gt;&lt;td style=&#34;text-align:left&#34;&gt;Java lib 路径&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL29zLm5hbWU=&#34;&gt;os.name&lt;/span&gt;&lt;/td&gt;&lt;td style=&#34;text-align:left&#34;&gt;操作系统名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;os.version&lt;/td&gt;&lt;td style=&#34;text-align:left&#34;&gt;操作系统版本号&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;file.separator&lt;/td&gt;&lt;td style=&#34;text-align:left&#34;&gt;文件分隔符&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;path.separator&lt;/td&gt;&lt;td style=&#34;text-align:left&#34;&gt;路径分隔符&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;line.separator&lt;/td&gt;&lt;td style=&#34;text-align:left&#34;&gt;直线分隔符&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3VzZXIubmFtZQ==&#34;&gt;user.name&lt;/span&gt;&lt;/td&gt;&lt;td style=&#34;text-align:left&#34;&gt;用户名&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;user.home&lt;/td&gt;&lt;td style=&#34;text-align:left&#34;&gt;用户的主目录&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;user.dir&lt;/td&gt;&lt;td style=&#34;text-align:left&#34;&gt;当前程序所在目录&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;既然学就学一套！又去查了下 API 文档 System 类中有关系统信息的函数，包括:&lt;/p&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;span&gt;a&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; def&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;简单看一眼他们都是干什么的：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 id=&#34;11-public-static-string-getpropertystring-key&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-public-static-string-getpropertystring-key&#34;&gt;#&lt;/a&gt; 1.1 public static String getProperty(String key)&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;1.png&#34; alt=&#34;截图1&#34;&gt;&lt;/p&gt;&lt;p&gt;获取由指定 Key 指示的系统属性：首先，如果有安全管理器，则将 Key 作为参数调用 checkPropertyAccess。这可能会导致 SecurityException。 如果没有当前的 system properties，则首先以与 getProperties 方法相同的方式创建和初始化一组系统属性。&lt;/p&gt;&lt;p&gt;参数为 Key，即系统属性的名字，返回值为系统属性对应的 value 值，如果没有名字为 Key 的系统属性则返回 null&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 id=&#34;12-public-static-string-getpropertystring-keystring-def&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-public-static-string-getpropertystring-keystring-def&#34;&gt;#&lt;/a&gt; 1.2 public static String getProperty(String key,String def)&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;2.png&#34; alt=&#34;截图2&#34;&gt;&lt;/p&gt;&lt;p&gt;同样获取由指定 Key 指示的系统属性。 唯一的区别是不会产生 SecurityException，参数多了个默认值，但该函数本人还未理解于上个函数的区别（如果仅仅是不会产生错误，那为什么不用这个呢？），留个小尾巴，之后补上&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 id=&#34;13-public-static-string-setpropertystring-keystring-value&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-public-static-string-setpropertystring-keystring-value&#34;&gt;#&lt;/a&gt; 1.3 public static String setProperty(String key,String value)&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;3.png&#34; alt=&#34;截图3&#34;&gt;&lt;/p&gt;&lt;p&gt;设置由指定 Key 指示的系统属性： 首先，如果存在安全管理器，则使用 PropertyPermission（key，“write”）权限调用其 SecurityManager.checkPermission 方法。这可能会导致引发 SecurityException。&lt;/p&gt;&lt;p&gt;如果没有抛出异常，则将指定的属性设置为给定值，有趣的是该函数还会返回原来该 Key 对应的属性值&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 id=&#34;14-public-static-string-clearpropertystring-key&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-public-static-string-clearpropertystring-key&#34;&gt;#&lt;/a&gt; 1.4 public static String clearProperty(String key)&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;4.png&#34; alt=&#34;截图4&#34;&gt;&lt;/p&gt;&lt;p&gt;删除由指定键指示的系统属性：首先，如果存在安全管理器，则使用 PropertyPermission（key，“write”）权限调用其 SecurityManager.checkPermission 方法。这可能会导致引发 SecurityException。&lt;/p&gt;&lt;p&gt;如果没有抛出异常，则删除指定的属性，并返回原来该 Key 对应的属性值&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 id=&#34;15-public-static-string-getenvstring-name&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-public-static-string-getenvstring-name&#34;&gt;#&lt;/a&gt; 1.5 public static String getenv(String name)&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;5.png&#34; alt=&#34;截图5&#34;&gt;&lt;/p&gt;&lt;p&gt;获取指定环境变量的值。前面都是系统属性，两者的区别是什么呢？&lt;/p&gt;&lt;p&gt;系统属性和环境变量在概念上都是名称和值之间的映射。两种机制都可用于将用户定义的信息传递给 Java 进程，但是环境变量具有更广泛的影响，因为它们对定义它们的进程的所有后代都是可见的，而不仅仅是直接 Java 子进程可见。在不同的操作系统上，它们可以具有微妙的语义，例如是否区分大小写。比如在 UNIX 系统上，名称的字母大小写通常很重要，而在 Microsoft Windows 系统上，名称的字母大小写通常不重要。&lt;/p&gt;&lt;p&gt;基于以上原因，环境变量更有可能产生意想不到的副作用。官方建议的使用方法如下：最好在可能的情况下使用系统属性。当需要全局效果或外部系统接口需要环境变量（例如 PATH）时，应使用环境变量。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;16-public-static-mapstringstring-getenv&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16-public-static-mapstringstring-getenv&#34;&gt;#&lt;/a&gt; 1.6 public static Map&amp;lt;String,String&amp;gt; getenv()&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;6.png&#34; alt=&#34;截图6&#34;&gt;&lt;/p&gt;&lt;p&gt;返回当前所有环境变量的键值对。如果系统不支持环境变量，则返回一个空映射。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;2-processbuilder执行进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-processbuilder执行进程&#34;&gt;#&lt;/a&gt; 2. ProcessBuilder 执行进程&lt;/h2&gt;&lt;p&gt;关于为什么使用 ProcessBuilder 方法，在网上找到这么一句话：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;通过 Java 执行系统命令，与 cmd 中或者终端上一样执行 shell 命令，最典型的用法就是使用 Runtime.getRuntime ().exec (command) 或者 new ProcessBuilder (cmdArray).start ()。从 JDK1.5 开始，官方提供并推荐使用 ProcessBuilder 类进行 shell 命令操作。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;还有就是 Runtime 内部其实也是使用的 ProcessBuilder，综合来看 ProcessBuilder 都将成为执行命令的主流，于是写了个类似的示例，判断操作系统 + 特定执行操作的函数 ExcuteCommand ()&lt;/p&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;span&gt;a&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ExcuteCommand&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ProcessBuilder&lt;/span&gt; builder &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ProcessBuilder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; isWindows &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;os.name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toLowerCase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;startsWith&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;windows&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            builder&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;redirectErrorStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; dir &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;F:\\IDEA&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; stringList &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            stringList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;cmd&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            stringList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/c&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            stringList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;truffle&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            stringList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;version&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;//System.out.println(stringList);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;isWindows&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                builder&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;directory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dir&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                builder&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;stringList&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                builder&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/bin/sh&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;-c&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;ll&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Process&lt;/span&gt; process &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; builder&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;BufferedReader&lt;/span&gt; bufferedReader &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;gb2312&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; len &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;len &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; bufferedReader&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;len&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;具体如何分割一条命令存入字符串，本人的见解就是有空格就要分开存储进 List 中。当然也可以使用一条字符串，之后 &lt;code&gt;builder.command(&amp;quot;cmd&amp;quot;,&amp;quot;/c&amp;quot;,stringCommand)&lt;/code&gt; ，结果是一样的，但本人测试感觉适用度没有 StringList 好。最后的输出结果如下图，代表已经正确运行了查询 truffle 版本的指令，示例运行正确&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;7.png&#34; alt=&#34;截图7&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h2&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvZG9jcy9hcGkvamF2YS9sYW5nL1N5c3RlbS5odG1sI2dldFByb3BlcnR5LWphdmEubGFuZy5TdHJpbmct&#34;&gt;https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getProperty-java.lang.String-&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veHNzNTEyL3AvMTEwNDM0NDYuaHRtbA==&#34;&gt;https://www.cnblogs.com/xss512/p/11043446.html&lt;/span&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Java" scheme="http://yoursite.com/tags/Java/" />
        <updated>2020-07-25T02:28:34.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2020/07/24/fore-back-speration/</id>
        <title>【笔记】看程序羊谈前后端分离</title>
        <link rel="alternate" href="http://yoursite.com/2020/07/24/fore-back-speration/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;hr&gt;&lt;p&gt;这段时间为了丰富自己，开始通过&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWY3NDExTDdCeQ==&#34;&gt; CodeSheep&lt;/span&gt; 的视频进行学习，今天看到了大神关于前后端分离的视频，突然间对这个一直有点模糊的概念有了一些比较透彻的认识，趁着这个认识还比较清晰，赶紧写个笔记记下来～&lt;/p&gt;&lt;p&gt;视频里最喜欢，也是让我最透彻的一句话：&lt;strong&gt;前后端分不分离不是一个技术目问题，而是一个工程考量问题&lt;/strong&gt;。这句话真的让我的思维一下子就开阔了起来，之前对于前后端分离大概只有 &amp;quot;前后端分开开发&amp;quot; 的认识，但这句话告诉了我 &amp;quot;前后端分离&amp;quot; 应当从工程的角度，而不是实际上手，也侧面引出了前后端分离也是需要前提条件的，下面一点点总结吧，也再次安利大家去关注下程序羊，真的神，我逛这么久 b 站真正的教知识教技术的大佬&lt;br&gt;&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;起因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#起因&#34;&gt;#&lt;/a&gt; 起因&lt;/h2&gt;&lt;p&gt;从首先从起因开始，为什么会有 &amp;quot;前后端分离&amp;quot; 的概念？&lt;/p&gt;&lt;p&gt;前后端分离的起因涉及到&lt;strong&gt;前端的缺陷&lt;/strong&gt;所在，像之前的 jsp 技术，它将&lt;strong&gt;前后端高度耦合&lt;/strong&gt;了，前后端经常需要沟通，有时候就干脆交给后端做，且前端的开发十分&lt;strong&gt;片段化&lt;/strong&gt;，在实际开发的时候，从&lt;strong&gt;项目管理&lt;/strong&gt;的角度看是十分&lt;strong&gt;影响工程的开发效率&lt;/strong&gt;的，所以为了解决这个问题，在提出了 “解耦”，即前后端分离的开发模式&lt;/p&gt;&lt;p&gt;所以，前后端分离的本质就是为了&lt;strong&gt;解耦、高内聚低耦合&lt;/strong&gt;（后面六个字也使用于其他复杂问题），解决前端没有工程化的问题。而具体的解决方式就是后来的 Vue 一类的&lt;strong&gt;前端开发组件化 / 工程化框架&lt;/strong&gt;，它们的出现也说明前端正在迈入&lt;strong&gt;工程化、迭代化、可复用化&lt;/strong&gt;的时代&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;如何体现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何体现&#34;&gt;#&lt;/a&gt; 如何体现&lt;/h2&gt;&lt;p&gt;那在工程的角度，前后端分离是如何体现的？&lt;/p&gt;&lt;p&gt;在项目工程中，前后端分离应该体现在工程的各个环节：&lt;strong&gt;设计，开发，测试，部署&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;设计时模型层面的接口约定十分重要，包括接口请求方式，数据类型，格式等，否则在开发阶段就容易出现前后端扯皮的问题，也就算不上是真正的前后端分离了，因为还是没有解耦成功&lt;/p&gt;&lt;p&gt;Vue、React 的组件化，加上开发中前端需要的数据可以从 mock 服务器中模拟获得，使得前端不需要依赖实际的接口，可以进行独立的开发工作&lt;/p&gt;&lt;p&gt;而前后端分离的好处不仅在于前端，对于解耦之后的后端来说，后端开发出来的一个接口往往可以提供给许多前端使用，因为一个接口等于一个功能嘛，意味着在不同的载体上这个接口也会一样使用，也就避免了重复工作&lt;/p&gt;&lt;p&gt;测试的时候基本上保证&lt;strong&gt;前后端独立可测试&lt;/strong&gt;，部署的时候保证&lt;strong&gt;前后端独立可部署&lt;/strong&gt;，版本互相透明，可以按自己的规划来发，不受约束。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;展望&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#展望&#34;&gt;#&lt;/a&gt; 展望&lt;/h2&gt;&lt;p&gt;当然，在现阶段，前端的部署还可以优化。现在后端可以通过 Jenkins 进行可持续发布，那么后续对于前端，也应该会出现适用于前端的&lt;strong&gt; CI（持续集成）系统&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;限制条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#限制条件&#34;&gt;#&lt;/a&gt; 限制条件&lt;/h2&gt;&lt;p&gt;最后还需要提的，&lt;strong&gt;不是每个工程都适用于前后端分离&lt;/strong&gt;，为实现前后端分离所需要的代价是巨大的，这需要前期大量的时间去沟通讨论，因为只要一个环节没有讨论透彻，就会出现上面说的没有解耦的问题，不仅时间成本大，最后又没达到效果。回到最上面的一句话，&lt;strong&gt;这是工程考量的问题&lt;/strong&gt;，这个的项目是否复杂？如果进行前后端分离性价比是否够高？是否值得投入精力进行前后端分离？这都是进行前后端分离前需要考虑的要素&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Note" scheme="http://yoursite.com/tags/Note/" />
        <updated>2020-07-24T13:29:47.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2020/07/24/ssh-wsl/</id>
        <title>在子系统WSL中实现远程服务器免密登陆</title>
        <link rel="alternate" href="http://yoursite.com/2020/07/24/ssh-wsl/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;hr&gt;&lt;p&gt;在测试 SSH 是否成功安装时，我发现我无法免密登陆远程服务器，但是在项目命令中确实实现了免密登陆这一功能。虽然已经配置过 XShell 并且使用的十分顺手，但由于项目需要使用&lt;strong&gt; WSL&lt;/strong&gt;，这意味着如果 WSL 没有设置好远程登陆的话势必会对调试及项目进展造成一定的阻碍，所以毅然决然！配置！&lt;/p&gt;&lt;p&gt;一开始配置错了，配成了本机 Windows 的免密登陆，之后发现其实是密钥的存储路径搞错了，方法是一样的&lt;br&gt;&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;1.png&#34; alt=&#34;截图1&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;1-生成公私钥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-生成公私钥&#34;&gt;#&lt;/a&gt; 1. 生成公私钥&lt;/h2&gt;&lt;p&gt;SSH 的安装这里不进行介绍，我是在安装 openssl 的时候自动给下好了的，所以无法当作参考。这里继续往下走，我们 cmd 打开命令行，输入 &lt;code&gt;wsl&lt;/code&gt; ，来到子系统，输入 &lt;code&gt;bash&lt;/code&gt; （如果是装在本地则无需这两处）&lt;/p&gt;&lt;p&gt;输入 &lt;code&gt;ssh-keygen&lt;/code&gt; 命令，按要求输入存储路径，密码等，我一般都是三个回车&lt;s&gt;也没什么大碍&lt;/s&gt;，之后会存在默认路径一个叫.ssh 的文件夹中，在文件夹中应当出现了公私钥 id_rsa&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;2.png&#34; alt=&#34;截图2&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;本机默认路径为：C:\Users\ 用户名 \.ssh&lt;/p&gt;&lt;p&gt;WSL 默认路径为：C:\Users\ASUS\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\LocalState\rootfs\home\yaqin\.ssh&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;2-将公钥传给远程服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-将公钥传给远程服务器&#34;&gt;#&lt;/a&gt; 2. 将公钥传给远程服务器&lt;/h2&gt;&lt;p&gt;利用 Xftp 将公钥&lt;strong&gt; id_rsa.pub&lt;/strong&gt; 传给服务器，scp 指令亦可，因为 WSL 的默认路径实在是太长了，为了方便这里使用的是 Xftp 进行传输，来到存储公钥的地方并将文件传给远程服务器的 **.ssh** 文件夹&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;3.png&#34; alt=&#34;截图3&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用 scp 指令则 &lt;code&gt;scp 路径文件夹 root@IP地址:root/.ssh&lt;/code&gt; 即可&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;3-远程服务器配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-远程服务器配置&#34;&gt;#&lt;/a&gt; 3. 远程服务器配置&lt;/h2&gt;&lt;p&gt;来到远程服务器，使用 &lt;code&gt;cat .shh/id_rsa.pub &amp;gt;&amp;gt; .ssh/authorized_keys&lt;/code&gt; 指令重命名公钥文件（如果需要多个用户免密该服务器，则用 vim 在原有 authorized_keys 基础上加用户公钥）&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;4.png&#34; alt=&#34;截图4&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;现在就可以用 wsl 免密登陆远程服务器啦！enjoy~&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;5.png&#34; alt=&#34;截图5&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;4-小尾巴&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-小尾巴&#34;&gt;#&lt;/a&gt; 4. 小尾巴&lt;/h2&gt;&lt;p&gt;在项目中发现学长可以通过服务器名进行进行免密连接，但现在我自己只能做到 IP 地址连接。等我搞清楚其中奥秘，如果可以复刻再来填坑 (现在填完啦！单开了一份&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZWxsb3lhcWluLmdpdGh1Yi5pby8yMDIwLzA3LzI1L3NzaC13aXRoLW5hbWUv&#34;&gt;文章&lt;/span&gt;)&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Windows" scheme="http://yoursite.com/tags/Windows/" />
        <category term="Linux" scheme="http://yoursite.com/tags/Linux/" />
        <updated>2020-07-24T02:31:27.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2020/07/23/error-for-wsl-windows/</id>
        <title>wsl.exe系统找不到指定的文件，安装与配置</title>
        <link rel="alternate" href="http://yoursite.com/2020/07/23/error-for-wsl-windows/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;hr&gt;&lt;p&gt;最近部署好的项目在调试时出现了如下报错：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;java.io.IOException: Cannot run program &amp;quot;wsl.exe&amp;quot;: CreateProcess error=2, 系统找不到指定的文件。&lt;br&gt;at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)&lt;br&gt;at com.netflix.eureka.resources.ApplicationResource.callContract(ApplicationResource.java:257)&lt;br&gt;at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br&gt;at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&lt;br&gt;at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br&gt;at java.lang.reflect.Method.invoke(Method.java:498)&lt;br&gt;...&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;阅读了一下源码，发现项目后端需要 Windows 用一个叫做 &amp;quot;wsl.exe&amp;quot; 的文件执行一条 Linux 语句，而 wsl 的全名为&lt;strong&gt; Windows Subsystem for Linux&lt;/strong&gt;，是微软开发的Linux兼容内核接口&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;（来自百度百科），其实说白了就是可以在Windows环境下运行Bash shell的程序！而且与完整的虚拟机设置相比，对计算机资源的压力较小&lt;/p&gt;&lt;p&gt;听起来简直像是程序猿必备的工具，&lt;s&gt;我竟然一直不知道太惭愧了&lt;/s&gt;，既然 wsl 这么有用，那我们就来安装一下它吧&lt;/p&gt;&lt;h2 id=&#34;1-打开开发者模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-打开开发者模式&#34;&gt;#&lt;/a&gt; 1. 打开开发者模式&lt;/h2&gt;&lt;p&gt;在确保 Windows 为 64 位后，设置 -&amp;gt; 更新和安全 -&amp;gt; 开发者选项，选中开发者模式，等待系统安装新功能（印象中需要重启）&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;1.png&#34; alt=&#34;截图1&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;2-控制面板&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-控制面板&#34;&gt;#&lt;/a&gt; 2. 控制面板&lt;/h2&gt;&lt;p&gt;打开控制面板 -&amp;gt; 程序和功能 -&amp;gt; 启用 Windows 应用 -&amp;gt; 勾选 &amp;quot;适用于 Linux&amp;quot; 的 Windows 子系统（英文名 Windows subsystem for Linux）&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;2.png&#34; alt=&#34;截图2&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;确定后重启计算机，重启后 cmd 唤出命令行，输入 wsl 会得到如下结果，说明我们的安装已经成功了一半了，接下来需要安装这个叫做 &amp;quot;分发版&amp;quot; 的东西&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;3.png&#34; alt=&#34;截图3&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;3-安装分发版&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-安装分发版&#34;&gt;#&lt;/a&gt; 3. 安装分发版&lt;/h2&gt;&lt;p&gt;打开 Microsoft Store，安装分发版，官方也有&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvaW5zdGFsbC13aW4xMCNpbnN0YWxsLXlvdXItbGludXgtZGlzdHJpYnV0aW9uLW9mLWNob2ljZQ==&#34;&gt;链接&lt;/span&gt;可以打开每个分发版的 Microsoft Store 页面，这里按自己的需求下载合适的版本即可，我下的是 Ubuntu 18&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;4.png&#34; alt=&#34;截图4&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;注意 wsl 只能在系统驱动器（通常是 C 盘）中运行，如果之前更改过默认保存路径记得改回来：设置 -&amp;gt; 系统 -&amp;gt; 存储 -&amp;gt; 更改新内容的保存位置&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;5.png&#34; alt=&#34;截图5&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;4-配置linux分发版&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-配置linux分发版&#34;&gt;#&lt;/a&gt; 4. 配置 Linux 分发版&lt;/h2&gt;&lt;p&gt;下载完成后，开启应用，按照控制台提示（需要等待一段时间），为新的 Linux 分发版创建新帐户和密码&lt;br&gt;&lt;img data-src=&#34;6.png&#34; alt=&#34;截图6&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;至此子系统的安装配置就全部完成啦，建议一开始使用先输入命令： &lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&lt;/code&gt; 更新下更新包目录&lt;/p&gt;&lt;p&gt;最后报错也解决啦！开心！！！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h2&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83YjM0ODgyODY0NGU=&#34;&gt;https://www.jianshu.com/p/7b348828644e&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvaW5zdGFsbC13aW4xMCNpbnN0YWxsLXRoZS13aW5kb3dzLXN1YnN5c3RlbS1mb3ItbGludXg=&#34;&gt;https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#install-the-windows-subsystem-for-linux&lt;/span&gt;&lt;br&gt;安装若还出现了其他问题，可以去官网查询原因：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvdHJvdWJsZXNob290aW5nI2NvbW1vbi1pc3N1ZXM=&#34;&gt;https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#common-issues&lt;/span&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Java" scheme="http://yoursite.com/tags/Java/" />
        <category term="Windows" scheme="http://yoursite.com/tags/Windows/" />
        <updated>2020-07-23T06:09:45.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/2020/07/21/solidity/</id>
        <title>Windows系统下进行Solidity智能合约项目的配置</title>
        <link rel="alternate" href="http://yoursite.com/2020/07/21/solidity/"/>
        <content type="html">&lt;!-- build time:Tue Apr 19 2022 14:14:24 GMT+0800 (中国标准时间) --&gt;&lt;hr&gt;&lt;p&gt;最近要开始学习智能合约的相关知识，需要学习 solidity 语言，所以想建一个 solidity 项目实例来实践一下，同时监控账户信息。但是因为我 Linux 虚拟机里面差的东西太多了，而且好不容易在本机下面配置好的 IDEA，所以毅然决然在 Windows 系统下面配置 solidity！&lt;/p&gt;&lt;p&gt;不过不管是国内教程还是油管都是用 Linux/Mac 进行的配置，没有找到 Win 系统的教程，所以在搭建好环境后准备开个教程写下大致的流程，希望能帮到大家&lt;br&gt;&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;&lt;br&gt;如果只是单纯的想要熟练语法，写些比较初级的程序，可以直接使用官方提供的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZW1peC5ldGhlcmV1bS5vcmcv&#34;&gt; Remix 在线编辑器&lt;/span&gt;，按照&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zb2xpZGl0eS1jbi5yZWFkdGhlZG9jcy5pby96aC9kZXZlbG9wL2luc3RhbGxpbmctc29saWRpdHkuaHRtbA==&#34;&gt;官方文档&lt;/span&gt;进行学习，因为我对观察交易信息及账户余额有特殊需求，且需要使用 MetaMask，所以需要在本地进行环境配置&lt;/p&gt;&lt;h2 id=&#34;1-安装依赖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-安装依赖&#34;&gt;#&lt;/a&gt; 1. 安装依赖&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Nodejs：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==&#34;&gt;https://nodejs.org/en/&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因为在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZWxsb3lhcWluLmdpdGh1Yi5pby8yMDIwLzA3LzIxL2Jsb2cv&#34;&gt;上一篇博客&lt;/span&gt;中有写到怎么安装配置 Nodejs，包括优化速度，所以这里不重复讲解&lt;/p&gt;&lt;ul&gt;&lt;li&gt;truffle&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在命令行中输入 &lt;code&gt;npm install -g truffle@5.1.14&lt;/code&gt; 进行安装，这里我选定了版本为 5.1.14 主要是为了和油管大神保持相同的版本，不是必须的&lt;/p&gt;&lt;p&gt;安装结果如下，在命令行中输入 &lt;code&gt;truffle version&lt;/code&gt; ，若提示找不到 &#39;truffle&#39; 命令，请确认 Nodejs 环境变量是否配置正确&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;1.png&#34; alt=&#34;截图1&#34;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ganache&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;官网链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudHJ1ZmZsZXN1aXRlLmNvbS9nYW5hY2hl&#34;&gt;https://www.trufflesuite.com/ganache&lt;/span&gt;&lt;/p&gt;&lt;p&gt;下载当前操作系统对应版本，Windows 为.appx 文件，双击直接安装即可。安装结果如下&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;2.png&#34; alt=&#34;截图2&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;2-ide环境配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-ide环境配置&#34;&gt;#&lt;/a&gt; 2. IDE 环境配置&lt;/h2&gt;&lt;p&gt;本人使用的是 IDEA 2020.1，只需要安装 solidity 插件即可。&lt;/p&gt;&lt;p&gt;File-&amp;gt;Settings-&amp;gt;Plugins 在 Market 中搜索&lt;strong&gt; Intellj-solidity&lt;/strong&gt; 进行安装，重启后 IDEA 即可支持 solidity 语言&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;4.png&#34; alt=&#34;截图4&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;3-新建智能合约项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-新建智能合约项目&#34;&gt;#&lt;/a&gt; 3. 新建智能合约项目&lt;/h2&gt;&lt;p&gt;利用 truffle 对项目文件夹进行初始化&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;    mkdir 项目名
    cd 项目名
    truffle init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获得目录架构如下&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;3.png&#34; alt=&#34;截图3&#34;&gt;&lt;/p&gt;&lt;p&gt;我们使用 IDE 打开项目（之后将以 IDEA 代称），在 contract 目录下面新建自己的.sol 文件，&lt;strong&gt;不要删改 Migrations.sol 文件&lt;/strong&gt;，如我这里新建了自己的智能合约 SimpleStorage.sol&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;5.png&#34; alt=&#34;截图5&#34;&gt;&lt;/p&gt;&lt;p&gt;之后就可以书写自己的合约啦，这里我先随便写写，接下来讲 Ganache 怎么使用&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;4-ganache生成虚拟账户并连接truffle&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-ganache生成虚拟账户并连接truffle&#34;&gt;#&lt;/a&gt; 4. Ganache 生成虚拟账户并连接 truffle&lt;/h2&gt;&lt;p&gt;如果是初次使用，选择&lt;strong&gt; QuickStart (Etherum)&lt;/strong&gt;, 并保存该工作区间，这里我已经保存了一个叫 excellent-knowledge 的区间，所以直接点开它&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;7.png&#34; alt=&#34;截图7&#34;&gt;&lt;/p&gt;&lt;p&gt;可以看到 Ganache 生成了 10 个虚拟的以太坊账户供我们测试，我们点右上角的设置图标&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;8.png&#34; alt=&#34;截图8&#34;&gt;&lt;/p&gt;&lt;p&gt;在 WorkSpace 中，点击&lt;strong&gt; Add Project&lt;/strong&gt;，选中之前生成的智能合约项目根路径下的&lt;strong&gt; truffle-config.js&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;9.png&#34; alt=&#34;截图9&#34;&gt;&lt;/p&gt;&lt;p&gt;Server 中 Ganache 默认使用的端口为 7545，也可以根据需求进行更改，设置完成后点击右上角的&lt;strong&gt; Restart&lt;/strong&gt; 重开 Ganache&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;10.png&#34; alt=&#34;截图10&#34;&gt;&lt;/p&gt;&lt;p&gt;同时&lt;strong&gt; truffle-config.js&lt;/strong&gt; 也需要进行配置，在该文件中使用如下代码，其中 port 端口需要与 Ganache 一致&lt;/p&gt;&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module.exports = &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        networks&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            development&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                host&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                port&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7545&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                network_id&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;*&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&#34;5-项目编译并进行发布&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-项目编译并进行发布&#34;&gt;#&lt;/a&gt; 5. 项目编译并进行发布&lt;/h2&gt;&lt;p&gt;在智能合约项目根路径中，使用命令 &lt;code&gt;truffle compile&lt;/code&gt; 对项目进行编译，如果项目语法存在错误会报错，根据报错信息进行修改直到编译成功&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;11.png&#34; alt=&#34;截图11&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;truffle migrate&lt;/code&gt; 将合约进行发布，终端显示已部署合同的交易 ID 和地址，还包括成本汇总和实时状态更新。因为我已经发布过一次了，所以这里用的官网截图&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;14.png&#34; alt=&#34;截图14&#34;&gt;&lt;/p&gt;&lt;p&gt;打开 Ganache 的&lt;strong&gt; Transactions&lt;/strong&gt; 界面，发现有账户进行了交易，交易类型为&lt;strong&gt; Contract Call&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;13.png&#34; alt=&#34;截图13&#34;&gt;&lt;/p&gt;&lt;p&gt;点开查看详细交易信息，此时请求方的地址应为工作区间十个虚拟账户的第一个账户，也说明我们的智能合约已经成功的发布&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;12.png&#34; alt=&#34;截图12&#34;&gt;&lt;/p&gt;&lt;p&gt;接下来可以使用 &lt;code&gt;truffle console&lt;/code&gt; 命令，与账户进行交互，测试，判断合约准确性等操作，具体可看参考链接的 QuickStart&lt;/p&gt;&lt;p&gt;之后可以将项目与 MetaMask 进行连接，就可以进行分布式应用的开发，但此部分仍在学习中！暂时无法分享经验啦&lt;br&gt;&lt;img data-src=&#34;15.png&#34; alt=&#34;截图15&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h2&gt;&lt;p&gt;truffle 官网中的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudHJ1ZmZsZXN1aXRlLmNvbS9kb2NzL3RydWZmbGUvcXVpY2tzdGFydA==&#34;&gt; QuikeStart&lt;/span&gt; 关于合同交互的一些知识也在上面，可自行学习&lt;/p&gt;&lt;p&gt;感谢大神&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cueW91dHViZS5jb20vYy9EYXBwVW5pdmVyc2l0eQ==&#34;&gt; DApp University&lt;/span&gt; 在油管上的分享，也十分推荐想要学习分布式应用的同学学习他的视频教程&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Solidity" scheme="http://yoursite.com/tags/Solidity/" />
        <category term="Blockchain" scheme="http://yoursite.com/tags/Blockchain/" />
        <category term="Smart Contract" scheme="http://yoursite.com/tags/Smart-Contract/" />
        <updated>2020-07-21T07:19:17.000Z</updated>
    </entry>
</feed>
