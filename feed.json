{
    "version": "https://jsonfeed.org/version/1",
    "title": "日渐秃头白夫人",
    "subtitle": "一只还是萌新的鸽子",
    "icon": "http://yoursite.com/images/favicon.ico",
    "description": null,
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/2021/08/27/GameDesigner-2/",
            "url": "http://yoursite.com/2021/08/27/GameDesigner-2/",
            "title": "【笔记】游戏策划——完美世界训练营2",
            "date_published": "2021-08-27T07:53:04.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><h2 id=\"创意-头脑风暴-概念文档的关系\"><a class=\"anchor\" href=\"#创意-头脑风暴-概念文档的关系\">#</a> 创意、头脑风暴、概念文档的关系</h2><p>创意是凌乱的、头脑风暴是工具，将文档进行整理加工，生成高度概念文档</p><p><img data-src=\"1.png\" alt=\"三者的关系\"></p><h2 id=\"创意\"><a class=\"anchor\" href=\"#创意\">#</a> 创意</h2><p><strong>如何获得一个创意？</strong></p><ul><li>需要大量积累，并日常进行观察和总结</li><li>一个好的创意和给你带来财富之间还有很大的距离（好的创意只占 5%-10%）</li><li>创意一定是越多越好，不要吊死在一棵树上</li><li>记录、扩展、深化，并探索更多的创意</li></ul><p><strong>好的创意来源于何处？</strong></p><ul><li>其他媒体作品：书籍、电影、电视</li><li>传统八大艺术背后的人性、美、反思<ul><li>游戏被称作第九大艺术</li><li>模拟人生的灵感就来自建筑模式语言，这并不是一本游戏书（是一本房屋设计怎么影响人们生活方式的书）</li></ul></li><li>其他游戏的灵感</li><li>《电子游戏记录着成长指南》<ul><li>现实的生活 &amp; 想象中的幻想</li></ul></li></ul><h2 id=\"头脑风暴\"><a class=\"anchor\" href=\"#头脑风暴\">#</a> 头脑风暴</h2><p><strong>定义域作用：</strong></p><ul><li>一种工具</li><li>全面探索一个设计问题所有可能的答案，<strong>尽可能多的</strong>构思出理念</li><li>小组成员思考并互相<strong>合作</strong>，重视所有人的理念</li><li>使小组能在什么是重要的事情上<strong>达成一致</strong>的好方法</li><li>项目<strong>初期</strong>使用</li></ul><p><strong>基本法则：</strong></p><ul><li>数量胜过质量：“黄金法则”，竭尽全力构思出尽可能多的理念</li><li>不要急于评论：自己的、别人的、团队的</li><li>没有但是：要接着每个人的理念往下说</li><li>发散思维：不要在乎是不是合理</li><li><strong>可视化</strong>你的理念：帮助获得更多理念的方法</li><li><strong>组合</strong>你的理念：帮助获得更多理念的方法</li></ul><h2 id=\"头脑风暴的方法\"><a class=\"anchor\" href=\"#头脑风暴的方法\">#</a> 头脑风暴的方法：</h2><p><strong>理念闪约</strong></p><p>概念：</p><ul><li>集体构思</li><li>在设计的最开始使用</li></ul><p>流程：</p><ul><li>事前准备：每个人都构思出一个游戏理念，分享给整个集体</li><li>每个人在纸上用一两句话写下自己的游戏理念</li><li>集体相互介绍理念，构思一个由各自理念混合而成的游戏理念</li><li>每一对伙伴把新的理念写出来</li><li>每人审阅每个新理念并进行投票</li><li><strong>更重要的是产生更好的理念，不是竞技</strong></li></ul><p><strong>问题驱动</strong></p><p>概念：</p><ul><li>以疑问句作为头脑风暴的起源（例如 “我们该怎样……”）</li><li>或者假设句</li></ul><p>流程：</p><ul><li>10min 内，每人构思尽量多的理念</li><li>写小纸条</li><li>牢记<strong>数量胜过质量</strong></li><li>每人向全体介绍理念</li><li>表述的过程中可以通过结合或根据旧理念产生新的理念</li><li>投票</li><li><strong>更重要的是产生更好的理念，不是竞技</strong></li></ul><h2 id=\"高度概念文档\"><a class=\"anchor\" href=\"#高度概念文档\">#</a> 高度概念文档</h2><p><strong>基本组成：</strong></p><p><img data-src=\"2.png\" alt=\"高度概念文档基本组成\"></p><p><strong>根据角色：</strong></p><ol><li>学生：</li></ol><ul><li>重要的不是赚钱，而是自我表达，和玩家进行交流</li><li>定义玩家在游戏中角色是关键</li><li>如果玩家角色很难描述，那么玩家很可能也会难以把握这个角色，这就意味着游戏概念出现了问题</li></ul><ol start=\"2\"><li>大型发行商工作：</li></ol><ul><li>选择合适的游戏类型</li><li>不应让标准类型限制你的创造力，也不要无缘无故混合不同类型的特征</li><li>定义目标人群</li><li>发行商 “谁会买这个游戏”</li></ul><p><strong>帮你完成高度概念文档的 12 个问题：</strong></p><p><img data-src=\"3.png\" alt=\"12个问题\"></p><!-- rebuild by hrmmi -->",
            "tags": []
        },
        {
            "id": "http://yoursite.com/2021/08/17/GameDesigner-1/",
            "url": "http://yoursite.com/2021/08/17/GameDesigner-1/",
            "title": "【笔记】游戏策划——完美世界训练营1",
            "date_published": "2021-08-17T02:19:02.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><h2 id=\"分工\"><a class=\"anchor\" href=\"#分工\">#</a> 分工</h2><p><strong>制作人</strong></p><ul><li>招聘人员</li><li>建立团队</li><li>协助游戏设计（看制作人的履历）</li><li>管理团队日程</li><li>解决团队争议<ul><li>做决定的魄力</li><li>承担后果的勇气和能力</li><li>让开发不要停</li></ul></li></ul><p><strong>策划</strong></p><ul><li>创意设计（5%）<ul><li>更重要的是能否让项目落地</li></ul></li><li>制作文档</li><li>沟通交流</li><li>分析用户</li></ul><p><strong>程序</strong></p><ul><li>引擎构建<ul><li>高成本，至少要有引擎组</li><li>育碧、卡普空等，一般有自己的引擎</li><li>小工作室，时间成本不支持自由引擎，可以选择商用引擎（unity，虚幻），但更新代换取决于商家</li></ul></li><li>游戏逻辑</li><li>界面逻辑</li><li>数据库逻辑</li><li>编辑器开发维护<ul><li>与引擎的交互工具</li><li>能否把引擎的效果发挥出来</li></ul></li></ul><p><strong>美术</strong></p><ul><li>概念创作、原画创作</li><li>模型制作<ul><li>场景角色模型等</li><li>与贴图密不可分</li></ul></li><li>贴图制作</li><li>动画制作</li><li>特效制作</li><li>UI 制作</li></ul><p><strong>声音 / 音乐：</strong> 对游戏体验的提升</p><ul><li>音乐制作</li><li>音效制作</li><li>配音制作</li></ul><p><strong>测试（QA，质量保证）</strong></p><ul><li>质量保证</li><li>可玩性检验<ul><li>开发者疲了，需要其他人来发现问题</li><li>测试一般在中后期加入</li><li>在国内环境不好，但在国外很看重</li></ul></li></ul><p><strong>市场运营客服</strong></p><ul><li>游戏发行</li><li>前期宣传</li><li>活动运营</li><li>客诉需求<br>现在已经进入了服务化游戏的环境，所以市场方面的工种也十分重要</li></ul><h2 id=\"游戏制作流程\"><a class=\"anchor\" href=\"#游戏制作流程\">#</a> 游戏制作流程</h2><p>以 MMORPG 为例：</p><p><strong>1 立项阶段</strong></p><ul><li>始于市场分析<ul><li>基于游戏体验报告对市场进行分析</li><li>综合自己擅长的游戏项目进行开发</li><li>要么就是跟风立项</li></ul></li><li>始于设计者<ul><li>设计者提 idea，做 ppt 展示，领导拍板</li><li>平时的创意记小本本</li><li>只要有想法都可以提，只要公司看到并选用</li></ul></li><li>始于资本<ul><li>有钱找人 / 投资</li><li>热钱越来越少，所以这种现象越来越少见</li></ul></li></ul><p><strong>2 原型阶段</strong></p><ul><li>在没有美术的情况下，如果别人也觉得好玩，那么这个游戏就算成功的</li><li>大公司该阶段一般都拿之前的美术继续用</li></ul><p><strong>3 Alpha 阶段（大规模开发阶段）</strong></p><p><strong>3.1 世界观设定</strong></p><ul><li>真实可信的宏观游戏设定<ul><li>比如世界的最高法则？</li><li>如何看待人类等</li></ul></li><li>帮助开发者有整体认识</li></ul><p><strong>3.2 故事与概念设定</strong></p><ul><li>故事：更具体，重要人物地点事件</li><li>概念设定：在故事基础上进行，不强调细节，整体统一认知</li></ul><p><strong>3.3 任务流程与场景设计</strong></p><ul><li>基于主线，如何引导</li><li>基于流程，场景设计需求等</li></ul><p><strong>3.4 角色设计</strong></p><ul><li>详细的设定，细节上</li><li>三视图、衣服设计、武器材质 etc</li></ul><p><strong>3.5 模型、动画特效</strong><br><strong>3.6 关卡设计与制作</strong><br><strong>3.7 系统设计与制作</strong></p><ul><li>装备、宠物、游戏升级等</li></ul><p><strong>3.8 音乐、音效、配音制作</strong></p><p><strong>4 Beta 阶段</strong><br><strong>4.1 测试（QA）</strong></p><ul><li>从一月一个版本的频率逐渐变成一天一个，，<br><strong>4.2 调优</strong></li><li>封测内测、删档测试、不删档测试</li><li>测试的同时</li><li>根据数据进行进一步修改</li></ul><p><strong>5 上线运营</strong></p><h2 id=\"游戏策划的日常工作\"><a class=\"anchor\" href=\"#游戏策划的日常工作\">#</a> 游戏策划的日常工作</h2><ol><li>画思维导图 —— 帮助思考，记录框架和内容间关系</li></ol><ul><li>思维导图大框架<br>例：MMO 任务系统<ul><li>阵营任务</li><li>资源任务</li><li>活动任务</li><li>新手引导</li><li>主线任务</li><li>支线任务</li></ul></li><li>根据框架完善分支<br>！保证文档大纲不出问题</li></ul><ol start=\"2\"><li>做概念图</li></ol><ul><li>帮助别人清晰的知道你想做的是什么</li></ul><ol start=\"3\"><li>单页说明书</li></ol><ul><li>给一起工作的小伙伴进行说明游戏核心玩法</li><li>核心玩法、角色</li></ul><ol start=\"4\"><li>用户画像</li></ol><ul><li>面对什么样的用户、有什么特点</li><li>点子适合什么用户</li></ul><ol start=\"5\"><li>做桌面演示</li></ol><ul><li>任何游戏都可做桌面演示</li><li>好处：</li><li>可以在没有技术美术参与的情况下验证游戏玩法</li><li>发现问题及时修改</li></ul><ol start=\"6\"><li>做十页说明书</li></ol><ul><li>向投资者 or 上级</li><li>要把游戏进展，未来发展等都写的比较清楚</li><li>用于说服投资 and 立项</li></ul><ol start=\"7\"><li>写策划文档</li></ol><ul><li>格式、内容</li></ul><ol start=\"8\"><li>剧情脚本（多图）</li></ol><ul><li>例如：世界观、设定、脚本</li><li>剧情脚本很 AVG<br><img data-src=\"1.png\" alt=\"剧情脚本示例1——世界观\"><br><img data-src=\"2.png\" alt=\"剧情脚本示例2——设定\"><br><img data-src=\"3.png\" alt=\"剧情脚本示例3——脚本\"></li></ul><ol start=\"9\"><li>数据表</li><li>交互原型</li><li>逻辑流程</li></ol><ul><li>点按钮，转哪张图</li><li>如何转到下一页面</li><li>帮助程序了解逻辑</li><li>帮助美术了解需要什么页面<br><img data-src=\"4.png\" alt=\"剧情脚本示例4\"></li></ul><ol start=\"12\"><li>行为预测<br>巴特尔玩家分类法：只是最适合 MMORPG（但是经常被用烂）<br>除此之外，其他分类如人口统计学上的玩家分类</li></ol><ul><li>预测偏好程度</li><li>预测情感出发</li><li>预测影响程度</li><li>预测使用情景</li></ul><ol start=\"13\"><li>进度管理</li></ol><ul><li>主策 -》小策划 -》小组的程序美术</li></ul><ol start=\"14\"><li>整理需求单</li></ol><ul><li>有什么、什么时候做完</li><li>什么做了什么没做</li><li>大表，整理进度</li></ul><ol start=\"15\"><li>沟通协调</li></ol><ul><li>演讲、沟通</li></ul><ol start=\"16\"><li>测试</li></ol><ul><li>配合 QA 修改 bug</li><li>跑版本、修改影响玩家体验的地方</li></ul><h2 id=\"细分与能力需求\"><a class=\"anchor\" href=\"#细分与能力需求\">#</a> 细分与能力需求</h2><p><strong>系统策划</strong></p><ul><li>解决玩什么、为什么、怎么玩</li><li>识别用户</li><li>整理需求</li><li>寻找方案</li><li>能力：</li><li>分析 沟通 is important</li><li>感知</li><li>创意 交互</li></ul><p><strong>数值策划</strong></p><ul><li>让奖励令人期待</li><li>创造属性</li><li>设计公式</li><li>调节常量</li><li>能力：</li><li>数学水平</li><li>耐性、仔细、专注</li><li>Excel、VBA</li></ul><p><strong>文案策划</strong></p><ul><li>建立代入的起始点</li><li>玩家进入游戏后看到的是什么</li><li>玩家以身份行动、遇见什么事情</li><li>虚拟世界包含什么以满足玩家需求</li><li>能力<br>- 人物塑造、文笔</li><li>编故事</li><li>场景描写、物件描写</li></ul><p><strong>关卡策划</strong></p><ul><li>构筑游戏世界</li><li>帮助美术整理素材：不管是场景还是角色</li><li>制作场景：使用编辑器生成地形、放置地表元素、放置触发器、调用任务或对话。以及种植怪物出生点、设置怪物巡逻路线、路点等 etc</li><li>调节平衡：（单机更）针对系统策划的需求，让场景中的对抗元素趋于平衡</li><li>能力</li><li>地图编辑器</li><li>耐心、细心、专注</li><li>协调沟通</li><li>平衡处理</li><li>美观处理</li></ul><p><strong>执行策划</strong></p><ul><li>一开始，从执行策划做起</li><li>熟悉流程</li></ul><h2 id=\"成为游戏策划\"><a class=\"anchor\" href=\"#成为游戏策划\">#</a> 成为游戏策划</h2><ol><li>想要改善某个游戏</li><li>把想法细化为方案</li><li>设计</li></ol><p><strong>如何行动？</strong></p><p>需要海量的知识，要保持好奇心</p><ul><li>多练习：写策划案，就像将来能做出来一样认真写</li><li>收集素材：美术素材 / 案例分析 / 多翻商店 / 自己截图</li><li>收集灵感：游戏 / 电影 / 小说 / 生活</li></ul><p><strong>尝试入行</strong></p><ul><li>简历</li><li>介绍册 / 作品集：策划竟然也要作品集！</li><li>卫生么想做游戏</li><li>最喜欢的游戏</li><li>熟悉厂商的游戏</li><li>最喜欢的制作人，为什么</li></ul><p>推荐：《关于游戏的信仰：Jonathan Blow 的创作哲学》<br><img data-src=\"5.png\" alt=\"送大家一句话.jpg\"></p><!-- rebuild by hrmmi -->",
            "tags": []
        },
        {
            "id": "http://yoursite.com/2021/08/04/HiddenForces/",
            "url": "http://yoursite.com/2021/08/04/HiddenForces/",
            "title": "【生活】怪诞行为学阅读随记",
            "date_published": "2021-08-04T11:08:23.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><blockquote><p>读了本很喜欢的书，怪诞行为学，之前在世界读书日被安利的，一年了总算想起来读了，很有意思，有种相见恨晚的感觉。回想了下十三章的内容，算是做个阅读笔记吧！</p></blockquote><h3 id=\"关于相对论的思考\"><a class=\"anchor\" href=\"#关于相对论的思考\">#</a> 关于相对论的思考</h3><p>a a- b 倾向于选 a，因为它给了更简单的解决办法</p><p>有 a-，就能更衬托 a，在人际交往，经济等层面均可试用</p><p>攀比 人心不足蛇吞象</p><p>激起购买欲，让一件东西难获得就好了</p><p>脱离诱饵：调整圈子 意识并控制自己的攀比行为</p><h3 id=\"第一印象很重要\"><a class=\"anchor\" href=\"#第一印象很重要\">#</a> 第一印象很重要</h3><p>幼鹅效应 第一次的印象很重要 而且长时间潜移默化影响我们的选择（锚）</p><p>羊群效应 比如餐厅排队的人多，那么他应该很好吃，然后也会想排队去吃；同时书中指出了自己会排在自己后面的情况，其实就是不断的重复自己上次做出的选择，这也是为什么一旦设定了锚，之后就很难被修改，因为我们会和第一次做出的选择做比较。</p><p>修改锚是有过程的，而且很难被修改，所以我们的选择未必是真正想要的，很可能是受了锚的影响，这需要我们 “不断审视自己过去的选择是否是心中所要”，“如果抛去过去重新进行选择”，是否还是相同的选择。（更多时候锚的作用体现在变化上，因为会对变化进行比较，从而影响了我们的判断）</p><p>同时，锚的存在也验证了我们的选择未必正确，其实是会受多方因素影响，宣传海报，营销 etc，所以在经济层面，政府需要有比理论更大力度的管控才行。</p><h3 id=\"免费的效应\"><a class=\"anchor\" href=\"#免费的效应\">#</a> 免费的效应</h3><p>免费给人的影响很大，比如并不喜欢的免费巧克力 vs 费列罗，更多人往往会选择免费巧克力，其本质是因为免费不需要成本，这种手段常用在营销宣传上，所以需要时刻注意自己是不是真的想要，而不是被一些附赠的免费冲昏头脑，导致选择了错误的选项</p><h3 id=\"社会规范和市场规范\"><a class=\"anchor\" href=\"#社会规范和市场规范\">#</a> 社会规范和市场规范</h3><p>生活中存在两种行为规范，社会规范主要为人与人之间通过社会关系进行维系（节日送礼，帮忙），市场规范即经济相关</p><p>几种现象：</p><ul><li><p>礼物只有在不知道价钱的时候，才是社会规范，知道了价钱，就是市场规范了；</p></li><li><p>社会规范有种 “自愿” 的情感在里面，所以往往比市场规范的生产力更高，因为更自觉</p></li><li><p>市场规范一旦出现，则很难再形成社会规范</p></li><li><p>公司未提高生产力，往往会想用社会规范，和员工建立一种朋友的关系，比如自助饮食更好的办公环境自主安排上班时间等，但若中间出错（比如克扣工资）立马会变回市场规范，而且员工还会觉得自己遭到了背叛（感觉最近运营的情况很像）</p></li></ul><h3 id=\"性兴奋\"><a class=\"anchor\" href=\"#性兴奋\">#</a> 性兴奋</h3><p>主要论点是，我们冷静时的判断与其他状态（焦虑，兴奋，忧虑 etc）时的判断并不相同，就像是绿巨人一样，有两个我。</p><p>同时，我们往往无法准确的预测自己在其他状态会做出什么决定，这也是为啥有拖延症</p><h3 id=\"治疗拖延\"><a class=\"anchor\" href=\"#治疗拖延\">#</a> 治疗拖延</h3><p>实验证明，如果自己不够自律，只能通过一些外界要素，如由他人强行规定 ddl，拽着同学一起做 etc。</p><h3 id=\"所有权\"><a class=\"anchor\" href=\"#所有权\">#</a> 所有权</h3><p>为什么我们依恋拥有的东西？人的三种特征：</p><ul><li><p>会依恋已经拥有的东西</p></li><li><p>视角更会放在会失去什么上（也是为啥卖家估价永远比买家高）</p></li><li><p>永远觉得对方会和自己站在同一个角度</p></li></ul><p>同时，虚拟依赖症，人对一个事物付出的越多，越容易觉得这是属于自己的（所有物），所以要佛系看，尽量不要有所有权的错觉，一减少错误决策的可能</p><h3 id=\"多种选择\"><a class=\"anchor\" href=\"#多种选择\">#</a> 多种选择</h3><p>人在面对多种选择时，往往那个都不想拉下（我全都要），参照上面 “人们往往会更在乎失去什么上” 会更好理解为什么，即使在知道如此选择后收益会低，所以有时当断则断，并且考虑进犹豫不决带来的后果！</p><p>同时，也要注意有很多在我们不知道间逐渐消失的门（最简单的，和家人在一起的时间）</p><h3 id=\"预期对认知的影响\"><a class=\"anchor\" href=\"#预期对认知的影响\">#</a> 预期对认知的影响</h3><p>简单粗暴的总结：影响很大，预知对一个人的感官有一定影响，这也是为什么面对一件事，往往有不同的观点（如不同方球迷对球赛出界的判断），这种时候往往听听第三方的意见会更好（旁观者清），往往能带来不同的效果。</p><h3 id=\"预期对事物解析的影响\"><a class=\"anchor\" href=\"#预期对事物解析的影响\">#</a> 预期对事物解析的影响</h3><p>典型例子：安慰剂，早年一些外科手术其实是没有外科测试的（这种测试也容易产生伦理上的问题），所以无法测试，但后来被证明其手术本身并没有作用，但由于人的预期是会好，所以传达给大脑的信号觉得手术后舒服多了。</p><p>实验表明，同种药物，价格高带来的感受比价钱便宜的要高，觉得效果更好（其实没有区别）。</p><p>这也能解释 “暗示” 的作用，比如书中的实验通过给一些特殊的词条，成功影响了当事人的大脑处理速度。（或许每天多接触接触积极向上的东西，有具体心情愉快？）</p><h3 id=\"诚实\"><a class=\"anchor\" href=\"#诚实\">#</a> 诚实</h3><p>只要有机会，人是会作弊的，不管这个机会是大是小，只是像面对 “偷窃” 的行为，会触发我们的道德红线，但是像 “顺走公司的一根笔”，“修改上报报销单” 等事情，显然没有触发红线。</p><p>回忆道德相关知识有助于我们激发我们的道德准线（如默背圣戒），但这只在短时间内有效（所以或许什么早上集合朗诵公司条规其实也异曲同工？）</p><h3 id=\"离现金一步之遥\"><a class=\"anchor\" href=\"#离现金一步之遥\">#</a> 离现金一步之遥</h3><p>总结：面对离现金一步之遥的事情，人们更容易作弊，如：“顺走公司的一支笔” 和 “顺走公司 3r（笔的价格）”，显然后者会激发我们的道德红线，但前者没有。书里是：毛公众冰箱里的可乐 vs 毛冰箱里的零用钱</p><p>现在数字化货币如此流行，很危险，因为该论点说明数字资产无法激发红线，将来会有更多的流氓行为发生（举个例子，游戏代币）</p><h3 id=\"行为经济学vs传统经济学\"><a class=\"anchor\" href=\"#行为经济学vs传统经济学\">#</a> 行为经济学 vs 传统经济学</h3><p>行为经济学证明了人并不是像传统经济学所说的完全理性，我们的理性并不完美，而是受大脑思维影响的，这样看来传统经济学的某些策略似乎并不足够贴合实际（许多经济学理论是以人的决策是理性的为基础）</p><p>行为经济学的作用体现在两点：</p><ul><li><p>对传统经济学进行补充修改</p></li><li><p>使用决策，工具避免错误决策</p></li></ul><h3 id=\"总体评价\"><a class=\"anchor\" href=\"#总体评价\">#</a> 总体评价</h3><p>之前有想看《影响力》那本书，但不知道为啥之后就没看下去了，《怪诞行为学》自我感觉比《影响力》更适合理科生一些，主要体现在它每章的结构上，脉络清晰有理有据：事件，提出观点，实验，结果分析，套用其他场景，解决措施。如此下来，相对会更好理解一些！看每章的小实验也很有意思，他们真的很有想法。</p><p>看这本书的好处，就像最后一章所写的，我们知道了大脑在受何种条件作用会做出非理性的行为，那我们要做的就是去了解它（what &amp; why），随后思考能否建立工具、决策来辅助我们避免错误的行为产生（或许会有新的思路）</p><!-- rebuild by hrmmi -->",
            "tags": []
        },
        {
            "id": "http://yoursite.com/2021/05/04/mood-20210504/",
            "url": "http://yoursite.com/2021/05/04/mood-20210504/",
            "title": "【生活】法定节假日的电话",
            "date_published": "2021-05-04T13:36:34.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><p>TODO ： 反思一下，记录下心情</p><p>大四下，正值五一假期，老师中午一句 “假期过的怎么样呀” 终结了我的美好国家法定节假日，虽然汇报了工作，也说明了现在不在工作环境，但显然老师没有要放过我的意思。<br>语音里：虽然我也正值毕业，刚结束完中期答辩不久，而且并没有拿到一个满意的结果，但老师确实没有精力关心这个，寒暄几句罢了，毕竟这只是压榨前走的形式而已。</p><p>果然，老师开始问我的工作，当然这个工作并不是毕业的工作，而是实验室的需求，老师要试点刚和一家企业谈完合作，发现后面应用没跟上，就让我去搞，并找补一句 “虽然我曾经许诺过让你们专心毕业不安排其他任务，但现在是现在，你多担待。” 不过，“不要看说了什么，而且看做了什么” 好像也是他说的，记不太清了。一接触我发现是个烂摊子，为啥是烂摊子？不是师兄师姐不行，是真的是个硬骨头，难啃。然而老师现在话说出去了不得不做，于是叫我一个大四的来收拾残局。</p><p>我其实做过类似的项目，但是是比较简单的，相比这个任务就是小巫见大巫，而且走那条路线没人指导我，我一个大四的，一条路走到黑，而且这个项目使用的工具基本上没人知道没人用，完全没法写进简历里，工程还大还麻烦。但也没啥好推的，肯定推不掉，老师也不会给我拒绝的权利。在实验室，就算是知道难啃，也要先啃了再和老师说，毕竟老师觉得行，博导向来理论研究搞得多，实践和理论间还是有差距的，更何况理论也只是一个模糊的架子，简单说就是说的容易做的难。但老师觉得行，我们底下的说破天了都没用，只能做，反驳还会被安上不积极不干活的骂名，以后每次犯错都会拿来说，从思想批判你。然且，做了都未必满意，更何况没做。这件事发生在放假前两周。</p><p>幸好，原来我以为要从零开始造车，但我和师兄师姐交流之后，上两届师兄们有在做类似的工作，虽然技术路线不一样，但达到的结果是差不多的，用的是 java，主流的编程语言，而且已经有一部分成果了，只是老师一直 “没精力” 关心开发，所以不了解。于是我在组会上和老师谈，虽然老师一开始依然坚持让我走之前的路线，但我觉得这里不能让步，毕竟既对我没有帮助，也会分散人力降低效率。当时老师本来想说服老师废了好大力气吖，我这期间也去看之前的旧项目的代码，确认是不是真的不可用，去考虑旧代码和现平台的兼容性，讲清楚老师和师兄的技术路线有什么区别，看懂师兄的项目理解是否可行，准备工作做了很多。虽然我的表达能力一直不尽人意，老师也只是似懂非懂，但有研二帮我一起解释项目，也给了老师一点时间，最后总算松口让我加入进去了。松口发生在放假的前一周周日，然后就是我的中期答辩，然后就是放假了 —— 劳动节，国家法定节假日。</p><p>只是之后的事情我是没想到的。</p><p>我觉得他问我近况，估计就是要问些事情，所以我提前去咨询了研一师兄目前的进度，毕竟是我加入他的项目辅助他工作，师兄对项目肯定比我更清楚，而且在我告诉他有我能做的可以让我来做的时候，他说他也在思考，所以我也一直是待机的状态。咨询完师兄目前的进展之后，我和老师开始通话，老师也果然问了转化的近况，我也如实的进行了汇报，但毕竟我不能抢了师兄的功劳，所以我说，这是绝大部分是师兄的工作，我只是把原来项目里能用的东西整理出来发给他。</p><p>“你们这不行啊” 老师的经典台词之一，然后他就开始发脾气了，但发脾气的原因竟然是 “你不要管 xxx（我师兄），你自己做！” 然后就开始说 “我给了你三周了一直没出东西”“你在推卸责任”“你是不是也要学研一那一套”</p><p>抨击我研一师兄们已经是常有的事情，老师一直觉得考研的不如保研的，但反正这话只有我听着，我也不会和师兄说，但我差异的是：他把我的时长算成三周，明明我加入项目能开始 coding 也就是 4～5 天前的事情，中间还有中期答辩；而且，我明明是加入到别人的项目里，且对方为长我为幼，他却对我的态度表示不满。</p><p>我想解释，我说这是我加入研二给研一的项目里，我没他们理解… 随后，老师便叫来在实验室写论文的研二师兄，不为啥，因为我说了，所以叫师兄进来。于是我选择沉默，等老师发完脾气，发完火，再和他说具体干啥。因为我知道，我解释什么，他都会觉得我在 “找理由”，而且我若和他争论，有论文压力的师兄，也要在老师旁边听着，啥也做不了，这很浪费他的时间。</p><p>“你的大论文怎么样了” 这问到了我的痛点，我大论文一直不知如何下笔，只把一些概念性的句子记录了下来。不过这也在我的意料之中，老师正在气头上，是肯定会挑我的错的，而论文又是他最拿手的东西，我们多么精心思考的文字在他眼里都不够格。所以，我干脆说 “没写完呢”，果然 “这不行啊”“我对你很失望” 之后又是一番，我也没仔细听，当时已经在车里，就随便看看风景。</p><p>最后，按老师的标准，我的大论文不能落下，小论文也要跟上他的步伐，晚上就整理出来图表（这个之后要说），这两周辅助他出小论文，开发他不暂时着急，但也要按时完成。我知道这完成不了，毕竟他嘴上说着小论文优先，最后还是会天天催我开发进度的，但我还是应下了，不然呢，又要拿 “态度”“责任” 等词汇来压我，而且肯定不会松口。既然肯定完成不了，那就乖乖 “嗯” 吧，一是消他的火气，吵不起来，他自然就没趣了，二是既然将来肯定会被骂，我又为何现在就来找一次骂呢。</p><p>事情讲述完了，中间也交杂了一些小情绪，现在我要回头来反思这件事。</p><p>首先，大结论先定一下：</p><p>我不觉得自己的表现差，事实上，我做的很好，基本上是最优了。</p><p>老师为了压榨，加快我们的开发进度，肯定是要骂的，既然我事后能理性的阐述这件事，说明我防住了。</p><p>熬夜？加班？只要提高了进度他就会觉得骂骂有效果，还能继续压，才不管我怎么赶出来的。再说了，我现在大四，有毕业压力，他不负责顺我的大论文，我还抽出来帮他做实验室的东西，为什么还要进一步透支自己。全做他的我毕业咋办。</p><p>不怕被骂吗？怕，但每个人都有一个极限在那里，现在他摸不清我们几斤几两，只能这么骂，看能榨到什么程度罢了。不是说我不想干活，事实上我是一个喜欢充实的人，只是时机未到，而且自己确实不够成熟，接不下这个大担子。</p><p>随后，我在意的是老师说我在 “推责任” 一事。</p><p>我觉得我确实做到了师门的本分，摆清了自己的位置，不妄自菲薄，也对师兄做了最大的辅助工作，但显然老师对我的期望更高，我也不知道是该荣幸还是烦恼。话说，和老师谈的时候，老师说的也是 “加入” 师兄的项目，最后又变成我主导，不要管师兄，实在是莫名其妙。</p><p>可能也是想推进度，角度没错，只是说我 “推责任”，未免寒心了些。</p><p>当然，我也没错。只是老师既然说开了，我也只能去多商量了。</p><p>最后，就是晚上出图表那里。</p><p>老师的前言是，以后让我做事情会给 ddl 不让我拖，且晚上就干活的时候，竟然有一丝送气。<br>感觉我是喜欢工作的，但我觉得不好。</p><p>因为我觉得我喜欢工作的原因是因为懒得想生活中经历的太多东西。事实上我正烦躁大论文怎么继续动笔，家里打官司等等。而老师布置任务，只要专注于完成老师的任务就好。</p><p>这本质上也是一种麻痹，因为我在回避我需要正视的问题，认识到这点的时候我感觉挺恐怖的。</p><p>最近看见研二师兄的做事方法，我觉得挺值得借鉴的。</p><p>师兄自己是一个代码很厉害的人，但他也不忘了扩充自己，哪怕老师安排给他任务，他也会将任务往能扩展自己的方向争取；</p><p>定期就会花点时间找找主流的工具，框架等去学习，既把握了行业大动向，部分可以借鉴的也会大胆的加入到项目或者管理上去辅助工作；</p><p>代码上不会一知半解，会一字一句探究他们的意义，“为什么会这么写”“这有什么好处”，<br>最后在讲给我们，做一个正向输出。</p><p>把工作和扩展自己结合在一起，应该是我正欠缺的吧，不过现在大多时候都由不得我，我要先学会 “不一知半解” 才行，这样才能争取到老师的信任，我也有机会搞自己想搞得。</p><p>不过，就算争取不到工作和扩展结合，也一定要留出丰富自己的时间，不要觉得完成工作就只有输出，要学会在工作中 “输入，再输出”。</p><!-- rebuild by hrmmi -->",
            "tags": [
                "生活记录"
            ]
        },
        {
            "id": "http://yoursite.com/2021/01/25/crack-password/",
            "url": "http://yoursite.com/2021/01/25/crack-password/",
            "title": "破解密码——高盛虚拟实习复盘",
            "date_published": "2021-01-25T11:36:26.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><p>学习了四年的信息安全，但学校对实践还是稍微薄弱了写，前阵日子看见了高盛的虚拟实习，任务刚好是要求我们破解一写简单的加密密码，趁着两天比较闲，试着学习了一下工具，收获还是很多的，最后整理成了报告并拿到了实习证明。不过报告篇幅被限制成一页，需要回答的事情也被固定了，有的事情没有来得及整理，尤其因为第一次搞破解密码的实战，所以还是有点没有条理，但破解本身真的很有意思，总结破解思路也算是给自己做一个复盘叭！</p><p>不过答案不会剧透，实习证明会贬值的（</p><h2 id=\"工具\"><a class=\"anchor\" href=\"#工具\">#</a> 工具</h2><ul><li>Hashcat：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYXNoY2F0Lm5ldC9oYXNoY2F0Lw==\">https://hashcat.net/hashcat/</span></li><li>字典参考： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhbmllbG1pZXNzbGVyL1NlY0xpc3RzL2Jsb2IvbWFzdGVyL1Bhc3N3b3Jkcy9Db21tb24tQ3JlZGVudGlhbHMvMTAtbWlsbGlvbi1wYXNzd29yZC1saXN0LXRvcC0xMDAwMDAudHh0\">https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10-million-password-list-top-100000.txt</span></li></ul><p>操作系统：Windows10</p><p>Hashcat 使用 GPU 加速，并提供了多种破解方法。下载 binaries 即可，解压到文件夹就能用，需要提前确认<strong> GPU Driver requirements</strong> 是否符合要求，如截止本博客（20210125），Hashcat 对 NVIDIA GPUs 的要求至少为 440.64 版本，打开 NVIDIA 控制面板进行查看：</p><p><img data-src=\"1.png\" alt=\"GPU要求\"></p><p>接着说怎么用 Hashcat 这个工具，打开 Hashcat 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYXNoY2F0Lm5ldC93aWtpLw==\"> Wiki</span>，对应<strong> Core attack modes</strong> 有四种破解方法，简单来说：</p><ul><li>字典模式：单一字典进行破解，具体字典选择可以看上面推荐的工程，里面有很多字典</li><li>组合模式：可以使用两个字典进行排列组合，会根据字典 A + 字典 B 拼凑出的密码进行遍历</li><li>暴力破解和掩码破解：暴力破解不用多说，掩码破解是通过指定密码特征进行破解，有对应的字符集（charsets）</li><li>混合破解：使用字典 + 掩码的方式进行攻击</li></ul><p>然后两个其他方式，在此次实习中没有使用过，之后有机会再补充完善：</p><p><img data-src=\"2.png\" alt=\"Hashcat常用模式\"></p><h2 id=\"破解历程\"><a class=\"anchor\" href=\"#破解历程\">#</a> 破解历程</h2><p>需要注意的是，文件为用户名：密码的形式，所以在使用 Hashcat 是需要加入指令 <code>--username</code> 提醒工具存在用户名，否则 Hashcat 会对密码长度进行报错！</p><ul><li><p>字典模式就可以解决很多简单密码的破解，找个合适的常用字典就行</p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hashcat.exe -m 0 -a 0 hash.txt example.dict --username  &#x2F;&#x2F; 该命令使用的 Hashcat 自带的字典</pre></td></tr></table></figure></li></ul><p><img data-src=\"3.png\" alt=\"截图1\"></p><p><img data-src=\"4.png\" alt=\"截图2\"></p><p><img data-src=\"5.png\" alt=\"截图3\"></p><ul><li>用 combination：hashcat.exe -m 0 -a 1 hash.txt 10-million-password-list-top-1000000.txt 10-million-password-list-top-1000000.txt --username 没跑出来，学习暴力破解</li></ul><p><img data-src=\"6.png\" alt=\"截图4\"></p><ul><li>受上个破解结果启发，根据人物信息写了字典，跑出来了一个</li></ul><p><img data-src=\"7.png\" alt=\"截图5\"></p><ul><li><p>该密码结构为姓名 + 数字，受其启发，会不会是姓名 + 数字，但是数字字典没有，故 hybrid 模式，字典 + 掩码，跑出来一个</p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hashcat.exe -m 0 -a 6 hash.txt tempUsername.txt ?d?d --username</pre></td></tr></table></figure></li></ul><p><img data-src=\"8.png\" alt=\"截图6\"></p><ul><li>中途修改了一下字典，加入了开头大写 or l 变 1，o 变 0 的情况</li></ul><p><img data-src=\"9.png\" alt=\"截图7\"></p><ul><li>剩下 oranoilo 和 nabox，5 位？a 没跑出来，8 位时间太长，直接死机了，放弃（推测是可能与特殊符号相关）</li></ul><p>对结果显示方式的设定可见官方提供的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYXNoY2F0Lm5ldC93aWtpL2Rva3UucGhwP2lkPWZyZXF1ZW50bHlfYXNrZWRfcXVlc3Rpb25zI2hvd19jYW5faV9zaG93X3ByZXZpb3VzbHlfY3JhY2tlZF9wYXNzd29yZHNfYW5kX291dHB1dF90aGVtX2luX2Ffc3BlY2lmaWNfZm9ybWF0X2VnX2VtYWlscGFzc3dvcmQ=\">常见问题</span>，不得不说他们的官方真的很贴心，只要耐心阅读你可以知道一切，论坛也很完善很容易找到类似的问题😘</p><p><img data-src=\"10.png\" alt=\"截图8\"></p><h2 id=\"思路总结\"><a class=\"anchor\" href=\"#思路总结\">#</a> 思路总结</h2><ol><li>一个好的字典可以帮助解决很多事情，先尝试利用字典模式（-a 0）将简单密码进行破解</li><li>在字典爆破不出新密码后，要考虑密码中是否有个人信息，这种情况字典中肯定是没有的，需要自行将信息剥离出自制字典，需涉及到的情况：<ul><li>正常个人信息</li><li>首字母大写 or 全部大写</li><li>0 &lt;-&gt; o ，1 &lt;-&gt; l 等</li></ul></li><li>自制字典先用 - a 0 跑一次，然后在考虑加入其他字典或掩码</li><li>暴力破解可以，但对电脑负荷很大建议使用掩码进行（?a 是个好东西）</li></ol><!-- rebuild by hrmmi -->",
            "tags": [
                "security"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/05/ca/",
            "url": "http://yoursite.com/2020/09/05/ca/",
            "title": "基于OPENSSL的自建CA证书并配置网站的SSH证书认证",
            "date_published": "2020-09-05T08:12:45.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><p>记录一下网安的初级实验流程，自己摸配置文件好痛苦… 而且网上的教程都不是很连贯，或者用的脚本什么的<s>不太好写报告</s>，火狐浏览器也更新换代了配置上也需要进行调整... 总之不记录一下实在是太亏了 hhhhhh 实验的流程很完整，根 CA—— 中间 CA—— 服务器 / 客户证书 ——nginx 配置双向认证，按照右下角章节可进行查看。</p><h2 id=\"1-基本概念\"><a class=\"anchor\" href=\"#1-基本概念\">#</a> 1. 基本概念</h2><p>数字认证是指为保证网上数字信息的传输安全而建立的一种信任及信任验证机制。它利用证书技术实现各类实体在网上信息交流及政务、商务活动中的身份证明。通常将提供数字认证服务的机构或实体称为数字认证中心。</p><p>OpenSSL 颁发数字证书的流程和方法，其大体分为四个步骤。</p><p>一、 建立一个数字证书认证中心，并且构建自己的根 CA</p><p>二、 申请者自主生成一个私有密钥</p><p>三、 申请者将包含了公共密钥的证书请求文件发给 CA</p><p>四、 CA 对发送来的请求文件进行签名，并颁发签名过后的证书。</p><p>这次我们将通过 openssl 命令行创建一个证书认证中心。并进行多级证书请求和签发操作。最后利用生成的证书分别配制 nginx Web 服务器和 Firefox 浏览器，实现证书单向认证和证书双向认证。</p><p><a id=\"more\"></a></p><h2 id=\"2-实验准备\"><a class=\"anchor\" href=\"#2-实验准备\">#</a> 2. 实验准备</h2><p><code>cat /etc/ssl/openssl.cnf</code> 可以查看配置文件，</p><p>使用 vi 编辑器修改 dir 的存放路径，这里假设将路径修改为 /root/demoCA：</p><p><img data-src=\"1.png\" alt=\"截图1\"></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd &#x2F;root&#x2F;demoCA</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  mkdir newcerts certs crl private requests</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  touch index.txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  echo &#39;01&#39; &gt; serial</pre></td></tr></table></figure><h2 id=\"3-创建根ca\"><a class=\"anchor\" href=\"#3-创建根ca\">#</a> 3. 创建根 CA</h2><p>此时当前目录为 /root/demoCA</p><p><strong>1. 创建根 CA 密钥</strong><br><code>openssl genrsa -aes256 -out private/cakey.key.pem 4096</code></p><p>密钥名需要和配置中的 private_key 一致；密码可以随便写，但是要记住！！</p><p><img data-src=\"2.png\" alt=\"截图2\"></p><p>为了确保安全，把秘钥的访问权限设置为 400： <code>chmod 400 private/cakey.pem</code></p><p><strong>2. 生成证书请求</strong><br><code>openssl req -new -key /root/demoCA/private/cakey.pem -out rootCA.csr -days 3650</code> 执行这个命令时，会被要求提供口令保护私钥，可输入自选的口令，并记住这个口令</p><p>根证书将保存为 “cacert.pem” 文件名，有效期为 10 年。</p><p>两个文件名需要对应 cnf 文件中的 private_key 和 certificate</p><p><img data-src=\"3.png\" alt=\"截图3\"></p><p><strong>3. 自签名</strong><br><code>openssl ca -selfsign -in rootCA.csr</code></p><p><img data-src=\"4.png\" alt=\"截图4\"></p><p><strong>4. 查询结果</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cp &#x2F;root&#x2F;demoCA&#x2F;newcerts&#x2F;01.pem&#x2F;root&#x2F;demoCA&#x2F;cacert.pem</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cat &#x2F;root&#x2F;demoCA&#x2F;index.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#x2F;&#x2F; 输出结果：V\t210826021837Z\t\t01\tunknown\t&#x2F;C&#x3D;CN&#x2F;ST&#x3D;Beijing&#x2F;O&#x3D;USTB edu&#x2F;OU&#x3D;USTB edu CA&#x2F;CN&#x3D;www.test.com</pre></td></tr></table></figure><p>命令 <code>openssl x509 -text -noout -in /root/demoCA/cacert.pem</code> 可以查看该证书的详细信息：</p><p><img data-src=\"6.png\" alt=\"截图6\"></p><p>其中，Signature Algorithm 为签名算法；Issurer 是签发方，即签署证书的实体；Validity 指明证书的有效期；然后是公钥信息；Subject 指明证书自身的信息，这里 Issurer 和 Subject 的信息是一样的；</p><p>参考链接：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc3BhcmtkZXYvcC8xMDM2OTMxMy5odG1s\">https://www.cnblogs.com/sparkdev/p/10369313.html</span> 这位大佬的步骤给的挺全，还写了脚本文件，但是他的文件夹分类我有点不习惯</p><h2 id=\"4-创建次级ca\"><a class=\"anchor\" href=\"#4-创建次级ca\">#</a> 4. 创建次级 CA</h2><p>中间 CA 是 root CA 的代理，其证书由 root CA 签发，同时中间 CA 能够代表根 CA 签发用户证书，由此建立起信任链。创建中间 CA 的好处是即使中间 CA 的私钥泄露，造成的影响也是可控的，我们只需要使用 root CA 撤销对应中间 CA 的证书即可。</p><p>为了体现信任链的传递逻辑，在 /root/demoCA/ 下创建对应目录即可，这里假设中间 CA 的证书目录是 /root/demoCA/intermediate/</p><p><strong>1. 初始化次级 CA 相关目录</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkdir &#x2F;root&#x2F;demoCA&#x2F;intermediate&#x2F;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cd &#x2F;root&#x2F;demoCA&#x2F;intermediate&#x2F;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mkdir certs crl newcerts private</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>touch index.txt</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>echo 1000 &gt; serial</pre></td></tr></table></figure><p><strong>2. 创建中间 CA 的私钥</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd &#x2F;root&#x2F;demoCA&#x2F;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>openssl genrsa -aes256 -out intermediate&#x2F;private&#x2F;intermediate.key.pem 4096</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>chmod 400 intermediate&#x2F;private&#x2F;intermediate.key.pem</pre></td></tr></table></figure><p><img data-src=\"7.png\" alt=\"截图7\"></p><p><strong>3. 创建并编辑 intermediate_CA.cnf</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cp &#x2F;root&#x2F;intermediate_CA.cnf &#x2F;root&#x2F;demoCA&#x2F;intermediate&#x2F;intermediate_CA.cnf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cd &#x2F;root&#x2F;demoCA&#x2F;intermediate</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vi intermediate_CA.cnf</pre></td></tr></table></figure><p>下面是需要更改的具体配置信息：</p><blockquote><p>[CA_default ]<br>dir = /root/demoCA/intermediate<br>certs = $dir/certs<br>private = $dir/private<br>certificate = $dir/certs/intermediate.cert.pem<br>private_key = $dir/private/intermediate.key.pem</p></blockquote><p><img data-src=\"8.png\" alt=\"截图8\"></p><p>同时还需要更改其他配置，为之后给服务器证书签名做准备：</p><blockquote><p>[server_cert]<br>#Extensions for server certificates ( <code>man x509v3_config</code> ).<br>basicConstraints = CA:TRUE<br>nsCertType = server<br>nsComment = &quot;OpenSSL Generated Server Certificate&quot;<br>subjectKeyIdentifier = hash<br>authorityKeyIdentifier = keyid,issuer:always<br>keyUsage = critical, CRL Sign, digitalSignature, keyEncipherment<br>extendedKeyUsage = serverAuth</p></blockquote><p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lm1vemlsbGEub3JnL3poLUNOL3F1ZXN0aW9ucy8xMDI0OTc3\">https://support.mozilla.org/zh-CN/questions/1024977</span></p><p><strong>4. 生成 CSR 文件</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd &#x2F;root&#x2F;demoCA&#x2F;intermediate</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>openssl req -config intermediate_CA.cnf -sha256 -new -key private&#x2F;intermediate.key.pem -out certs&#x2F;intermediate.csr.pem</pre></td></tr></table></figure><p><img data-src=\"9.png\" alt=\"截图9\"></p><p>注意”Organization Name” 一项一定要与根 CA 时设置的相同</p><p><strong>5. 用根 CA 同意中间 CA 的请求</strong></p><p>系统会要求我们输入根 CA 的私钥密码</p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd &#x2F;root&#x2F;demoCA</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>openssl ca -extensions v3_ca -notext -md sha256 -in intermediate&#x2F;certs&#x2F;intermediate.csr.pem -out intermediate&#x2F;certs&#x2F;intermediate.cert.pem</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>chmod 400 intermediate&#x2F;certs&#x2F;intermediate.cert.pem</pre></td></tr></table></figure><p><img data-src=\"10.png\" alt=\"截图10\"></p><p><strong>6. 验证该证书的真实性</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl verify -CAfile &#x2F;root&#x2F;demoCA&#x2F;cacert.pem &#x2F;root&#x2F;demoCA&#x2F;intermediate&#x2F;certs&#x2F;intermediate.cert.pem</pre></td></tr></table></figure><p>系统显示 &quot;OK&quot;，说明我们颁发给中间 CA 的证书是有效的：</p><p><img data-src=\"11.png\" alt=\"截图11\"></p><p><strong>7. 构造 CA 证书链</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd &#x2F;root&#x2F;demoCA</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cat intermediate&#x2F;certs&#x2F;intermediate.cert.pem cacert.pem &gt; intermediate&#x2F;certs&#x2F;ca-chain.cert.pem</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>chmod 400 intermediate&#x2F;certs&#x2F;ca-chain.cert.pem</pre></td></tr></table></figure><p><strong>8.(附加) p12 证书链</strong></p><p>pem 格式的证书、证书链文件适用的场景比较多，但是在 windows 系统中一般使用 p12 格式，所以我们还需要创建一个 p12 格式的证书链</p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl pkcs12 -export -name &quot; intermediate-ca chain&quot; \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    -inkey intermediate&#x2F;private&#x2F;intermediate.key.pem \\</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    -in intermediate&#x2F;certs&#x2F;intermediate.cert.pem \\</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    -certfile intermediate&#x2F;certs&#x2F;ca-chain.cert.pem \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    -out intermediate&#x2F;certs&#x2F;ca-chain.cert.p12</pre></td></tr></table></figure><p>至此，我们已经成功创建了中间 CA，之后的客户证书就可由中间 CA 进行签发。</p><p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vU2VjdXJpdHktRGFycmVuL3AvNDA3OTYwNS5odG1s\">https://www.cnblogs.com/Security-Darren/p/4079605.html</span></p><p></p><h2 id=\"5签发服务器证书\"><a class=\"anchor\" href=\"#5签发服务器证书\">#</a> 5. 签发服务器证书</h2><p><strong>1. 服务器证书配置</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd &#x2F;root</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cp &#x2F;root&#x2F;demoCA&#x2F;intermediate&#x2F;intermediate_CA.cnf simple.cnf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vi simple.cnf</pre></td></tr></table></figure><p>下面是需要更改的具体配置信息</p><blockquote><p>[ req_distinguished_name ]<br>commonName=<br>[ v3_req ]<br>#Extensions to add to a certificate request<br>subjectAltName = DNS:www.simple.ustb.com</p></blockquote><p><strong>2. 初始化目录并创建客户证书私钥</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd &#x2F;root&#x2F;demoCA&#x2F;intermediate&#x2F;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mkdir server</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cd server</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mkdir private csr certs</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>openssl genrsa -out private&#x2F;server.key.pem 2048</pre></td></tr></table></figure><p><img data-src=\"12.png\" alt=\"截图12\"></p><p><strong>3. 生成 CSR 文件</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>chmod 400 private&#x2F;server.key.pem</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cd ..&#x2F;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cp &#x2F;root&#x2F;simple.cnf server&#x2F;server.cnf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cd server</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>openssl req -config server.cnf -key private&#x2F;server.key.pem -new -sha256 -out csr&#x2F;server.csr.pem</pre></td></tr></table></figure><p>注意 CN 要写在.cnf 文件中书写过的域名</p><p><img data-src=\"13.png\" alt=\"截图13\"></p><p>检查一下 CSR 文件信息：</p><p><img data-src=\"14.png\" alt=\"截图14\"></p><p><strong>4. 用中间 CA 同意服务器请求</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd ..&#x2F;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>openssl ca -config intermediate_CA.cnf -extensions server_cert -days 3650 -notext -md sha256 -in server&#x2F;csr&#x2F;server.csr.pem -out server&#x2F;certs&#x2F;server.cert.pem</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>chmod 400 server&#x2F;certs&#x2F;server.cert.pem</pre></td></tr></table></figure><p>查看证书具体信息：</p><p><img data-src=\"15.png\" alt=\"截图15\"></p><p>图中显示证书颁发机构为中间 CA，，证书的 Common Name 为 simple。还有一些 X509 协议相关的信息：SSL Server 表示该证书可以用来支持 HTTPS 协议；最后确认 Subject Alternative Name 为：DNS:simple 与 CN 一样</p><p><img data-src=\"16.png\" alt=\"截图16\"></p><p>验证证书的合法性：</p><p><img data-src=\"17.png\" alt=\"截图17\"></p><p></p><h2 id=\"6签发客户端证书\"><a class=\"anchor\" href=\"#6签发客户端证书\">#</a> 6. 签发客户端证书</h2><p>与签发服务器证书大致相同，所以不过多描述！</p><p><strong>1. 创建中间根 CA 配置文件</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd &#x2F;root</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cp &#x2F;root&#x2F;demoCA&#x2F;intermediate&#x2F;intermediate_CA.cnf &#x2F;root&#x2F;intermediate_CA_client.cnf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vi intermediate_CA.cnf</pre></td></tr></table></figure><p>主要配置：</p><blockquote><p>[ usr_cert ]<br>basicConstraints=CA:TRUE<br>nsCertType = client<br>nsComment = &quot;OpenSSL Generated Client Certificate&quot;<br>authorityKeyIdentifier=keyid,issuer:always<br>keyUsage = critical, CRL Sign, digitalSignature, keyEncipherment<br>subjectKeyIdentifier=hash<br>extendedKeyUsage = clientAuth</p></blockquote><p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZXJ2ZXJmYXVsdC5jb20vcXVlc3Rpb25zLzg3NTIyOS90d28td2F5LXNzbC1lcnJvci00MDAtdGhlLXNzbC1jZXJ0aWZpY2F0ZS1lcnJvci1qdXN0LWZvci1jbGllbnQtY2VydGlmaWNhdGU=\">https://serverfault.com/questions/875229/two-way-ssl-error-400-the-ssl-certificate-error-just-for-client-certificate</span></p><p><strong>2. 初始化目录并创建客户证书私钥</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd &#x2F;root&#x2F;demoCA&#x2F;intermediate&#x2F;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mkdir client</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cd client</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mkdir private csr certs</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>openssl genrsa -out private&#x2F;client.key.pem 2048</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>chmod 400 private&#x2F;client.key.pem</pre></td></tr></table></figure><p><img data-src=\"18.png\" alt=\"截图18\"></p><p><strong>3. 生成 CSR 文件</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd ..&#x2F;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cp &#x2F;root&#x2F;simple.cnf client&#x2F;client.cnf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cd client</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>openssl req -config client.cnf -key private&#x2F;client.key.pem -new -sha256 -out csr&#x2F;client.csr.pem</pre></td></tr></table></figure><p><img data-src=\"19.png\" alt=\"截图19\"></p><p><strong>4. 用中间 CA 同意客户请求</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd ..&#x2F;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cp &#x2F;root&#x2F;intermediate_CA_client.cnf &#x2F;root&#x2F;intermediate&#x2F;intermediate_CA_client.cnf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>openssl ca -config intermediate_CA_client.cnf -extensions usr_cert -days 3650 -notext -md sha256 -in client&#x2F;csr&#x2F;client.csr.pem -out client&#x2F;certs&#x2F;client.cert.pem</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>chmod 400 client&#x2F;certs&#x2F;client.cert.pem</pre></td></tr></table></figure><p><img data-src=\"21.png\" alt=\"截图21\"></p><p><strong>5. 验证证书的合法性：</strong></p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl verify -CAfile certs&#x2F;ca-chain.cert.pem client&#x2F;certs&#x2F;client.cert.pem</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>openssl x509 -in client&#x2F;certs&#x2F;client.cert.pem -noout -purpose | grep &#39;SSL client :&#39;</pre></td></tr></table></figure><p>后者命令验证是否是 client 证书：</p><p><img data-src=\"23.png\" alt=\"截图23\"></p><p><img data-src=\"24.png\" alt=\"截图24\"></p><p><strong>6. 生成 pcsk12 文件</strong></p><p>pcsk12 文件可以在 windows 环境下安装并信任，生成时需要创建密码：</p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl pkcs12 -export -clcerts -in &#x2F;root&#x2F;demoCA&#x2F;intermediate&#x2F;test3&#x2F;certs&#x2F;test3.cert.pem -inkey &#x2F;root&#x2F;demoCA&#x2F;intermediate&#x2F;test3&#x2F;private&#x2F;test3.key.pem -out &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;test3.p12</pre></td></tr></table></figure><p></p><h2 id=\"7创建域名解析\"><a class=\"anchor\" href=\"#7创建域名解析\">#</a> 7. 创建域名解析</h2><p>因为基于 Web 的安全认证与 url 密切相关，所以 web 访问是通过 url 进行的，所以要先配置域名解析。</p><p>来到本机 Windows 路径 C:/Windows/System32/driver/etc/hosts</p><p>并在这个文件中加入一行</p><p><img data-src=\"25.png\" alt=\"截图25\"></p><p></p><h2 id=\"8配置nginx服务器\"><a class=\"anchor\" href=\"#8配置nginx服务器\">#</a> 8. 配置 nginx 服务器</h2><p>配置 nginx 服务器，使之支持证书双向认证</p><p>目录：/www/wwwroot/39.106.13.9/nginx.cnf</p><p>在 server 的配置项中加入如下几行：</p><blockquote><p>listen 8081 ssl;<br>…<br>ssl_certificate /etc/nginx/ssl/server.cert.pem;<br>ssl_certificate_key /etc/nginx/ssl/server.key.pem;<br>#ssl_client_certificate /etc/nginx/ssl/ca-chain.cert.pem;<br>#ssl_verify_depth 2;<br>#ssl_verify_client on;</p></blockquote><p>启动 nginx 服务：</p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nginx -t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nginx -s reload</pre></td></tr></table></figure><p></p><h2 id=\"9以双向认证的方式访问https服务\"><a class=\"anchor\" href=\"#9以双向认证的方式访问https服务\">#</a> 9. 以双向认证的方式访问 HTTPS 服务</h2><p>导入数字证书，点击桌面浏览器 firefox，并点击 firefox 右上角的菜单项（三个横）</p><p><img data-src=\"26.png\" alt=\"截图26\"></p><p>点击 View Certificates，选择 Authorities，点击下方 Import 导入证书 (导入作为 ssl_certificate 的证书)</p><p><img data-src=\"27.png\" alt=\"截图27\"></p><p>选择 Your Certificates，导入先前在创建客户端证书时生成的.p12 文件 （需要输入前面设置的口令）</p><p><img data-src=\"29.png\" alt=\"截图29\"></p><p><img data-src=\"30.png\" alt=\"截图30\"></p><p>在地址栏输入 https://www.simple.ustb.com:8081（填写格式：https://[DNS]:[端口]） 并回车，选择导入的客户端证书</p><p><img data-src=\"31.png\" alt=\"截图31\"></p><p>点击 OK 继续访问，出现欢迎界面</p><p><img data-src=\"32.png\" alt=\"截图32\"></p><!-- rebuild by hrmmi -->",
            "tags": [
                "security"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/01/js-dynamic-form/",
            "url": "http://yoursite.com/2020/08/01/js-dynamic-form/",
            "title": "Javascript/JQuery动态创建表单",
            "date_published": "2020-08-01T13:05:35.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><hr><p>最近学长布置的任务，要求在页面中可以主动的、动态的进行一张表单的创建，因为还涉及到 form 表单内各种 id 不能冲突的问题，所以还是废了点时间的，而且国内 baidu 搜关键词也没怎么检索到很符合需求的答案，所以准备仔细的梳理一下。当然不只是表单，准备的说是在页面上动态创建节点，所以可借鉴性还是挺大的，<s>等我忘了这个方法就回来翻博客也挺好</s>。</p><p>同时，虽然只占很小的一部分但是最好还是不公开学长的源码，所以这里用的是我测试 “动态创建节点” 和 “变换 id 以避免 id 冲突” 时用的代码，加上补充时使用部分使用到项目中的非完全的 js 代码</p><p>此次虽然只有 &quot;动态创建节点&quot; 和 &quot;避免 id 冲突&quot; 两个大题，其实也把 &quot;如何进行节点定位&quot; 嵌进两个内容里面了，毕竟结合实例更好理解，我日后复习能复习的清楚点 orz</p><p><a id=\"more\"></a></p><p></p><h2 id=\"1-动态创建节点\"><a class=\"anchor\" href=\"#1-动态创建节点\">#</a> 1. 动态创建节点</h2><p>前端源码参照了<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8xMjExMDUuaHRt\"> 51CTO</span>，如果不涉及有关 &quot;子节点的相关操作&quot; 的话，其实看这个也够了，但是如果需要对子节点操作，比如 id 冲突、特定子节点样式 / 值更改，则还需要继续学习。</p><p>先简述一下上面那个链接用到的 js 方法：</p><p>首先，用<strong> getElementById</strong> 来获取被添加了点击事件 add_jietu () 的节点</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> add_jietu <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add_jietu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//add_jietu 对应的是元素的 id</span></pre></td></tr></table></figure><p>随后，使用主角<strong> cloneNode</strong> 进行节点的复刻（如果不是复制当前节点，还要涉及其他步骤，这里先一点点整理）：</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> node_clone <span class=\"token operator\">=</span> add_jietu<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果复制节点不需要 id，则应把 id 删掉，以防止与前面节点的 id 冲突问题（id 需唯一）：</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node_clone<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>最后提取想要复制的节点的父节点，以便将新的复刻节点添加到父节点下，即复刻节点与原来的节点拥有同一个父节点：</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> nodeFather <span class=\"token operator\">=</span> add_jietu<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nodeFather<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node_clone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>于是我们就可以手动添加节点啦，点击 span 标签，效果是下面这个样子的：</p><p><img data-src=\"2.gif\" alt=\"截图2\"></p><p></p><p>之后是刚才提到的，不是复制当前节点的话如何进行被克隆节点的定位，就像我遇到的需求：我点击的是我的 button 按钮，但需要复制的是表单，这时就需要使用<strong> parent ()，children ()，siblings ()</strong>，利用事件监听节点和被复制节点的<strong> div 容器关系</strong>进行定位，这部分应该是 Jquery 的语法，我一直对两者的区分不是很透彻（用的时候都混在一起用）。下面是我对学长项目进行功能添加时编写的一部分代码，无法 po 出包括前端在内的完整代码，所以只能文字讲解：</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//yaqin</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// 测试动态表单 onclick 是否有效</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">function</span> <span class=\"token function\">submit_contract</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token keyword\">var</span> btnx <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token comment\">//var requestGroup = btnx.parent();</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token keyword\">var</span> formGroup <span class=\"token operator\">=</span> btnx<span class=\"token punctuation\">.</span><span class=\"token function\">siblings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div[id^='form-group']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token comment\">//var lia = formGroup.children (\"li.a1\"); // 扩展，li 标签 namme 为 a1 的子节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token comment\">//alert(lia.first().text() + lia.eq(1).text());</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token keyword\">var</span> lib <span class=\"token operator\">=</span> formGroup<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li.b1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先，函数参数 obj 即为 button 按钮点击事件时传回来的参数，在前端 button 标签中需添加 <code>onclick=&quot;submit_contract(this)&quot;</code> ， <code>this</code> 即为 button 本身，利用 <code>$(obj)</code> 可以将 dom 节点转换为 jquery 对象，随后我们可以使用 parent () 函数提取父节点：</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> btnx <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但单就我的例子来说：我的表单是 &quot;button 的父节点的同宗节点&quot;，故需要用到 <code>siblings()</code> 函数，但同时与 button 的父节点互为同宗节点的有很多，我还需要通过表达式进行筛选：</p><ul><li>这里 siblings 函数内参数中的 <code>div</code> 表示要求同宗节点标签是 div</li><li><code>[id^='form-group']</code> 表示限制其 id 以 form-group 开头；id 换成 name 就是对 name 属性进行筛选，^= 也可以换成别的，和正则表达式差不多，<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aGlkYW8uYmFpZHUuY29tL3F1ZXN0aW9uLzQxOTcwODk2NS5odG1s\">参考链接</span></li></ul><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td>attribute^=value</td><td>attr 属性的值以 value 作为开头</td></tr><tr><td>attribute$=value</td><td>attr 属性的值以 value 作为结尾</td></tr><tr><td>attribute*=value</td><td>attr 属性的值中包含 value</td></tr><tr><td>attribute!=value</td><td>attr 属性中不含有 value 值</td></tr></tbody></table><p>通过上述的筛选，我变精准的找到了我要复制的表单 form-group [数字]，有数字因为涉及到 id 冲突，也是为什么我需要用表达式进行筛选而不是直接 &quot;=&quot;</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> formGroup <span class=\"token operator\">=</span> btnx<span class=\"token punctuation\">.</span><span class=\"token function\">siblings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div[id^='form-group']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p></p><h2 id=\"2-更换节点id避免id冲突\"><a class=\"anchor\" href=\"#2-更换节点id避免id冲突\">#</a> 2. 更换节点 id—— 避免 id 冲突</h2><p>还记得上面的节点 <code>node_clone</code> 吗，其实改变 id 很简单，因为可以直接获取到 id 属性修改，这里我们定义<strong>全局变量</strong> i，每执行一次点击事件就让 <code>++i</code> ，并将 i 值嵌入我们的 id 属性值中，就避免了 id 冲突啦！<s>这个思路十分的程序猿</s></p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重点在这里</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">function</span> <span class=\"token function\">add_jietu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">var</span> add_jietu <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add_jietu'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">var</span> nodeFather <span class=\"token operator\">=</span> add_jietu<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">var</span> node_clone <span class=\"token operator\">=</span> add_jietu<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   node_clone<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"add_jietu\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重点在这里</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   ……</pre></td></tr></table></figure><p>那么问题又来了！我不仅要改复制节点的 id，复制节点还有子节点呀，他们的 id 怎么办？这个时候就可以用 <code>getElementsByTagName</code> 进行筛选啦！</p><p><code>getElementsByTagName(value)</code> 会返回标签为 value 的子节点的 List，之后按数组的形式一个个修改 id 就可以啦！注意下标是根据筛选结果走的，不同标签的筛选结果需要从新计数：</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>newFormNode<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"request-group\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>newFormNode<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"consumersubject\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>newFormNode<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"consumerobject\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>newFormNode<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"consumerstarttime\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>newFormNode<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"submit_provider\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>需要注意的是 <code>getElementsByTagName</code> 方法是 dom 节点，即 javascript 的语法，如果用 <code>$(obj)</code> 将 dom 转换成 jq 对象了的话，使用 <code>parent()</code> ， <code>children()</code> 函数就可以了，但是还差个小尾巴 ↓</p><p>随后学长的项目又给我出了点难题，论子节点的子节点要修改 id 怎么办？而且子节点很多，用的标签都是一样的，偏偏需要改 id 的只有那么几个，我们还是用 children () 获取的子节点：</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> lib <span class=\"token operator\">=</span> formGroup<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li.b1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中 <code>li.b1</code> 表示 li 标签 name 为 b1 的子节点，那 children 返回的是数组，如何获取指定节点呢？这里我也是使用的坐标定位，但不是单纯的把下标加在后面，jquery 有自己的获取指定第几个节点的函数：</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> lib <span class=\"token operator\">=</span> formGroup<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li.b1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> consumersubject <span class=\"token operator\">=</span> lib<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> consumerobject <span class=\"token operator\">=</span> lib<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> consumerstarttime <span class=\"token operator\">=</span> lib<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>first()</code> 、 <code>last()</code> 分别表示 List &lt;节点&gt; 中的第一个节点和最后一个节点， <code>eq(value)</code> 表示的是第 value 个节点，之后再在此基础上进行子节点的筛选，就能找到子节点的子节点并对他进行操作啦！</p><p>比如下面我需要获取 &quot;子节点的子节点&quot; 的 value 值：</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> lib <span class=\"token operator\">=</span> formGroup<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li.b1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> consumersubject <span class=\"token operator\">=</span> lib<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input[id^='consumersubject']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> consumerobject <span class=\"token operator\">=</span> lib<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input[id^='consumerobject']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> consumerstarttime <span class=\"token operator\">=</span> lib<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input[id^='consumerstarttime']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDYwNzgzMjgvY2hhbmdlLWlkcy1vZi1jaGlsZC1lbGVtZW50cy1pbi1qYXZhc2NyaXB0LXdoZW4tY2xvbmluZy1hbi1lbGVtZW50\">https://stackoverflow.com/questions/46078328/change-ids-of-child-elements-in-javascript-when-cloning-an-element</span></p><p></p><h2 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h2><p>做这个动态添加表单的功能时，感觉就是疯狂的脑筋急转弯，因为真的有点绕，写着写着就记不住自己定位到哪里了，就像这次学长的那个表单其实是 &quot;button 的父节点的同宗节点的子节点的子节点&quot;，更何况我还是边学习边写，真的很绕 hhhhh</p><p>之后我总结下来的经验是：</p><ul><li>一定要先对 div 容器有个大致的了解，比如 div 和 div 之间的关系啥的，最好是先把缩进调正确了，后期会省很多时间（偷偷来一句不在乎缩进的同僚是真的屑）</li><li>不要都写在一行，对于我们初学者，可以先不用在乎变量创建的多少，参照我那个任务，老老实实按当前节点 —— 父节点 —— 同宗节点 —— 子节点 —— 子节点来创建，这样调试也容易知道自己试哪里出的问题。</li><li>虽然根本不是什么复杂问题但还是可以用<strong>高内聚低耦合</strong>的思想看，说白了就是复杂问题拆成简单问题</li></ul><p>整理了半天总算是捋顺了，最后夹杂一下私货，祝自己生日快乐🎉</p><p></p><!-- rebuild by hrmmi -->",
            "tags": [
                "Frontend"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/01/idea-git/",
            "url": "http://yoursite.com/2020/08/01/idea-git/",
            "title": "利用idea进行git项目更新",
            "date_published": "2020-08-01T12:07:25.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><hr><p>之前总结了 git 的操作流程，虽然用命令行执行 add 操作的时候需要一个个进行添加，总觉得十分的麻烦，不过之前接触的都是自己开发的小项目，也不会涉及到太多的程序文件，所以一直都用 git bash 依次添加。不过最近接触学长的项目实在是太大了 orz 于是趁前辈在请教了一下用 IDEA 进行 push 项目操作的方法，<s>不知道是不是只有我太菜了不知道这波操作</s>，总之也记录一下。<br><a id=\"more\"></a><br></p><h3 id=\"1-commit\"><a class=\"anchor\" href=\"#1-commit\">#</a> 1. Commit</h3><p>Project 右键 -&gt;Git-&gt;Commit Directory，窗口上面会显示本地与上次 pull 的代码不同的地方，就是具体修改了哪个文件，下面是 commit 内容，就是简述一下此次代码做了哪些修改，填写完毕后点击 &quot;Commit&quot; 把代码发到缓存区。</p><p><img data-src=\"1.png\" alt=\"截图1\"></p><p></p><h3 id=\"2-git-pull\"><a class=\"anchor\" href=\"#2-git-pull\">#</a> 2. Git Pull</h3><p>很容易忽略的一点，也是我觉得前辈们操作特别<strong>严谨</strong>的地方，Project 右键 -&gt;Git-&gt;Repository-&gt;Pull，如果操作执行后右下角弹窗显示 &quot;up-to-date&quot;（忘截图了），则说明当前本地里的项目代码是最新版本的，即我准备 push 的期间没有其他人进行了 push 代码操作。这样确认一下可以防止成员修改被吞，或者自己是基于旧版本进行开发导致某种意义上错误的代码回溯，确认之后就可以进行 push 啦</p><p></p><h3 id=\"3-git-push\"><a class=\"anchor\" href=\"#3-git-push\">#</a> 3. Git Push</h3><p>Project 右键 -&gt;Git-&gt;Repository-&gt;Push，需要确认窗口右侧：上传分支是当前本地项目所用的分支（忘截图了）。确认后点击 Push，如果是第一次对该项目进行 push 操作，需要输入用 github/gitee 用户名密码，并且确认自己的账号已被添加进项目工程中，否则会出现无权上传的错误</p><p><img data-src=\"2.png\" alt=\"截图2\"></p><p></p><p>如果出现下面的弹窗，说明上传成功，origin 后面跟着的是分支名，其他人同步代码的时候 <code>git pull origin 分支名</code> 就可以啦！</p><p><img data-src=\"3.png\" alt=\"截图3\"></p><p></p><!-- rebuild by hrmmi -->",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "http://yoursite.com/2020/07/29/first-dapp/",
            "url": "http://yoursite.com/2020/07/29/first-dapp/",
            "title": "针对truffle官方教程pet-shop的Q&A",
            "date_published": "2020-07-29T06:34:14.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><hr><p>请允许我先抱怨一下，我本来想找出现问题的解决方法，才去搜的 baidu，之后全是一群把教程翻译了搬到国内的，关键是有的人从文章中也没透露出这个是搬运，总之有点难受。哎，事实证明国外学术气氛确实比国内好，希望以后能少点搬运工多点发现问题解决问题的文章吧 orz 这里把我遇到的问题和解决办法写一下，如果有人也在看这篇教程且出现了问题，也希望能帮助到他们</p><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHJ1ZmZsZXN1aXRlLmNvbS90dXRvcmlhbHMvcGV0LXNob3A=\">官方教程点这里</span>，想学 DApp 的应该需要了解该教程。如果不想看官方英文教程的 baidu 关键词 &quot;pet-shop tutorial adopt button&quot; 看搬运的翻译版</p><p>环境：</p><blockquote><p>Truffle v5.1.14 (core: 5.1.14)<br>Solidity v0.5.16 (solc-js)<br>Node v12.18.2<br>Web3.js v1.2.1</p></blockquote><p><br><a id=\"more\"></a></p><h2 id=\"1-truffle-unbox-pet-shop警告unsupported-platform-for-fsevents124\"><a class=\"anchor\" href=\"#1-truffle-unbox-pet-shop警告unsupported-platform-for-fsevents124\">#</a> 1. &quot;truffle unbox pet-shop&quot; 警告：&quot;Unsupported platform for fsevents@1.2.4&quot;</h2><p><img data-src=\"1.png\" alt=\"截图1\"></p><p>具体警告如下：</p><blockquote><p>npm WARN pet-shop@1.0.0 No description<br>npm WARN pet-shop@1.0.0 No repository field.<br>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):<br>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})</p></blockquote><p>上述警告应当只有 Windows 操作系统才会出现，fsevents 是苹果系统的可选依赖，warning 错误，是因为 mac 下需要 fsevents，这里是在 windows 环境，所以可以忽略这个警告。事实上，npm 大部分的 WARN 都是可以忽略的，这里我也只是确认的一下</p><p></p><h2 id=\"2-truffle-test报错cannot-destructure-property-body-of-undefined-as-it-is-undefined\"><a class=\"anchor\" href=\"#2-truffle-test报错cannot-destructure-property-body-of-undefined-as-it-is-undefined\">#</a> 2. &quot;truffle test&quot; 报错：&quot;Cannot destructure property 'body' of 'undefined' as it is undefined&quot;</h2><p>版本问题，solc 版本在 5.1.10 一下不会报错。不过由于我不准备重安 truffle，所以后续没进行 test 测试而是直接跳过（或者改用 js 进行 test 测试也可）</p><p></p><h2 id=\"3-运行lite后点击adopt按钮没有效果也不会弹出metamask\"><a class=\"anchor\" href=\"#3-运行lite后点击adopt按钮没有效果也不会弹出metamask\">#</a> 3. 运行 lite 后点击 adopt 按钮没有效果，也不会弹出 Metamask</h2><p>毕竟是几年前的老教程了，在 IDEA 中打开 App.js 也会发现执行点击事件的 bindEvents 并没有被调用，需要手动改一下代码，把 bingdEvents 添加进去就可以了</p><p><img data-src=\"2.png\" alt=\"截图2\"></p><p>另：其实 js 文件的大致的书写方式也发生了变化，但是这里我实践这个教程只是为了了解大致框架，所以并没有过多的纠结代码问题，能实现目标的应用效果即可。</p><p></p><h2 id=\"最终效果\"><a class=\"anchor\" href=\"#最终效果\">#</a> 最终效果</h2><p>Metamask 与 Ganache 链接，localhost:3000 成功显示</p><p><img data-src=\"3.png\" alt=\"截图3\"></p><p>点击 Adopt 按钮后会申请执行合约，Ganache 交易列表中出现 Ganache2 账户的合约调用交易<br><img data-src=\"4.png\" alt=\"截图4\"></p><p></p><h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接：</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzEzNTk2L2FydGljbGUvZGV0YWlscy84MTE1ODY2MA==\">https://blog.csdn.net/qq_39313596/article/details/81158660</span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RydWZmbGVzdWl0ZS90cnVmZmxlL2lzc3Vlcy8yODM0\">https://github.com/trufflesuite/truffle/issues/2834</span></p><!-- rebuild by hrmmi -->",
            "tags": [
                "Solidity",
                "Blockchain"
            ]
        },
        {
            "id": "http://yoursite.com/2020/07/27/git-func/",
            "url": "http://yoursite.com/2020/07/27/git-func/",
            "title": "【笔记】git操作的流程",
            "date_published": "2020-07-27T06:25:41.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><p>因为老忘记用法，加上新知道了怎么用 git 更新现有项目（<s>我太菜了感谢学长学姐不嫌弃</s>），所以准备大致写一下具体操作流程，也好加深一下印象。因为很简单，加上事情终于告一段落想要休息一下，所以写的会很短。</p><p>下面是 git 使用操作的汇总：</p><table><thead><tr><th>操作</th><th>含义</th></tr></thead><tbody><tr><td>git clone {xxx.git} (存储的相对路径)</td><td>克隆项目</td></tr><tr><td branch_name>git checkout</td><td>转到相应分支</td></tr><tr><td branch_name>git branch</td><td><img data-src=\"3.png\" alt=\"截图3\"></td></tr><tr><td file_name>git add</td><td>上传文件至缓冲区</td></tr><tr><td comment>git commit -m</td><td>提交步骤的注释</td></tr><tr><td>git status</td><td>查看状态</td></tr><tr><td branch_name>git push -u origin</td><td>推送到特定分支</td></tr><tr><td branch_name>git pull origin</td><td>更新当前项目</td></tr><tr><td>git stash</td><td>将本地项目送至缓冲区</td></tr><tr><td>git stash pop</td><td>用缓冲区中的项目覆盖本地项目</td></tr><tr><td>git reset --hard</td><td>将本地项目强制格式化为上一次 commit</td></tr></tbody></table><p><br><a id=\"more\"></a><br>其中，最后四个命令是最近刚知道的，之前没有接触过大项目，所以只会克隆项目并不会更新 qwq。还有如果使用 pull 命令出现了如下错误，说明有修改过原来的项目，导致 git 不允许 pull 命令进行项目覆盖：</p><p><img data-src=\"1.png\" alt=\"截图1\"></p><p></p><p>这个时候就可以使用 <code>git stash</code> 或者 <code>git reset --hard</code> ，前者是先暂时保存，后者是强制重置，随后再执行 pull 指令则不会报错</p><p><img data-src=\"2.png\" alt=\"截图2\"></p><p></p><!-- rebuild by hrmmi -->",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "http://yoursite.com/2020/07/25/ssh-with-name/",
            "url": "http://yoursite.com/2020/07/25/ssh-with-name/",
            "title": "识别服务器IP对应服务器名使其可用于ssh连接",
            "date_published": "2020-07-25T12:00:25.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><p>来交作业啦～前几天我有写：学长可以通过服务器名进行进行免密连接，但现在我自己只能做到 IP 地址连接。今天正好学长教会了我，而且很简单！！我也赶紧趁着这个热乎劲赶紧记录一下！</p><p>没配置之前应该是有这个报错：Could not resolve hostname xxx: Name or service not known<br><a id=\"more\"></a></p><p><img data-src=\"3.png\" alt=\"截图3\"></p><p>本操作只适用于 Linux 或者 Windows 的子系统 wsl 中操作，首先需要进入 root 账户，初始的 wsl 仅仅设置了用户账户密码，但是没有设置 root 账户， <code>sudo passwd root</code> 设置 root 账户，随后 <code>su root</code> 进入 root 账户</p><p>随后输入下面的指令</p><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>echo &quot;服务器 IP 地址   服务器名字&quot; &gt;&gt; &#x2F;etc&#x2F;hosts</pre></td></tr></table></figure><p>可以通过 <code>cat /etc/hosts</code> 查看，刚才的键值对有被写在文件中</p><p><img data-src=\"1.png\" alt=\"截图1\"></p><p></p><p>随后，就可以通过 <code>ssh root@服务器名字</code> ，访问远程服务器啦～配置免密服务器<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxsb3lhcWluLmdpdGh1Yi5pby8yMDIwLzA3LzI0L3NzaC13c2wv\">之前</span>记过啦，这里不写了<br><img data-src=\"2.png\" alt=\"截图2\"></p><p></p><!-- rebuild by hrmmi -->",
            "tags": [
                "Windows",
                "Linux"
            ]
        },
        {
            "id": "http://yoursite.com/2020/07/25/system-command/",
            "url": "http://yoursite.com/2020/07/25/system-command/",
            "title": "Java判断系统类型&执行命令",
            "date_published": "2020-07-25T02:28:34.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><hr><p>最近在学习前辈们的项目，<s>发现自己真的菜</s>，在项目中关于 &quot;如何判定操作系统并对此执行不同的命令&quot; 的部分感觉十分的实用！准备记一下笔记，同时因为用 ProcessBuilder 方法执行命令也不是很熟练（Runtime 方法好像要被淘汰了），所以也跟着一起总结 + 复刻一下</p><h2 id=\"1-判断系统类型\"><a class=\"anchor\" href=\"#1-判断系统类型\">#</a> 1. 判断系统类型</h2><p>直接上代码，一条语句即可判断系统类型：</p><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">boolean</span> isWindows <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"os.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"windows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中最主要的就是<strong> System.getProperty () 函数</strong>，其中 &quot;<span class=\"exturl\" data-url=\"aHR0cDovL29zLm5hbWU=\">os.name</span>\"就是操作系统名称。当然System.getProperty()还可以使用其他参数获取对应系统信息，这里po些应该比较常用的：<a id=\"more\"></a></p><table><thead><tr><th>参数</th><th style=\"text-align:left\">含义</th></tr></thead><tbody><tr><td>java.version</td><td style=\"text-align:left\">Java 版本号</td></tr><tr><td>java.home</td><td style=\"text-align:left\">Jre 目录</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL2phdmEuc3BlY2lmaWNhdGlvbi5uYW1l\">java.specification.name</span></td><td style=\"text-align:left\">Java 规范名称</td></tr><tr><td>java.class.version</td><td style=\"text-align:left\">Java 类版本号</td></tr><tr><td>java.class.path</td><td style=\"text-align:left\">Java 类路径</td></tr><tr><td><img data-src=\"4.png\" alt=\"截图4\"></td><td style=\"text-align:left\">Java lib 路径</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL29zLm5hbWU=\">os.name</span></td><td style=\"text-align:left\">操作系统名称</td></tr><tr><td>os.version</td><td style=\"text-align:left\">操作系统版本号</td></tr><tr><td>file.separator</td><td style=\"text-align:left\">文件分隔符</td></tr><tr><td>path.separator</td><td style=\"text-align:left\">路径分隔符</td></tr><tr><td>line.separator</td><td style=\"text-align:left\">直线分隔符</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL3VzZXIubmFtZQ==\">user.name</span></td><td style=\"text-align:left\">用户名</td></tr><tr><td>user.home</td><td style=\"text-align:left\">用户的主目录</td></tr><tr><td>user.dir</td><td style=\"text-align:left\">当前程序所在目录</td></tr></tbody></table><p>既然学就学一套！又去查了下 API 文档 System 类中有关系统信息的函数，包括:</p><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> def<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>简单看一眼他们都是干什么的：</p><p></p><h3 id=\"11-public-static-string-getpropertystring-key\"><a class=\"anchor\" href=\"#11-public-static-string-getpropertystring-key\">#</a> 1.1 public static String getProperty(String key)</h3><p><img data-src=\"1.png\" alt=\"截图1\"></p><p>获取由指定 Key 指示的系统属性：首先，如果有安全管理器，则将 Key 作为参数调用 checkPropertyAccess。这可能会导致 SecurityException。 如果没有当前的 system properties，则首先以与 getProperties 方法相同的方式创建和初始化一组系统属性。</p><p>参数为 Key，即系统属性的名字，返回值为系统属性对应的 value 值，如果没有名字为 Key 的系统属性则返回 null</p><p></p><h3 id=\"12-public-static-string-getpropertystring-keystring-def\"><a class=\"anchor\" href=\"#12-public-static-string-getpropertystring-keystring-def\">#</a> 1.2 public static String getProperty(String key,String def)</h3><p><img data-src=\"2.png\" alt=\"截图2\"></p><p>同样获取由指定 Key 指示的系统属性。 唯一的区别是不会产生 SecurityException，参数多了个默认值，但该函数本人还未理解于上个函数的区别（如果仅仅是不会产生错误，那为什么不用这个呢？），留个小尾巴，之后补上</p><p></p><h3 id=\"13-public-static-string-setpropertystring-keystring-value\"><a class=\"anchor\" href=\"#13-public-static-string-setpropertystring-keystring-value\">#</a> 1.3 public static String setProperty(String key,String value)</h3><p><img data-src=\"3.png\" alt=\"截图3\"></p><p>设置由指定 Key 指示的系统属性： 首先，如果存在安全管理器，则使用 PropertyPermission（key，“write”）权限调用其 SecurityManager.checkPermission 方法。这可能会导致引发 SecurityException。</p><p>如果没有抛出异常，则将指定的属性设置为给定值，有趣的是该函数还会返回原来该 Key 对应的属性值</p><p></p><h3 id=\"14-public-static-string-clearpropertystring-key\"><a class=\"anchor\" href=\"#14-public-static-string-clearpropertystring-key\">#</a> 1.4 public static String clearProperty(String key)</h3><p><img data-src=\"4.png\" alt=\"截图4\"></p><p>删除由指定键指示的系统属性：首先，如果存在安全管理器，则使用 PropertyPermission（key，“write”）权限调用其 SecurityManager.checkPermission 方法。这可能会导致引发 SecurityException。</p><p>如果没有抛出异常，则删除指定的属性，并返回原来该 Key 对应的属性值</p><p></p><h3 id=\"15-public-static-string-getenvstring-name\"><a class=\"anchor\" href=\"#15-public-static-string-getenvstring-name\">#</a> 1.5 public static String getenv(String name)</h3><p><img data-src=\"5.png\" alt=\"截图5\"></p><p>获取指定环境变量的值。前面都是系统属性，两者的区别是什么呢？</p><p>系统属性和环境变量在概念上都是名称和值之间的映射。两种机制都可用于将用户定义的信息传递给 Java 进程，但是环境变量具有更广泛的影响，因为它们对定义它们的进程的所有后代都是可见的，而不仅仅是直接 Java 子进程可见。在不同的操作系统上，它们可以具有微妙的语义，例如是否区分大小写。比如在 UNIX 系统上，名称的字母大小写通常很重要，而在 Microsoft Windows 系统上，名称的字母大小写通常不重要。</p><p>基于以上原因，环境变量更有可能产生意想不到的副作用。官方建议的使用方法如下：最好在可能的情况下使用系统属性。当需要全局效果或外部系统接口需要环境变量（例如 PATH）时，应使用环境变量。</p><p></p><h2 id=\"16-public-static-mapstringstring-getenv\"><a class=\"anchor\" href=\"#16-public-static-mapstringstring-getenv\">#</a> 1.6 public static Map&lt;String,String&gt; getenv()</h2><p><img data-src=\"6.png\" alt=\"截图6\"></p><p>返回当前所有环境变量的键值对。如果系统不支持环境变量，则返回一个空映射。</p><p></p><h2 id=\"2-processbuilder执行进程\"><a class=\"anchor\" href=\"#2-processbuilder执行进程\">#</a> 2. ProcessBuilder 执行进程</h2><p>关于为什么使用 ProcessBuilder 方法，在网上找到这么一句话：</p><blockquote><p>通过 Java 执行系统命令，与 cmd 中或者终端上一样执行 shell 命令，最典型的用法就是使用 Runtime.getRuntime ().exec (command) 或者 new ProcessBuilder (cmdArray).start ()。从 JDK1.5 开始，官方提供并推荐使用 ProcessBuilder 类进行 shell 命令操作。</p></blockquote><p>还有就是 Runtime 内部其实也是使用的 ProcessBuilder，综合来看 ProcessBuilder 都将成为执行命令的主流，于是写了个类似的示例，判断操作系统 + 特定执行操作的函数 ExcuteCommand ()</p><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ExcuteCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">ProcessBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProcessBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">boolean</span> isWindows <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"os.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"windows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            builder<span class=\"token punctuation\">.</span><span class=\"token function\">redirectErrorStream</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">String</span> dir <span class=\"token operator\">=</span> <span class=\"token string\">\"F:\\\\IDEA\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            stringList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            stringList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            stringList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"truffle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            stringList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">//System.out.println(stringList);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isWindows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                builder<span class=\"token punctuation\">.</span><span class=\"token function\">directory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                builder<span class=\"token punctuation\">.</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span>stringList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                builder<span class=\"token punctuation\">.</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">Process</span> process <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">BufferedReader</span> bufferedReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"gb2312\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">String</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> bufferedReader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>具体如何分割一条命令存入字符串，本人的见解就是有空格就要分开存储进 List 中。当然也可以使用一条字符串，之后 <code>builder.command(&quot;cmd&quot;,&quot;/c&quot;,stringCommand)</code> ，结果是一样的，但本人测试感觉适用度没有 StringList 好。最后的输出结果如下图，代表已经正确运行了查询 truffle 版本的指令，示例运行正确</p><p><img data-src=\"7.png\" alt=\"截图7\"></p><p></p><h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvZG9jcy9hcGkvamF2YS9sYW5nL1N5c3RlbS5odG1sI2dldFByb3BlcnR5LWphdmEubGFuZy5TdHJpbmct\">https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getProperty-java.lang.String-</span></p><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veHNzNTEyL3AvMTEwNDM0NDYuaHRtbA==\">https://www.cnblogs.com/xss512/p/11043446.html</span></p><!-- rebuild by hrmmi -->",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "http://yoursite.com/2020/07/24/fore-back-speration/",
            "url": "http://yoursite.com/2020/07/24/fore-back-speration/",
            "title": "【笔记】看程序羊谈前后端分离",
            "date_published": "2020-07-24T13:29:47.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><hr><p>这段时间为了丰富自己，开始通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWY3NDExTDdCeQ==\"> CodeSheep</span> 的视频进行学习，今天看到了大神关于前后端分离的视频，突然间对这个一直有点模糊的概念有了一些比较透彻的认识，趁着这个认识还比较清晰，赶紧写个笔记记下来～</p><p>视频里最喜欢，也是让我最透彻的一句话：<strong>前后端分不分离不是一个技术目问题，而是一个工程考量问题</strong>。这句话真的让我的思维一下子就开阔了起来，之前对于前后端分离大概只有 &quot;前后端分开开发&quot; 的认识，但这句话告诉了我 &quot;前后端分离&quot; 应当从工程的角度，而不是实际上手，也侧面引出了前后端分离也是需要前提条件的，下面一点点总结吧，也再次安利大家去关注下程序羊，真的神，我逛这么久 b 站真正的教知识教技术的大佬<br><a id=\"more\"></a></p><h2 id=\"起因\"><a class=\"anchor\" href=\"#起因\">#</a> 起因</h2><p>从首先从起因开始，为什么会有 &quot;前后端分离&quot; 的概念？</p><p>前后端分离的起因涉及到<strong>前端的缺陷</strong>所在，像之前的 jsp 技术，它将<strong>前后端高度耦合</strong>了，前后端经常需要沟通，有时候就干脆交给后端做，且前端的开发十分<strong>片段化</strong>，在实际开发的时候，从<strong>项目管理</strong>的角度看是十分<strong>影响工程的开发效率</strong>的，所以为了解决这个问题，在提出了 “解耦”，即前后端分离的开发模式</p><p>所以，前后端分离的本质就是为了<strong>解耦、高内聚低耦合</strong>（后面六个字也使用于其他复杂问题），解决前端没有工程化的问题。而具体的解决方式就是后来的 Vue 一类的<strong>前端开发组件化 / 工程化框架</strong>，它们的出现也说明前端正在迈入<strong>工程化、迭代化、可复用化</strong>的时代</p><p></p><h2 id=\"如何体现\"><a class=\"anchor\" href=\"#如何体现\">#</a> 如何体现</h2><p>那在工程的角度，前后端分离是如何体现的？</p><p>在项目工程中，前后端分离应该体现在工程的各个环节：<strong>设计，开发，测试，部署</strong></p><p>设计时模型层面的接口约定十分重要，包括接口请求方式，数据类型，格式等，否则在开发阶段就容易出现前后端扯皮的问题，也就算不上是真正的前后端分离了，因为还是没有解耦成功</p><p>Vue、React 的组件化，加上开发中前端需要的数据可以从 mock 服务器中模拟获得，使得前端不需要依赖实际的接口，可以进行独立的开发工作</p><p>而前后端分离的好处不仅在于前端，对于解耦之后的后端来说，后端开发出来的一个接口往往可以提供给许多前端使用，因为一个接口等于一个功能嘛，意味着在不同的载体上这个接口也会一样使用，也就避免了重复工作</p><p>测试的时候基本上保证<strong>前后端独立可测试</strong>，部署的时候保证<strong>前后端独立可部署</strong>，版本互相透明，可以按自己的规划来发，不受约束。</p><p></p><h2 id=\"展望\"><a class=\"anchor\" href=\"#展望\">#</a> 展望</h2><p>当然，在现阶段，前端的部署还可以优化。现在后端可以通过 Jenkins 进行可持续发布，那么后续对于前端，也应该会出现适用于前端的<strong> CI（持续集成）系统</strong></p><p></p><h2 id=\"限制条件\"><a class=\"anchor\" href=\"#限制条件\">#</a> 限制条件</h2><p>最后还需要提的，<strong>不是每个工程都适用于前后端分离</strong>，为实现前后端分离所需要的代价是巨大的，这需要前期大量的时间去沟通讨论，因为只要一个环节没有讨论透彻，就会出现上面说的没有解耦的问题，不仅时间成本大，最后又没达到效果。回到最上面的一句话，<strong>这是工程考量的问题</strong>，这个的项目是否复杂？如果进行前后端分离性价比是否够高？是否值得投入精力进行前后端分离？这都是进行前后端分离前需要考虑的要素</p><p></p><!-- rebuild by hrmmi -->",
            "tags": [
                "Note"
            ]
        },
        {
            "id": "http://yoursite.com/2020/07/24/ssh-wsl/",
            "url": "http://yoursite.com/2020/07/24/ssh-wsl/",
            "title": "在子系统WSL中实现远程服务器免密登陆",
            "date_published": "2020-07-24T02:31:27.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><hr><p>在测试 SSH 是否成功安装时，我发现我无法免密登陆远程服务器，但是在项目命令中确实实现了免密登陆这一功能。虽然已经配置过 XShell 并且使用的十分顺手，但由于项目需要使用<strong> WSL</strong>，这意味着如果 WSL 没有设置好远程登陆的话势必会对调试及项目进展造成一定的阻碍，所以毅然决然！配置！</p><p>一开始配置错了，配成了本机 Windows 的免密登陆，之后发现其实是密钥的存储路径搞错了，方法是一样的<br><a id=\"more\"></a></p><p><img data-src=\"1.png\" alt=\"截图1\"></p><p></p><h2 id=\"1-生成公私钥\"><a class=\"anchor\" href=\"#1-生成公私钥\">#</a> 1. 生成公私钥</h2><p>SSH 的安装这里不进行介绍，我是在安装 openssl 的时候自动给下好了的，所以无法当作参考。这里继续往下走，我们 cmd 打开命令行，输入 <code>wsl</code> ，来到子系统，输入 <code>bash</code> （如果是装在本地则无需这两处）</p><p>输入 <code>ssh-keygen</code> 命令，按要求输入存储路径，密码等，我一般都是三个回车<s>也没什么大碍</s>，之后会存在默认路径一个叫.ssh 的文件夹中，在文件夹中应当出现了公私钥 id_rsa</p><p><img data-src=\"2.png\" alt=\"截图2\"></p><p></p><blockquote><p>本机默认路径为：C:\\Users\\ 用户名 \\.ssh</p><p>WSL 默认路径为：C:\\Users\\ASUS\\AppData\\Local\\Packages\\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\\LocalState\\rootfs\\home\\yaqin\\.ssh</p></blockquote><p></p><h2 id=\"2-将公钥传给远程服务器\"><a class=\"anchor\" href=\"#2-将公钥传给远程服务器\">#</a> 2. 将公钥传给远程服务器</h2><p>利用 Xftp 将公钥<strong> id_rsa.pub</strong> 传给服务器，scp 指令亦可，因为 WSL 的默认路径实在是太长了，为了方便这里使用的是 Xftp 进行传输，来到存储公钥的地方并将文件传给远程服务器的 **.ssh** 文件夹</p><p><img data-src=\"3.png\" alt=\"截图3\"></p><p></p><p>使用 scp 指令则 <code>scp 路径文件夹 root@IP地址:root/.ssh</code> 即可</p><p></p><h2 id=\"3-远程服务器配置\"><a class=\"anchor\" href=\"#3-远程服务器配置\">#</a> 3. 远程服务器配置</h2><p>来到远程服务器，使用 <code>cat .shh/id_rsa.pub &gt;&gt; .ssh/authorized_keys</code> 指令重命名公钥文件（如果需要多个用户免密该服务器，则用 vim 在原有 authorized_keys 基础上加用户公钥）</p><p><img data-src=\"4.png\" alt=\"截图4\"></p><p></p><p>现在就可以用 wsl 免密登陆远程服务器啦！enjoy~</p><p><img data-src=\"5.png\" alt=\"截图5\"></p><p></p><h2 id=\"4-小尾巴\"><a class=\"anchor\" href=\"#4-小尾巴\">#</a> 4. 小尾巴</h2><p>在项目中发现学长可以通过服务器名进行进行免密连接，但现在我自己只能做到 IP 地址连接。等我搞清楚其中奥秘，如果可以复刻再来填坑 (现在填完啦！单开了一份<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxsb3lhcWluLmdpdGh1Yi5pby8yMDIwLzA3LzI1L3NzaC13aXRoLW5hbWUv\">文章</span>)</p><!-- rebuild by hrmmi -->",
            "tags": [
                "Windows",
                "Linux"
            ]
        },
        {
            "id": "http://yoursite.com/2020/07/23/error-for-wsl-windows/",
            "url": "http://yoursite.com/2020/07/23/error-for-wsl-windows/",
            "title": "wsl.exe系统找不到指定的文件，安装与配置",
            "date_published": "2020-07-23T06:09:45.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><hr><p>最近部署好的项目在调试时出现了如下报错：</p><blockquote><p>java.io.IOException: Cannot run program &quot;wsl.exe&quot;: CreateProcess error=2, 系统找不到指定的文件。<br>at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)<br>at com.netflix.eureka.resources.ApplicationResource.callContract(ApplicationResource.java:257)<br>at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>at java.lang.reflect.Method.invoke(Method.java:498)<br>...</p></blockquote><p><br>阅读了一下源码，发现项目后端需要 Windows 用一个叫做 &quot;wsl.exe&quot; 的文件执行一条 Linux 语句，而 wsl 的全名为<strong> Windows Subsystem for Linux</strong>，是微软开发的Linux兼容内核接口<a id=\"more\"></a>（来自百度百科），其实说白了就是可以在Windows环境下运行Bash shell的程序！而且与完整的虚拟机设置相比，对计算机资源的压力较小</p><p>听起来简直像是程序猿必备的工具，<s>我竟然一直不知道太惭愧了</s>，既然 wsl 这么有用，那我们就来安装一下它吧</p><h2 id=\"1-打开开发者模式\"><a class=\"anchor\" href=\"#1-打开开发者模式\">#</a> 1. 打开开发者模式</h2><p>在确保 Windows 为 64 位后，设置 -&gt; 更新和安全 -&gt; 开发者选项，选中开发者模式，等待系统安装新功能（印象中需要重启）</p><p><img data-src=\"1.png\" alt=\"截图1\"></p><p></p><h2 id=\"2-控制面板\"><a class=\"anchor\" href=\"#2-控制面板\">#</a> 2. 控制面板</h2><p>打开控制面板 -&gt; 程序和功能 -&gt; 启用 Windows 应用 -&gt; 勾选 &quot;适用于 Linux&quot; 的 Windows 子系统（英文名 Windows subsystem for Linux）</p><p><img data-src=\"2.png\" alt=\"截图2\"></p><p></p><p>确定后重启计算机，重启后 cmd 唤出命令行，输入 wsl 会得到如下结果，说明我们的安装已经成功了一半了，接下来需要安装这个叫做 &quot;分发版&quot; 的东西</p><p><img data-src=\"3.png\" alt=\"截图3\"></p><p></p><h2 id=\"3-安装分发版\"><a class=\"anchor\" href=\"#3-安装分发版\">#</a> 3. 安装分发版</h2><p>打开 Microsoft Store，安装分发版，官方也有<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvaW5zdGFsbC13aW4xMCNpbnN0YWxsLXlvdXItbGludXgtZGlzdHJpYnV0aW9uLW9mLWNob2ljZQ==\">链接</span>可以打开每个分发版的 Microsoft Store 页面，这里按自己的需求下载合适的版本即可，我下的是 Ubuntu 18</p><p><img data-src=\"4.png\" alt=\"截图4\"></p><p></p><p>注意 wsl 只能在系统驱动器（通常是 C 盘）中运行，如果之前更改过默认保存路径记得改回来：设置 -&gt; 系统 -&gt; 存储 -&gt; 更改新内容的保存位置</p><p><img data-src=\"5.png\" alt=\"截图5\"></p><p></p><h2 id=\"4-配置linux分发版\"><a class=\"anchor\" href=\"#4-配置linux分发版\">#</a> 4. 配置 Linux 分发版</h2><p>下载完成后，开启应用，按照控制台提示（需要等待一段时间），为新的 Linux 分发版创建新帐户和密码<br><img data-src=\"6.png\" alt=\"截图6\"></p><p></p><p>至此子系统的安装配置就全部完成啦，建议一开始使用先输入命令： <code>sudo apt update &amp;&amp; sudo apt upgrade</code> 更新下更新包目录</p><p>最后报错也解决啦！开心！！！</p><p></p><h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83YjM0ODgyODY0NGU=\">https://www.jianshu.com/p/7b348828644e</span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvaW5zdGFsbC13aW4xMCNpbnN0YWxsLXRoZS13aW5kb3dzLXN1YnN5c3RlbS1mb3ItbGludXg=\">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#install-the-windows-subsystem-for-linux</span><br>安装若还出现了其他问题，可以去官网查询原因：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvdHJvdWJsZXNob290aW5nI2NvbW1vbi1pc3N1ZXM=\">https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#common-issues</span></p><!-- rebuild by hrmmi -->",
            "tags": [
                "Java",
                "Windows"
            ]
        },
        {
            "id": "http://yoursite.com/2020/07/21/solidity/",
            "url": "http://yoursite.com/2020/07/21/solidity/",
            "title": "Windows系统下进行Solidity智能合约项目的配置",
            "date_published": "2020-07-21T07:19:17.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><hr><p>最近要开始学习智能合约的相关知识，需要学习 solidity 语言，所以想建一个 solidity 项目实例来实践一下，同时监控账户信息。但是因为我 Linux 虚拟机里面差的东西太多了，而且好不容易在本机下面配置好的 IDEA，所以毅然决然在 Windows 系统下面配置 solidity！</p><p>不过不管是国内教程还是油管都是用 Linux/Mac 进行的配置，没有找到 Win 系统的教程，所以在搭建好环境后准备开个教程写下大致的流程，希望能帮到大家<br><a id=\"more\"></a><br>如果只是单纯的想要熟练语法，写些比较初级的程序，可以直接使用官方提供的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZW1peC5ldGhlcmV1bS5vcmcv\"> Remix 在线编辑器</span>，按照<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS1jbi5yZWFkdGhlZG9jcy5pby96aC9kZXZlbG9wL2luc3RhbGxpbmctc29saWRpdHkuaHRtbA==\">官方文档</span>进行学习，因为我对观察交易信息及账户余额有特殊需求，且需要使用 MetaMask，所以需要在本地进行环境配置</p><h2 id=\"1-安装依赖\"><a class=\"anchor\" href=\"#1-安装依赖\">#</a> 1. 安装依赖</h2><ul><li>Nodejs：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">https://nodejs.org/en/</span></li></ul><p>因为在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxsb3lhcWluLmdpdGh1Yi5pby8yMDIwLzA3LzIxL2Jsb2cv\">上一篇博客</span>中有写到怎么安装配置 Nodejs，包括优化速度，所以这里不重复讲解</p><ul><li>truffle</li></ul><p>在命令行中输入 <code>npm install -g truffle@5.1.14</code> 进行安装，这里我选定了版本为 5.1.14 主要是为了和油管大神保持相同的版本，不是必须的</p><p>安装结果如下，在命令行中输入 <code>truffle version</code> ，若提示找不到 'truffle' 命令，请确认 Nodejs 环境变量是否配置正确</p><p><img data-src=\"1.png\" alt=\"截图1\"></p><ul><li>Ganache</li></ul><p>官网链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHJ1ZmZsZXN1aXRlLmNvbS9nYW5hY2hl\">https://www.trufflesuite.com/ganache</span></p><p>下载当前操作系统对应版本，Windows 为.appx 文件，双击直接安装即可。安装结果如下</p><p><img data-src=\"2.png\" alt=\"截图2\"></p><p></p><h2 id=\"2-ide环境配置\"><a class=\"anchor\" href=\"#2-ide环境配置\">#</a> 2. IDE 环境配置</h2><p>本人使用的是 IDEA 2020.1，只需要安装 solidity 插件即可。</p><p>File-&gt;Settings-&gt;Plugins 在 Market 中搜索<strong> Intellj-solidity</strong> 进行安装，重启后 IDEA 即可支持 solidity 语言</p><p><img data-src=\"4.png\" alt=\"截图4\"></p><h2 id=\"3-新建智能合约项目\"><a class=\"anchor\" href=\"#3-新建智能合约项目\">#</a> 3. 新建智能合约项目</h2><p>利用 truffle 对项目文件夹进行初始化</p><pre><code class=\"language-cmd\">    mkdir 项目名\n    cd 项目名\n    truffle init\n</code></pre><p>获得目录架构如下</p><p><img data-src=\"3.png\" alt=\"截图3\"></p><p>我们使用 IDE 打开项目（之后将以 IDEA 代称），在 contract 目录下面新建自己的.sol 文件，<strong>不要删改 Migrations.sol 文件</strong>，如我这里新建了自己的智能合约 SimpleStorage.sol</p><p><img data-src=\"5.png\" alt=\"截图5\"></p><p>之后就可以书写自己的合约啦，这里我先随便写写，接下来讲 Ganache 怎么使用</p><p></p><h2 id=\"4-ganache生成虚拟账户并连接truffle\"><a class=\"anchor\" href=\"#4-ganache生成虚拟账户并连接truffle\">#</a> 4. Ganache 生成虚拟账户并连接 truffle</h2><p>如果是初次使用，选择<strong> QuickStart (Etherum)</strong>, 并保存该工作区间，这里我已经保存了一个叫 excellent-knowledge 的区间，所以直接点开它</p><p><img data-src=\"7.png\" alt=\"截图7\"></p><p>可以看到 Ganache 生成了 10 个虚拟的以太坊账户供我们测试，我们点右上角的设置图标</p><p><img data-src=\"8.png\" alt=\"截图8\"></p><p>在 WorkSpace 中，点击<strong> Add Project</strong>，选中之前生成的智能合约项目根路径下的<strong> truffle-config.js</strong></p><p><img data-src=\"9.png\" alt=\"截图9\"></p><p>Server 中 Ganache 默认使用的端口为 7545，也可以根据需求进行更改，设置完成后点击右上角的<strong> Restart</strong> 重开 Ganache</p><p><img data-src=\"10.png\" alt=\"截图10\"></p><p>同时<strong> truffle-config.js</strong> 也需要进行配置，在该文件中使用如下代码，其中 port 端口需要与 Ganache 一致</p><figure class=\"highlight json\"><figcaption data-lang=\"JSON\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module.exports = <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        networks<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            development<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                host<span class=\"token operator\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                port<span class=\"token operator\">:</span> <span class=\"token number\">7545</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                network_id<span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p></p><h2 id=\"5-项目编译并进行发布\"><a class=\"anchor\" href=\"#5-项目编译并进行发布\">#</a> 5. 项目编译并进行发布</h2><p>在智能合约项目根路径中，使用命令 <code>truffle compile</code> 对项目进行编译，如果项目语法存在错误会报错，根据报错信息进行修改直到编译成功</p><p><img data-src=\"11.png\" alt=\"截图11\"></p><p><code>truffle migrate</code> 将合约进行发布，终端显示已部署合同的交易 ID 和地址，还包括成本汇总和实时状态更新。因为我已经发布过一次了，所以这里用的官网截图</p><p><img data-src=\"14.png\" alt=\"截图14\"></p><p>打开 Ganache 的<strong> Transactions</strong> 界面，发现有账户进行了交易，交易类型为<strong> Contract Call</strong></p><p><img data-src=\"13.png\" alt=\"截图13\"></p><p>点开查看详细交易信息，此时请求方的地址应为工作区间十个虚拟账户的第一个账户，也说明我们的智能合约已经成功的发布</p><p><img data-src=\"12.png\" alt=\"截图12\"></p><p>接下来可以使用 <code>truffle console</code> 命令，与账户进行交互，测试，判断合约准确性等操作，具体可看参考链接的 QuickStart</p><p>之后可以将项目与 MetaMask 进行连接，就可以进行分布式应用的开发，但此部分仍在学习中！暂时无法分享经验啦<br><img data-src=\"15.png\" alt=\"截图15\"></p><h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2><p>truffle 官网中的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHJ1ZmZsZXN1aXRlLmNvbS9kb2NzL3RydWZmbGUvcXVpY2tzdGFydA==\"> QuikeStart</span> 关于合同交互的一些知识也在上面，可自行学习</p><p>感谢大神<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vYy9EYXBwVW5pdmVyc2l0eQ==\"> DApp University</span> 在油管上的分享，也十分推荐想要学习分布式应用的同学学习他的视频教程</p><!-- rebuild by hrmmi -->",
            "tags": [
                "Solidity",
                "Blockchain",
                "Smart Contract"
            ]
        },
        {
            "id": "http://yoursite.com/2020/07/21/blog/",
            "url": "http://yoursite.com/2020/07/21/blog/",
            "title": "如何使用github搭建个人博客",
            "date_published": "2020-07-21T06:36:19.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><hr><p>最近因为在本专业的老师那里进行实习，学习的东西很多，也十分有意义想要分享给大家，所以准备正式开始管理并更新我的博客！</p><p>就从 “如何搭建个人博客” 这一比较简单的文章开始写起吧，之后如果有时间会将我学习的东西整理出来！这里的搭建过程参考了<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVliNDExYTd0eT90PTE1MzE=\"> CodeSheep</span> 的 b 站视频！十分感谢！鞠躬（大家快去关注大神）</p><p>本教程与其他热门教程不同点在于：</p><ul><li>无需安装 Github 客户端</li><li>无需添加公私钥</li><li>使用命令行或 Bash，<s>萌新程序猿表示十分舒适</s><br><a id=\"more\"></a><br></li></ul><h2 id=\"1-安装依赖\"><a class=\"anchor\" href=\"#1-安装依赖\">#</a> 1. 安装依赖</h2><ul><li><p>Git: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=\">https://git-scm.com/downloads</span></p></li><li><p>Nodejs：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">https://nodejs.org/en/</span></p><p>安装结果如下：</p><p><img data-src=\"1.jpg\" alt=\"截图1\"></p></li><li><p>之后还需要配置一下 nodejs 的环境，并且把依赖的存储空间从 C 盘改到其他的盘里，减少内存的压力，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjg1MzM1L2FydGljbGUvZGV0YWlscy85MDY5NjEyNg==\">参考链接</span></p><p>创建两个文件夹：node_global node_cache，<strong>注意路径中不要有中文或空格</strong></p><p>使用下面命令将 npm 的全局模块目录和缓存目录配置到我们刚才创建的那两个目录</p><figure class=\"highlight raw\"><figcaption data-lang><span>w</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm config set prefix &quot;node_global 文件的路径&quot;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npm config set cache &quot;node_cache 的文件路径&quot;</pre></td></tr></table></figure><p>可以使用命令 <code>npm config get prefix</code> 查看 prefix 路径是否已经正确修改</p><p>随后配置环境变量，系统变量新建 NODE_PATH，路径为安装的 nodejs 中的 node_modules 文件夹（下载好的文件会存在此处）</p><p><img data-src=\"01.png\" alt=\"截图01\"></p></li></ul><p>用户变量在 PATH 变量中添加 node_global 文件的路径</p><p><img data-src=\"02.jpg\" alt=\"截图02\"></p><ul><li><p>优化速度：</p><p>我们呼出命令行，输入 <code>npm install --g cnpm</code> , 安装淘宝镜像。之后我们使用 npm 的时候，把命令中的 <code>npm</code> 替换成 <code>cnpm</code> 即可使用镜像下载，速度会快很多</p></li><li><p>Hexo</p><p>命令行中输入 <code>cnpm install --g hexo-cli</code> , 等待下载完成，如果下载过程中出现 WARNING 可以忽略，不是 FATAL 就可以</p></li></ul><p></p><h2 id=\"2-在localhost中查看博客\"><a class=\"anchor\" href=\"#2-在localhost中查看博客\">#</a> 2. 在 localhost 中查看博客</h2><ul><li><p>首先我们需要在本地中新建文件夹，这个文件夹用于存放个人博客所需的所有东西，用命令行新建文件夹并进入</p><figure class=\"highlight raw\"><figcaption data-lang><span>w</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkdir 文件夹名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cd 文件夹名</pre></td></tr></table></figure></li><li><p>随后，输入命令 <code>hexo init</code> 进行初始化，需要下载文件和依赖，所需时间比较长</p><p><img data-src=\"2.jpg\" alt=\"截图2\"></p></li></ul><p>最后的结果是在文件夹中生成了一系列的文件，文件夹内大致架构如下图</p><p><img data-src=\"3.jpg\" alt=\"截图3\"></p><ul><li><p>我们通过在命令行输入命令 <code>hexo s</code> 启动服务器，在 localhost:4000 中查看当前博客的效果</p><p><img data-src=\"4.jpg\" alt=\"截图4\"></p></li></ul><p>停止预览在命令行 Ctrl+C 终止批处理操作即可</p><p></p><h2 id=\"3-书写新的博客文章\"><a class=\"anchor\" href=\"#3-书写新的博客文章\">#</a> 3. 书写新的博客文章</h2><ul><li><p>在命令行中写入 <code>hexo n 文章名</code></p><p><img data-src=\"5.jpg\" alt=\"截图5\"></p></li></ul><p>根据终端返回的信息，来到相对路径<strong> source/_posts</strong> 中，所有的文章都被收入进这里。我们发现新生成的以文章名命名的 md 文件，可用自己的 IDE 对.md 文件进行书写<br><img data-src=\"6.jpg\" alt=\"截图6\"></p><p>个人使用的 IDE 为<strong> VSCODE+Markdown Preview Github Styling 插件</strong>，快捷建 Ctrl+Shift+V 打开预览，预览实时更新，分页看很舒适</p><p><img data-src=\"7.jpg\" alt=\"截图7\"></p><p><img data-src=\"8.jpg\" alt=\"截图8\"></p><p>如果没有其他编程需求，可以使用 Typora，用过的人都说好</p><ul><li><p>编写文件完毕后，通过在终端输入 <code>hexo clean</code> , <code>hexo g</code> 命令生成博客</p><p><img data-src=\"9.jpg\" alt=\"截图9\"></p></li></ul><p>接着我们要将个人博客部署到 github 上，可以在上传之前依旧可以使用 <code>hexo s</code> 预览当前博客的效果</p><p></p><h2 id=\"4-部署到github账户\"><a class=\"anchor\" href=\"#4-部署到github账户\">#</a> 4. 部署到 Github 账户</h2><ul><li><p>首先，Github 账号登陆，创建 repository，注意仓库名字必须是 <code>账号名.github.io</code></p><p>创建完毕后复制 git 链接</p><p><img data-src=\"10.jpg\" alt=\"截图10\"></p></li><li><p>在文件夹中打开_config.yml 进行部署（deploy）相关的配置</p><p><img data-src=\"11.jpg\" alt=\"截图11\"></p></li></ul><p>按下图进行配置即可，'repo' 处换成刚才复制的 git 链接，修改时注意<strong>冒号后面的空格一定要保留！！</strong></p><p><img data-src=\"12.jpg\" alt=\"截图12\"></p><ul><li><p>保存配置文件，在命令行中输入命令 <code>hexo d</code> 进行部署，并按要求输入 github 账户名及密码</p><p><img data-src=\"13.jpg\" alt=\"截图13\"></p></li></ul><p>出现 'Deploy Done' 字样，说明博客部署成功</p><ul><li><p>在浏览器中输入 <code>账号名.github.io</code> ，就可以访问我们之前改好的博客啦！鼓掌！</p><p><img data-src=\"14.jpg\" alt=\"截图14\"></p></li></ul><p></p><h2 id=\"5-管理博客\"><a class=\"anchor\" href=\"#5-管理博客\">#</a> 5. 管理博客</h2><ul><li>和之前的流程一样，在博客文件夹路径中<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo n 文章名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#x2F;&#x2F; 修改.md 文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo clean</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hexo g</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#x2F;&#x2F;hexo s</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>hexo d</pre></td></tr></table></figure>就可以进行博客的更新啦，接下来讲讲如何更换博客风格，以大家力推的 yilia 为例</li></ul><p></p><h2 id=\"6-转换博客风格\"><a class=\"anchor\" href=\"#6-转换博客风格\">#</a> 6. 转换博客风格</h2><ul><li><p>yilia 官方 github 链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpdHRlbi9oZXhvLXRoZW1lLXlpbGlh\">https://github.com/litten/hexo-theme-yilia</span></p><p>里面官方例子可以仔细看看，因为有注解！很良心！不然一开始拿到可能会懵</p></li><li><p>按照 README，在博客文件夹中右键 -&gt;Git Bash Here，输入命令</p><figure class=\"highlight raw\"><figcaption data-lang><span>w</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git themes&#x2F;yilia</pre></td></tr></table></figure><p>我的下载进度比较缓慢，可能要多等一会儿</p></li><li><p>下载完成后，在相对路径 /themes 中会出现 yilia 文件夹，其他主题也是用类似的方法下载到该路径中</p><p>接着我们再次对_config.yml 进行配置，更改 theme 的属性为 yilia</p><p><img data-src=\"15.jpg\" alt=\"截图15\"></p></li><li><p>再次进行 clean、g、d 的操作，上传成功后刷新我们的博客网址，就可以发现风格变啦～</p><p>亲测风格改变的话加载时间会比较长，我也有出现上传了之后还是原来主题的情况，如果怀疑的话用 <code>hexo s</code> 在本地测试一下，如果确定已经更改好页面了，剩下就是耐心等待吖</p><p><img data-src=\"16.jpg\" alt=\"截图16\"></p></li></ul><p>关于 yilia 主题的其他配置，这里直接给出推荐链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hYTEwNGZmZGYwNDU=\">https://www.jianshu.com/p/aa104ffdf045</span></p><!-- rebuild by hrmmi -->",
            "tags": [
                "Github",
                "Hexo"
            ]
        },
        {
            "id": "http://yoursite.com/2018/09/25/python-primary/",
            "url": "http://yoursite.com/2018/09/25/python-primary/",
            "title": "【笔记】Python技术分享会笔记",
            "date_published": "2018-09-25T03:31:32.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><p>记录学长在分享会时提到的 Python 相关知识，因为大一课程已经系统学习过 C<ins> 语言，所以分享会主要围绕 Python 与 C</ins> 的不同点进行说明，以对 Python 语法有一个迅速的认识，快速习得 Python 的基本语法。知识点较碎，以防忘记故记录下来</p><p><strong>1. # -*- coding: utf-8 -*-</strong></p><p><a id=\"more\"></a></p><p><img data-src=\"1.png\" alt=\"截图1\"></p><p></p><p><strong>2. print(&quot;,&quot;)</strong><br>print 内可用 &quot;+&quot; 和 '&quot;,&quot; 差不多<br>print 内 string 与 integer 的乘法可使 integer 个 string 输出，但是 +- 不可以，string*0 不会输出任何东西<br></p><p><strong>3. (r'123456\\n1')</strong><br>r 后括号的所有东西包括 &quot;&quot; 都不会被更改（read 只读）<br></p><p><strong>4. '''…'''</strong><br>可以输出多行东东，但里面有 \\n 也会被更改，想打印出 \\n 或其他转义符可以与 r 连用<br></p><p><strong>5. 命名规范</strong><br>元素用大写命名 意思是不可更改常量，但 python 不会限制他不可更改，只是编译习惯<br></p><p><strong>6. 两种除法</strong><br>除法在 python 有两种：</p><blockquote><p>5/3 是正常的除法，带小数点的那种<br>！6/3=2.0 float！<br>5//3 像 C<ins> 的除法，会舍弃小数点<br>还有 5%3 也是和 C</ins> 一样取余数</p></blockquote><p></p><p><strong>7. inf = 无限大</strong><br></p><p><strong>8. ord () 函数，chr () 函数</strong><br>ord () 函数获取字符的整数表示，chr () 函数把编码转换为对应的字符</p><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Ord<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token number\">65</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Chr<span class=\"token punctuation\">(</span><span class=\"token number\">65</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token string\">'A'</span></pre></td></tr></table></figure><p></p><p><strong>9.bytes 类型</strong><br>bytes 类型的数据用带 b 前缀的单引号或双引号表示：</p><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token string\">b'ABC'</span></pre></td></tr></table></figure><p>要注意区分 'ABC' 和 b'ABC'，前者是 str，后者虽然内容显示得和前者一样，但 bytes 的每个字符都只占用一个字节。<br></p><p><strong>10. Unicode 编码</strong><br>以 Unicode 表示的 str 通过 encode () 方法可以编码为指定的 bytes<br>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是 bytes。要把 bytes 变为 str，就需要用 decode () 方法<br>如果 bytes 中只有一小部分无效的字节，可以传入 errors='ignore' 忽略错误的字节：</p><p><img data-src=\"2.png\" alt=\"截图2\"></p><p></p><p><strong>11. 格式化方式</strong></p><p><img data-src=\"3.png\" alt=\"截图3\"></p><p>如果你不太确定应该用什么，% s 永远起作用，它会把任何数据类型转换为字符串<br>讨论一下，%_代表这里是要填入东西的：</p><blockquote><p>如果需要设定保留小数：%.2f 是保留两位小数的 float,%04d 是不够四位整数用 0 补在前面<br>% 表示后面的东西是需要填入 %_的<br>if 填入的东西 &gt;=2, 需要用括号括起来</p></blockquote><p></p><p><strong>12. 字符 %</strong><br>% 只是一个单纯的字符，在 python 中如何表示 --&gt;%%<br></p><p><strong>13. python 的 del 用法</strong><br>用 del 删除已设置的变量，但不是数据：</p><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a<span class=\"token operator\">=</span><span class=\"token number\">1</span>       <span class=\"token comment\"># 对象 1 被 变量 a 引用，对象 1 的引用计数器为 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    b<span class=\"token operator\">=</span>a       <span class=\"token comment\"># 对象 1 被变量 b 引用，对象 1 的引用计数器加 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    c<span class=\"token operator\">=</span>a       <span class=\"token comment\">#1 对象 1 被变量 c 引用，对象 1 的引用计数器加 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">del</span> a     <span class=\"token comment\">#删除变量 a，解除 a 对 1 的引用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">del</span> b     <span class=\"token comment\">#删除变量 b，解除 b 对 1 的引用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#最终变量 c 仍然引用 1</span></pre></td></tr></table></figure><p>也可以用 del 删除 list 中变量如 <code>del li[0]</code><br></p><p><strong>14. 加减乘除</strong><br>Python 对加减乘除的使用比较灵活，即使是 string 也可使用 *=，+= 的算法</p><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token string\">\"spam\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x <span class=\"token operator\">+=</span> <span class=\"token string\">\"eggs\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span>（x）   <span class=\"token comment\"># spameggs</span></pre></td></tr></table></figure><p></p><p><strong>15. bool 值</strong><br>bool 值的 True 和 False 开头必大写！python 大小写敏感<br></p><p><strong>16. 条件句</strong><br>if 的条件不用括号，而是在表达句末尾用冒号！使用缩进不用大括号，python 缩进敏感，缩进了的都是 if 的执行语句</p><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>difference：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Python：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> spam<span class=\"token operator\">></span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>spam<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Program finished\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>C<span class=\"token operator\">+</span><span class=\"token operator\">+</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Program finished\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p></p><p><strong>17. 列表</strong></p><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>word.append</td><td>末尾添加</td></tr><tr><td>len(word)</td><td>元素个数</td></tr><tr><td>word.insert (位置，东西)</td><td>定点插入</td></tr><tr><td>word.index (东西)</td><td>查找元素位置</td></tr></tbody></table><p><img data-src=\"4.png\" alt=\"截图4\"></p><p></p><p><strong>18.range</strong><br>可在 for 循环的时候使用</p><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>nums=list(range(5))</td><td>用 range 初始化 list</td></tr><tr><td>range(x)</td><td>从 0 ~ x</td></tr><tr><td>range(x1, x2)</td><td>从 x1 ~ (x2-1)</td></tr><tr><td>range(x1, x2, n)</td><td>从 x1 ~ (x2-1)，每个元素相差 n</td></tr></tbody></table><p><br><strong>19. loop</strong></p><p><img data-src=\"5.png\" alt=\"截图5\"></p><p><img data-src=\"6.png\" alt=\"截图6\"></p><p>其中的 word 只是一个表示列表内元素的变量，可以取其他名字无影响<br></p><p><strong>20. for 循环</strong><br>for loop 一般用于重复，重复次数可以用 range 实现：且在此 loop 中使用 range 不用强调 list</p><p><img data-src=\"7.png\" alt=\"截图7\"></p><p>这里相当于 C++ 的：</p><pre><code class=\"language-c++\">for（int i=0；i&lt;5;i++)\n{\n  cout&lt;&lt;&quot;hello&quot;&lt;&lt;endl;\n}\n</code></pre><!-- rebuild by hrmmi -->",
            "tags": [
                "Pyhton",
                "Backend"
            ]
        },
        {
            "id": "http://yoursite.com/2018/08/04/pr-tips/",
            "url": "http://yoursite.com/2018/08/04/pr-tips/",
            "title": "【笔记】Pr制作视频小知识",
            "date_published": "2018-08-04T02:34:28.000Z",
            "content_html": "<!-- build time:Fri Aug 27 2021 16:14:17 GMT+0800 (中国标准时间) --><p>因为社团与社会实践需要，记录一下学习 Pr 时学到的一些能让视频观感变友好的小知识。本博客将在 UP 主<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMTc2Mzg1MDk=\">星月兮</span>的相关视频基础上进行归纳总结，并加上自己日常实践得到的经验，感谢大佬的技术分享！</p><p></p><h2 id=\"1-调整视频成色\"><a class=\"anchor\" href=\"#1-调整视频成色\">#</a> 1. 调整视频成色</h2><p>调整视频成色一是可以更符合当前视频所要表达的情绪，比如气氛压抑的视频色调会比较冷，二是如果拿平常的手机拍摄，像社会实践我拿的 IOS 原生相机，它会根据当时的图像自动进行调色，所以色调有时偏蓝有时偏黄，总之不是很统一，就只能后期进行补救。<br><a id=\"more\"></a><br>在 Pr 中的操作为：视频效果→颜色矫正→lumetri 颜色→到效果界面调（右边也有自带）即可进行调色，当然有滤镜更好，自己调容易调不准，也容易调出来的色调不好看</p><p>（2019 年补）在工作室接受培训的时候，把视频都统一调成灰色，更容易进行颜色矫正，视频之间的色调会更统一</p><p></p><h2 id=\"2-高斯模糊\"><a class=\"anchor\" href=\"#2-高斯模糊\">#</a> 2. 高斯模糊</h2><p>使用情况：</p><ul><li>需要在视频中嵌入标题，模糊可以使眼睛更好的注重于文字而不是画面</li><li>可以配合关键帧做逐渐清晰的效果</li></ul><p>高斯模糊真的简单又好用！</p><p><img data-src=\"1.png\" alt=\"截图1\"></p><p></p><h2 id=\"3-防抖\"><a class=\"anchor\" href=\"#3-防抖\">#</a> 3. 防抖</h2><p>拍摄的时候没有手机稳定器，还好 IOS 原生相机自带一定的防抖效果，但依然需要后期补救一下：</p><p>视频效果→变形稳定器 VFX，会裁掉抖动的外边缘以减轻整体视频抖动情况。渲染所用时间较长，可在效果控件界面观看进程 + 调试。页面放大在所难免，防抖要求太苛刻的话容易破环视频构图，要多尝试多动脑（实在不行还是整个稳定器）</p><p>如果使用失败：选中视频→右键新建一嵌套序列→再次使用 VFX，但我还没出现使用失败的情况</p><p></p><h2 id=\"4-果冻效应\"><a class=\"anchor\" href=\"#4-果冻效应\">#</a> 4. 果冻效应</h2><p>果冻效应，指在生产生活中像果冻一样产生的变形和颜色变化，如果被拍摄物体相对于相机高速运动或快速振动时。用卷帘快门方式拍摄，逐行扫描速度不够，拍摄结果就可能出现 “倾斜”、“摇摆不定” 或 “部分曝光” 等情况。</p><p>视频效果→扭曲→果冻效应修复即可</p><p><img data-src=\"5.png\" alt=\"截图5\"></p><h2 id=\"5-轨道遮罩键\"><a class=\"anchor\" href=\"#5-轨道遮罩键\">#</a> 5. 轨道遮罩键</h2><p>将视频只在文字的后面显示，效果如下：</p><p><img data-src=\"2.png\" alt=\"截图2\"></p><p>使用方法：</p><ul><li>遮罩键放在被遮罩的视频中</li><li>合成方式 -&gt;Alpha 遮罩，遮罩选遮住别人的那条轨道</li><li>也有反向键，遮罩关系互换</li></ul><p></p><h2 id=\"6-镜头光晕\"><a class=\"anchor\" href=\"#6-镜头光晕\">#</a> 6. 镜头光晕</h2><p>VLOG 常用，用好了唯美 + 岁月静好</p><p>需做一个新建项目 -&gt; 调整图层：</p><p><img data-src=\"3.png\" alt=\"截图3\"></p><p>然后将调整图层拖到视频上方并将镜头光晕加入调整图层</p><p></p><h2 id=\"7-马赛克\"><a class=\"anchor\" href=\"#7-马赛克\">#</a> 7. 马赛克</h2><p>同样需要建调整图层，但如果之前有，不想建就不建了叭！如果只想让某一部分变马赛克，可以在效果控件调，加一个蒙版就行：</p><p><img data-src=\"4.png\" alt=\"截图4\"></p><p>用于屏蔽广告或搞笑，社会实践里被我用来挡住价格</p><p>用的是 Pr，动态追踪效果其实对我来说够用了，但据说打码用 AE 的动态追踪效果极佳</p><p></p><!-- rebuild by hrmmi -->",
            "tags": [
                "Note",
                "Adobe"
            ]
        }
    ]
}